{
  "categories": [
    {
      "id": 200255388,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/categories/200255388-General.json",
      "html_url": "https://support.synchro.io/hc/en-us/categories/200255388-General",
      "position": 0,
      "created_at": "2015-04-02T22:35:13Z",
      "updated_at": "2016-09-09T11:26:21Z",
      "name": "General",
      "description": "",
      "locale": "en-us",
      "source_locale": "en-us",
      "outdated": false
    },
    {
      "id": 200270167,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/categories/200270167-API-Documentation.json",
      "html_url": "https://support.synchro.io/hc/en-us/categories/200270167-API-Documentation",
      "position": 1,
      "created_at": "2015-04-15T07:01:11Z",
      "updated_at": "2016-07-01T02:20:59Z",
      "name": "API Documentation",
      "description": "",
      "locale": "en-us",
      "source_locale": "en-us",
      "outdated": false
    }
  ],
  "sections": [
    {
      "id": 200730338,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/sections/200730338-Announcements.json",
      "html_url": "https://support.synchro.io/hc/en-us/sections/200730338-Announcements",
      "category_id": 200255388,
      "position": 1,
      "sorting": "manual",
      "created_at": "2015-04-02T22:35:14Z",
      "updated_at": "2016-09-09T11:26:21Z",
      "name": "Announcements",
      "description": "",
      "locale": "en-us",
      "source_locale": "en-us",
      "outdated": false
    },
    {
      "id": 200730348,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/sections/200730348-FAQ.json",
      "html_url": "https://support.synchro.io/hc/en-us/sections/200730348-FAQ",
      "category_id": 200255388,
      "position": 2,
      "sorting": "manual",
      "created_at": "2015-04-02T22:35:14Z",
      "updated_at": "2016-09-09T11:26:21Z",
      "name": "FAQ",
      "description": "",
      "locale": "en-us",
      "source_locale": "en-us",
      "outdated": false
    },
    {
      "id": 204233727,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/sections/204233727-Tutorial.json",
      "html_url": "https://support.synchro.io/hc/en-us/sections/204233727-Tutorial",
      "category_id": 200270167,
      "position": 0,
      "sorting": "manual",
      "created_at": "2016-05-17T17:53:52Z",
      "updated_at": "2016-06-03T17:12:19Z",
      "name": "Tutorial",
      "description": "A series of help topics that will take you through Synchro concepts incrementally, shown mostly through code.",
      "locale": "en-us",
      "source_locale": "en-us",
      "outdated": false
    },
    {
      "id": 200810808,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/sections/200810808-General.json",
      "html_url": "https://support.synchro.io/hc/en-us/sections/200810808-General",
      "category_id": 200270167,
      "position": 1,
      "sorting": "manual",
      "created_at": "2015-04-27T22:05:08Z",
      "updated_at": "2016-07-01T02:20:59Z",
      "name": "General",
      "description": "",
      "locale": "en-us",
      "source_locale": "en-us",
      "outdated": false
    },
    {
      "id": 200768748,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/sections/200768748-Controls.json",
      "html_url": "https://support.synchro.io/hc/en-us/sections/200768748-Controls",
      "category_id": 200270167,
      "position": 2,
      "sorting": "manual",
      "created_at": "2015-04-15T07:01:36Z",
      "updated_at": "2016-06-03T17:20:26Z",
      "name": "Controls",
      "description": "",
      "locale": "en-us",
      "source_locale": "en-us",
      "outdated": false
    },
    {
      "id": 203447908,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/sections/203447908-Samples.json",
      "html_url": "https://support.synchro.io/hc/en-us/sections/203447908-Samples",
      "category_id": 200270167,
      "position": 3,
      "sorting": "manual",
      "created_at": "2015-12-05T09:27:41Z",
      "updated_at": "2016-06-03T17:08:56Z",
      "name": "Samples",
      "description": "",
      "locale": "en-us",
      "source_locale": "en-us",
      "outdated": false
    }
  ],
  "articles": [
    {
      "id": 205315138,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205315138-Welcome-to-Synchro-.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205315138-Welcome-to-Synchro-",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 0,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200730338,
      "created_at": "2015-05-13T01:41:51Z",
      "updated_at": "2016-05-21T05:55:56Z",
      "name": "Welcome to Synchro!",
      "title": "Welcome to Synchro!",
      "body": "<p>The Synchro platform is now available.  You can download and install the Synchro server and use it to build apps.  You can also download the Synchro Explorer client on iOS, Android, Windows, and Windows Phone from the respective app stores to test your apps.  And you can serve Synchro apps as web apps, optimized for mobile and desktop browsers, either from Synchro server or from your own web app infrastructure.</p>\r\n<p>The <strong>Synchro App Builder</strong>, used to create custom mobile clients that you can distribute to end users, is currently in pre-release testing. If you would like a custom native mobile client for your Synchro app before the Synchro App Builder is made available to the public, please open a support ticket and we will assist you.</p>\r\n<p>The best way to get started writing Synchro apps is probably to go through our <a href=\"/hc/en-us/sections/204233727\">step-by-step Tutorial</a>.</p>\r\n<p>In addition, we would love to hear about the projects where you want to use Synchro, and we'll help out however we can.  Feel free to open a ticket for that too, or just to say hello!</p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200255388-general/200730338-announcements/205315138-welcome-to-synchro/index.html"
    },
    {
      "id": 205425607,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205425607-Introduction-to-Synchro.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205425607-Introduction-to-Synchro",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 0,
      "vote_sum": -1,
      "vote_count": 1,
      "section_id": 200730348,
      "created_at": "2015-04-15T06:59:58Z",
      "updated_at": "2015-12-05T09:26:05Z",
      "name": "Introduction to Synchro",
      "title": "Introduction to Synchro",
      "body": "<div>\r\n<h2>What is Synchro?</h2>\r\n<p class=\"lead wysiwyg-text-align-left\">Synchro allows you to create feature-rich, robust, and secure cross-platform mobile apps that look and feel native on mobile devices, but run on the server, and are updateble in real-time. And it allows you to do this in a fraction of the amount of code required by other mobile application development platforms.</p>\r\n<p class=\"lead wysiwyg-text-align-center\"><img class=\"wysiwyg-text-align-center\" src=\"https://synchro.io/images/users.png\" alt=\"\" /></p>\r\n<p class=\"lead\">To the user a Synchro-built app presents as a no-compromise native mobile app, and to developers and administrators it presents as a web app. It's really the best of both worlds.</p>\r\n<p class=\"lead wysiwyg-text-align-center\"> </p>\r\n<h2>How Do We Do It?</h2>\r\n<p class=\"lead\">The short answer is that we do this by rendering your mobile client user interface on the mobile device, but running all of your mobile client code, including user interaction logic, on the server. You provide a small amount of platform-neutral UX code that we run on the server, and the Synchro platform provides the native mobile code and server framework to make it all work.</p>\r\n</div>\r\n<h2>The Longer Version...</h2>\r\n<p>The long answer is, well, longer. In order to run the client logic on the server, but still render native, responsive applications on mobile devices, we need a strong separation between the client view and the client application logic (since they're running on different devices). We were inspired by contemporary data binding techniques and the MVVM (Model-View-ViewModel) design pattern. We particularly liked <a href=\"http://www.mvvmlight.net/\">MVVM Light</a> in the DotNet world and <a href=\"http://knockoutjs.com/\">Knockout.js</a> in the JavaScript world as examples of cleanly separating presentation from data and interaction.</p>\r\n<p>In this pattern, each page or screen is represented by a <strong>View</strong> that defines the presentation of the user interface, including controls and their layout, and a <strong>ViewModel</strong> that contains the data represented in the View, as well as commands to process user interactions with the View. The View definition also contains declarative bindings that describe the relationship between the View and the ViewModel (for example, which ViewModel elements are used to populate which View controls, and which ViewModel commands are launched when users interact with various controls in different ways, etc).</p>\r\n<p>These declarative bindings allow us to fully automate the View, meaning that there is no need for you to write any procedural code to get or set View contents or state, and this is what allows us to render and run the View on the other site of a network connection from the ViewModel. Also, unlike many other MVVM or similar systems, we don't require you to do anything in your ViewModel implementation to make this happen (you don't have to notify anyone when you make a data change, and you don't have to tell us which data elements we need to observe - we just figure it out and handle it automatically).</p>\r\n<div class=\"lead wysiwyg-text-align-center\"><img class=\"wysiwyg-text-align-center\" src=\"https://synchro.io/images/synchro-mvvm.png\" alt=\"\" /></div>\r\n<p class=\"wysiwyg-text-align-center\"> </p>\r\n<p>The diagram above shows how we implement our client-server MVVM solution. Your Synchro app will consist of a View and ViewModel implementation on the server. The Synchro platform provides the native mobile client apps and the server infrastructure to make the magic happen.</p>\r\n<p> </p>\r\n<h2>Why Should You Care?</h2>\r\n<p><br /><img src=\"https://synchro.io/icons/cross-platform.png\" alt=\"\" /></p>\r\n<h3>Cross Platform</h3>\r\n<p>The code that runs on the mobile client is created and provided by us, and is not specific to your application. We offer that code, packaged for you, linked to your server endpoint, and branded as your app, on Android, iOS, Windows, and Windows Phone platforms via the <strong>Synchro App Builder</strong>. Your code runs on the server and is the same regardless of the client OS your user is running. You do have the ability to tweak and tune your app based on the mobile client OS (or other device metrics), but that's usually not necessary.</p>\r\n<div class=\"lead wysiwyg-text-align-center\"><img class=\"wysiwyg-text-align-center\" src=\"https://synchro.io/images/platforms.jpg\" alt=\"\" /></div>\r\n<p><br /><img src=\"https://synchro.io/icons/code.png\" alt=\"\" /></p>\r\n<h3>Less Code</h3>\r\n<p>We were frustrated in our own efforts writing enterprise mobile clients by the amount of code required that was not core to the focus of the application. Most of this code fell into one of two categories: UX babysitting (setting up the UX and populating it, writing various handlers, notifiers, etc), and the client side of network client-server functions (typically talking to our own servers, usually via a REST API or some third-party tool that was supposed to make it easier). In Synchro, we have dramatically reduced, and in many cases completely elimiated, the code required in both of those categories.</p>\r\n<p>In one popular cross platform benchmark, the <a href=\"http://propertycross.com/\">PropertyCross</a> application, the Synchro implementation was done in 1/20th the amount of code of the native implementation, 1/10th the amount of code of the Xamarin implementation, and 1/4 the amout of code of the Appcelerator Titanium implementation. And our version stands up to all of them in terms of native look-and-feel, functionality, and responsiveness.</p>\r\n<div class=\"lead wysiwyg-text-align-center\"><img class=\"wysiwyg-text-align-center\" src=\"https://synchro.io/images/loc.png\" alt=\"\" /></div>\r\n<p>The Synchro implementation of PropertyCross is 242 lines of code, and that includes the view templates that define the page layouts. Another Synchro app, <strong>Synchro Civics</strong>, was implemented in under 200 lines of code. To install <strong>Synchro Civics</strong> on your mobile device and see what can be done in 200 lines of code, see <a href=\"https://synchro.io/getstarted\">Get Started</a>.</p>\r\n<p> </p>\r\n<p><img src=\"https://synchro.io/icons/client-server.png\" alt=\"\" /></p>\r\n<h3>Massively Streamlined Client-Server Development</h3>\r\n<p>Most enterprise mobile applications are client-server applications that revolve around the mobile client application interacting with one or more existing enterprise resources (services, data sources, etc). Implementing the client side of these interactions introduces many challenges, including authentication, access-control, connection/network management, state management, caching, and more.</p>\r\n<p>Consider a simple example: You have customer data stored in a SQL database, and the mobile application needs to be able to search that database and display that customer data. If you implement something like this as a web app, your web app will simply authenticate to the database (as an application), perform a query, and populate the response with the data. But you can't very well let a mobile app talk directly to a SQL database for a number of reasons. You can't distribute application-level access credentials to the mobile app (that it stores and uses for access). Since the mobile app has its own release schedule, you can't have it rely on a specific database schema. For these and other reasons, you will typically end up building some kind of front-end to the database for your mobile app to use (either building a custom REST API, or perhaps by using some third-party tool to help). And that creates its own set of issues, including per-user access control, API versioning, network/connection management, etc.</p>\r\n<p>With Synchro, because your mobile client application logic is running in a server environment, much like a web application, that code can talk directly to your enterprise resources without that extra layer of client-server logic. Your mobile app code will look a lot more like the clean, simple web app version of that application.</p>\r\n<p><br /><img src=\"https://synchro.io/icons/security.png\" alt=\"\" /></p>\r\n<h3>Provable Security</h3>\r\n<p>In the Synchro model, the mobile client communicates with a single Synchro endpoint over a secure connection (in fact, the mobile client device cannot communicate with any other server or network endpoint). Other than a session token, the mobile client does not maintain any local state (no local data storage, no cached data, etc). None of your data is exposed on device storage or over the connection. And since Synchro apps are running on the server, you can monitor usage and even revoke the ability for any or all users to access the application, in real time.</p>\r\n<p><br /><img src=\"https://synchro.io/icons/node.png\" alt=\"\" /></p>\r\n<h3>Enterprise-friendly Platform</h3>\r\n<p>The server side of Synchro is implemented in <a href=\"https://nodejs.org/\">Node.js</a>, which is widely used in the enterprise. Node.js is a mature, well-supported platform with the ability to connect to just about anything. Your Synchro apps will run under Node.js and be implemented in JavaScript. If you know and/or love Node.js or JavaScript, then you are going to love Synchro as a mobile app solution. If you don't know anything about Node.js, you can still be up and running very quickly (and you'll learn to love it - trust us).</p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200255388-general/200730348-faq/205425607-introduction-to-synchro/index.html"
    },
    {
      "id": 215191478,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/215191478-Won-t-Synchro-be-slow-running-from-the-cloud-.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/215191478-Won-t-Synchro-be-slow-running-from-the-cloud-",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 1,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200730348,
      "created_at": "2015-12-18T20:25:08Z",
      "updated_at": "2015-12-18T20:25:56Z",
      "name": "Won't Synchro be slow running from the cloud?",
      "title": "Won't Synchro be slow running from the cloud?",
      "body": "<div><span class=\"wysiwyg-font-size-large\">Will my Synchro app be really slow if it’s running in the cloud?  What if I’m connected over a cellular data connection, won't that be a problem?</span></div>\r\n<div> </div>\r\n<div><span class=\"wysiwyg-font-size-x-large\">Short Answer: No</span></div>\r\n<div> </div>\r\n<div>Our goal from the very beginning with Synchro was to have great performance, ideally indistinguishable from native local apps, even over cellular data connections.  This was one of the biggest design challenges that we faced, and the constraints that it implied influenced our entire architecture.  Separating the client view from the application logic over the Internet is only a good idea if you can do it FAST.</div>\r\n<div> </div>\r\n<div>We believe the we’ve shown that Synchro apps are actually very responsive, even over slower connections.  You can try our various sample apps and see for yourself.</div>\r\n<div> </div>\r\n<div><span class=\"wysiwyg-font-size-x-large\">Need to be convinced with gory details?  Read on.</span></div>\r\n<div> </div>\r\n<div>We spent a lot of time doing tests on user expectations regarding response time.  We studied how long we can take to load a page/view before the user perceives a delay, and how long after the user takes an action we have to reflect that action in the UX, among other scenarios.  The result of this testing was that we determined that we had a budget of about 250ms from user action to that action being reflected on screen (whether that action was a new page/view or an update to an existing page/view).</div>\r\n<div> </div>\r\n<div>Each transaction between the Synchro client and the Synchro app server is conducted over an HTTP connection (typically).  The factors influencing the performance of a transaction include network latency, network throughout, session management, request processing overhead, and the time spent by the application code itself.</div>\r\n<div> </div>\r\n<div>Network latency is one of the largest factors impacting the transaction time.  In WIFI environments, the network latency is typically very low.  On cellular networks, contemporary platforms (LTE) typically have latency in the 75ms range, and with older platforms (3G, 4G) there can be as much as 100-125ms of latency.  We have studied the latency of different cellular network technologies and providers, and we’ve seen the direction that cellular latency is going.  We expect to see these latencies continue to drop significantly over the near term. </div>\r\n<div> </div>\r\n<div>Network throughput can be a significant constraint for applications that send a lot of data.  We have done our best to minimize the impact of network throughput by being very concise in what we send and receive.  Our data volumes are significantly less than a web app, for example, as we send a very concise (abstract) description of the view, along with the data to populate it, and we let the native client application do most of the work of making it look right (and we also aren’t sending any stylesheets or JavaScript files in addition to the main page/view description like a web app would).</div>\r\n<div> </div>\r\n<div>We are also very conservative in the data that goes back and forth after the initial page load.  First, we only ever send differences to the view model in either direction.  Second, we only send view model changes to the server when they are needed by server application logic (we use a technique called “dynamic local binding” that lets us update the client UX based on client interactions that update the view model without sending those view model updates back to the server unless/until they are needed).</div>\r\n<div> </div>\r\n<div>Session management is something that can easily chew up 100ms per transaction if it is not managed well.  Synchro has a variety of supported session manager backends, but our favorite for production systems is Redis.  On our production system running on Microsoft Azure, we have a managed Redis server located in the same datacenter as our API server, and we see latency of 2-3ms for a session read, and 10-12ms for a session write (a typical transaction will include one read and one write).</div>\r\n<div> </div>\r\n<div>When looking at all of these factors, we have about 50ms left for your Synchro logic to execute per transaction and still stay safely within our 250ms budget.  That is plenty of time to execute synchronous application logic.  If your application logic is asynchronous or long-running, we have support in our framework for you to do those things without blocking the UX.</div>\r\n<div> </div>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200255388-general/200730348-faq/215191478-wont-synchro-be-slow-running-from-the-cloud/index.html"
    },
    {
      "id": 215862927,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/215862927-How-do-Synchro-apps-work-when-offline-disconnected-.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/215862927-How-do-Synchro-apps-work-when-offline-disconnected-",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 2,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200730348,
      "created_at": "2015-12-18T20:29:45Z",
      "updated_at": "2015-12-18T20:29:45Z",
      "name": "How do Synchro apps work when offline/disconnected?",
      "title": "How do Synchro apps work when offline/disconnected?",
      "body": "<div>We get this question a lot.</div>\r\n<div> </div>\r\n<div>The short answer is that Synchro apps don’t work offline or disconnected.  Your app built with Synchro will need to be connected to your server in order to function.</div>\r\n<div> </div>\r\n<div>The first point we always make is that we live in a connected world.  The mobile devices that your users will use to access your apps are going to be connected a very high percentage of the time, and Synchro is designed to perform well even over cellular data connections.</div>\r\n<div> </div>\r\n<div>Most of the time when we discuss the kinds of apps that a prospect is considering implementing in Synchro, we find that they are apps that don’t really make sense offline.  The line-of-business/enterprise solutions that are really Synchro’s sweet spot are usually already available via an intranet app, or sometimes even as a server app accessed via a terminal emulator.  And none of that works offline, nor is there any real user expectation that these apps should work offline.</div>\r\n<div> </div>\r\n<div>When discussing offline scenarios, it is important to understand that making portions of your app work offline is going to create significant complexity in design, implementation, and maintenance, regardless of the development platform that you choose.  While there are some very specific use cases where the offline function of an enterprise app justifies the expense, it is most often the that when the time comes to actually implement the app, these offline features are the first to get thrown out.</div>\r\n<div> </div>\r\n<div>Would it be nice to be able to fill out a time sheet, or open an IT request, when you are offline?  Sure.  But you also have to ask whether your users have an expectation of being able to do those things offline, and how much incremental budget (of time and resources) you are willing to commit to achieve that functionality.</div>\r\n<div> </div>\r\n<div>Consider everything that users can do with a browser over the Internet, and what your users can do on your intranet.  All of that is connected-only.  If you want to mobilize any of that using Synchro, you’ll be fine.</div>\r\n<div> </div>\r\n<div>All of that being said, if you must have offline, then you can’t use Synchro :(</div>\r\n<div> </div>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200255388-general/200730348-faq/215862927-how-do-synchro-apps-work-when-offlinedisconnected/index.html"
    },
    {
      "id": 215871247,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/215871247-How-does-Synchro-compare-to-React-Native-.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/215871247-How-does-Synchro-compare-to-React-Native-",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 3,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200730348,
      "created_at": "2015-12-21T00:48:48Z",
      "updated_at": "2015-12-21T00:53:22Z",
      "name": "How does Synchro compare to React Native?",
      "title": "How does Synchro compare to React Native?",
      "body": "<div>We often get questions about how Synchro compares to other mobile app development platforms, including Cordova, Xamarin, Appcelerator, and others.  Lately, the most common question we get in this category has to do with React Native, in large part because we’re a Node.js solution and React Native is getting better known in the Node community. </div>\r\n<div> </div>\r\n<div>React Native is a cross platform development environment that uses declarative user interface descriptions to render native controls and themes, with app code written in JavaScript.  And React Native uses Node.js.  On the surface, that sounds a lot like Synchro.  When you dig a little deeper, not so much.</div>\r\n<div> </div>\r\n<div><span class=\"wysiwyg-font-size-large\">Build Better Apps, Faster</span></div>\r\n<div> </div>\r\n<div>The biggest difference between React Native (and most other mobile app platforms) and Synchro is that Synchro apps run on the server.  If you are an enterprise developer, this is a pretty big deal.  Your Synchro apps will be running inside of your secure server environment, right next to your APIs, databases, and other resources.  So instead of writing client-server apps, where you have to build APIs for your clients to talk to, then build the clients themselves, you’re just writing an app on the server (that happens to render on a mobile device).  This architecture results in apps that are smaller, tighter, and better integrated with the services they use, are quicker and easier to create, are secure, and are easier to deploy and manage.</div>\r\n<div> </div>\r\n<div>With Synchro apps, the part of the solution that runs on the mobile device can be considered a very thin client, not unlike, say, a terminal emulator.  While Synchro apps render their user interface using native themes and controls and can present interfaces that are very responsive and dynamic, they are fundamentally just presenting a view of an application which is itself running on the server.  None of your application code ever runs on the client.</div>\r\n<div> </div>\r\n<div>When you use a platform like React Native to write the client part of a client-server application, you take on a whole host of responsibilities of being a client.  You have to manage application lifecycle, persistence of state, communications, etc.  You have to figure out how you’re going to authenticate to the services you use, and how you’re going to persist that authentication state between calls to the service and between session of your app, and do that all securely.  You have to figure out how you’re going to handle failures in talking to services, how you’re going to manage timeouts and retries, and what the user is going to see in all of these cases.  In short, you have to deal with all of the complexities that arise from the fact that your app is on the other side of the Internet from where the underlying services live.</div>\r\n<div> </div>\r\n<div>When you look at code examples of client-server apps, you will typically see a simple client that talks to some REST API endpoint.  And you can certainly compare these kinds of solutions against each other to see how much work it is to make a good looking, responsive app that talks to that endpoint (we’re as guilty of doing this as everyone else).  But for an enterprise app where your organization is providing the client, the server resources, and the API that sits between them, Synchro offers a great opportunity to massively integrate and streamline the overall solution (eliminating the client, and even the API if desired).  No amount of client-side app development magic is going to allow you to approach the kind of streamlining that Synchro can offer.</div>\r\n<div> </div>\r\n<div>While we are impressed by the concise expression of React Native applications (as compared to native solutions, and to other mobile app development platforms), we still think Synchro apps are simpler, more clear, and more concise.  At Synchro we hate code that doesn’t carry its own weight.  We hate boilerplate code.  We hate code that’s doing a job that could be done by metadata.  We look at every line of code in every app we create on our platform as ask if that line of code really needs to be there, and if there isn’t some way the platform could understand what we’re doing and take care of that for us.  Through a lot of refinement, we think we’ve arrived at a solution that is both concise and clear; that’s easy to understand and easy to create.</div>\r\n<div> </div>\r\n<div>Following is the React Native sample “Movies” app from the <a href=\"https://facebook.github.io/react-native/docs/tutorial.html\">React Native tutorial</a>: </div>\r\n<div> </div>\r\n<div>\r\n<pre><code>/**\r\n * Sample React Native App\r\n * https://github.com/facebook/react-native\r\n */\r\n'use strict';\r\n\r\nvar React = require('react-native');\r\nvar {\r\n  AppRegistry,\r\n  Image,\r\n  ListView,\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n} = React;\r\n\r\nvar API_KEY = '7waqfqbprs7pajbz28mqf6vz';\r\nvar API_URL = 'http://api.rottentomatoes.com/api/public/v1.0/lists/movies/in_theaters.json';\r\nvar PAGE_SIZE = 25;\r\nvar PARAMS = '?apikey=' + API_KEY + '&amp;page_limit=' + PAGE_SIZE;\r\nvar REQUEST_URL = API_URL + PARAMS;\r\n\r\nvar AwesomeProject = React.createClass({\r\n  getInitialState: function() {\r\n    return {\r\n      dataSource: new ListView.DataSource({\r\n        rowHasChanged: (row1, row2) =&gt; row1 !== row2,\r\n      }),\r\n      loaded: false,\r\n    };\r\n  },\r\n\r\n  componentDidMount: function() {\r\n    this.fetchData();\r\n  },\r\n\r\n  fetchData: function() {\r\n    fetch(REQUEST_URL)\r\n      .then((response) =&gt; response.json())\r\n      .then((responseData) =&gt; {\r\n        this.setState({\r\n          dataSource: this.state.dataSource.cloneWithRows(responseData.movies),\r\n          loaded: true,\r\n        });\r\n      })\r\n      .done();\r\n  },\r\n\r\n  render: function() {\r\n    if (!this.state.loaded) {\r\n      return this.renderLoadingView();\r\n    }\r\n\r\n    return (\r\n      &lt;ListView\r\n        dataSource={this.state.dataSource}\r\n        renderRow={this.renderMovie}\r\n        style={styles.listView}\r\n      /&gt;\r\n    );\r\n  },\r\n\r\n  renderLoadingView: function() {\r\n    return (\r\n      &lt;View style={styles.container}&gt;\r\n        &lt;Text&gt;\r\n          Loading movies...\r\n        &lt;/Text&gt;\r\n      &lt;/View&gt;\r\n    );\r\n  },\r\n\r\n  renderMovie: function(movie) {\r\n    return (\r\n      &lt;View style={styles.container}&gt;\r\n        &lt;Image\r\n          source={{uri: movie.posters.thumbnail}}\r\n          style={styles.thumbnail}\r\n        /&lt;\r\n        &lt;View style={styles.rightContainer}&gt;\r\n          &lt;Text style={styles.title}&gt;{movie.title}&lt;/Text&gt;\r\n          &lt;Text style={styles.year}&gt;{movie.year}&lt;/Text&gt;\r\n        &lt;/View&gt;\r\n      &lt;/View&gt;\r\n    );\r\n  },\r\n});\r\n\r\nvar styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#F5FCFF',\r\n  },\r\n  rightContainer: {\r\n    flex: 1,\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    marginBottom: 8,\r\n    textAlign: 'center',\r\n  },\r\n  year: {\r\n    textAlign: 'center',\r\n  },\r\n  thumbnail: {\r\n    width: 53,\r\n    height: 81,\r\n  },\r\n  listView: {\r\n    paddingTop: 20,\r\n    backgroundColor: '#F5FCFF',\r\n  },\r\n});\r\n\r\nAppRegistry.registerComponent('AwesomeProject', () =&gt; AwesomeProject);</code></pre>\r\n</div>\r\n<div> </div>\r\n<div>And here is a version of the same app implemented in Synchro: </div>\r\n<div> </div>\r\n<div>\r\n<pre><code>// React Movies sample app implementation\r\n// https://facebook.github.io/react-native/docs/tutorial.html\r\n//\r\nvar request = require('request');\r\nvar REQUEST_URL = 'https://raw.githubusercontent.com/facebook/react-native/master/docs/MoviesExample.json';\r\n\r\nexports.View =\r\n{\r\n    title: \"Movies\",\r\n    elements:\r\n    [\r\n        { control: \"stackpanel\", orientation: \"Vertical\", width: \"*\", height: \"*\", contents: [\r\n            { control: \"text\", value: \"Loading movies...\", fontsize: 10, visibility: \"{!responseData.movies}\" },\r\n            { control: \"listview\", select: \"None\", height: \"*\", width: \"*\", margin: 0, binding: \"responseData.movies\", itemTemplate:\r\n                { control: \"stackpanel\", orientation: \"Horizontal\", width: \"*\", margin: 0, contents: [\r\n                    { control: \"image\", resource: \"{posters.thumbnail}\", height: 100, width: 75 },\r\n                    { control: \"stackpanel\", orientation: \"Vertical\", width: \"*\", contents: [\r\n                        { control: \"text\", value: \"{title}\", width: \"*\", font: { bold: true, size: 8 } },\r\n                        { control: \"text\", value: \"{year}\", width: \"*\", fontsize: 7 },\r\n                    ]}\r\n                ]}\r\n            }\r\n        ]}\r\n    ]\r\n}\r\n\r\nexports.InitializeViewModel = function(context, session)\r\n{\r\n    return { responseData: null };\r\n}\r\n\r\nexports.LoadViewModel = function(context, session, viewModel)\r\n{\r\n    viewModel.responseData = JSON.parse(Synchro.waitFor(context, request, { url: REQUEST_URL }).body);\r\n}</code></pre>\r\n</div>\r\n<div> </div>\r\n<div>You may notice that the Synchro version of the app does not use “styles” in the same way as the React Native version.  We do support styles in Synchro, though we do not force you to use them (any attribute can be specified explicitly on a control, or it can be defined in a style linked to the control).  We generally advocate using styles when the goal is to share styles between controls (for app-wide styling and/or platform-specific styling).</div>\r\n<div> </div>\r\n<div>If you really wanted to break out every attribute into styles using Synchro (as in React Native) you could do so as follows:</div>\r\n<div> </div>\r\n<div>\r\n<pre><code>// React Movies sample app implementation (using styles)\r\n// https://facebook.github.io/react-native/docs/tutorial.html\r\n//\r\nvar request = require('request');\r\nvar REQUEST_URL = 'https://raw.githubusercontent.com/facebook/react-native/master/docs/MoviesExample.json';\r\n\r\nexports.View =\r\n{\r\n    title: \"Movies\",\r\n    elements:\r\n    [\r\n        { control: \"stackpanel\", style: \"container\", contents: [\r\n            { control: \"text\", style: \"loading\", visibility: \"{!responseData.movies}\" },\r\n            { control: \"listview\", style: \"listView\", binding: \"responseData.movies\", itemTemplate:\r\n                { control: \"stackpanel\", style: \"listItem\", contents: [\r\n                    { control: \"image\", style: \"thumbnail\", resource: \"{posters.thumbnail}\" },\r\n                    { control: \"stackpanel\", style: \"rightContainer\", contents: [\r\n                        { control: \"text\", style: \"title\", value: \"{title}\" },\r\n                        { control: \"text\", style: \"year\", value: \"{year}\" },\r\n                    ]}\r\n                ]}\r\n            }\r\n        ]}\r\n    ]\r\n}\r\n\r\nexports.InitializeViewModel = function(context, session)\r\n{\r\n    var viewModel =\r\n    {\r\n        /* Styles */\r\n        container: { orientation: \"Vertical\", width: \"*\", height: \"*\" },\r\n        loading: { value: \"Loading movies...\", fonsize: 10 },\r\n        listView: { select: \"None\", height: \"*\", width: \"*\", margin: 0 },\r\n        listItem: { orientation: \"Horizontal\", width: \"*\", margin: 0 },\r\n        thumbnail: { height: 100, width: 75 },\r\n        rightContainer: { orientation: \"Vertical\", width: \"*\" },\r\n        title: { font: { bold: true, size: 8 }, width: \"*\" },\r\n        year: { fontsize: 7, width: \"*\" },\r\n        /* Data */\r\n        responseData: null,\r\n    }\r\n    return viewModel;\r\n}\r\n\r\nexports.LoadViewModel = function(context, session, viewModel)\r\n{\r\n    viewModel.responseData = JSON.parse(Synchro.waitFor(context, request, { url: REQUEST_URL }).body);\r\n}</code></pre>\r\n</div>\r\n<div> </div>\r\n<div><span class=\"wysiwyg-font-size-large\">Native Apps on Every OS</span></div>\r\n<div> </div>\r\n<div>Synchro and React Native have similar approaches to building native interfaces using native themes and controls, driven by a declarative description of the user interface.  But there are some differences worth noting in how the technologies relate to the native platforms. </div>\r\n<div> </div>\r\n<div>React Native supports iOS and Android.  Synchro supports those platforms, as well as Windows and Windows Phone.  While the demand for native Windows Phone apps may not be strong enough to warrant support by many development platforms, we feel that in an enterprise BYOD environment supporting Windows and Windows Phone is important.  This is particularly true regarding tablet deployments where the Windows OS is more prevalent (including the Microsoft Surface and Surface Book, as well as many third party Windows tablets or convertibles).</div>\r\n<div> </div>\r\n<div>React Native takes pride in saying that they are not “Write Once, Run Everywhere”, but rather “Learn Once, Write Everywhere”.  Their focus is on building very tuned, native apps for each platform (they even talk about how easy it is to “port” from one platform to another).  Synchro takes the opposite approach.  We believe that it is important to be able to get your app up and running as quickly as possible on all platforms.  When you deploy your Synchro app, it works immediately on all platforms from one codebase.  If you then want to tune and tweak the app to make it look and feel more native, we give you access to the platform specific controls you need, as well as view filtering support that make it easy for you to support highly tuned native apps on every platform from a single codebase. </div>\r\n<div> </div>\r\n<div>With React Native, your application code is written in JavaScript and executed on the mobile device.  The React Native team had to create some pretty impressive technology to actually make running JavaScript on native mobile environments workable and keep the apps responsive (including techniques to get your code off of the main thread).  With Synchro, all of the code running on the mobile client is native code (that we provide), and that code uses native platform-appropriate mechanisms to keep the user interface responsive (including using background threads for IO, decoding, etc).  The difference is that with Synchro, a) it’s native code, and b ) you didn’t have to write it.  While React Native does provide more functionality and flexibility for your client code to interact with the native environment, you should consider that if Synchro does what you need, the Synchro version is going to be more native and more performant (and done for you automatically).</div>\r\n<div> </div>\r\n<div><span class=\"wysiwyg-font-size-large\">Deploy Updates Instantly</span></div>\r\n<div> </div>\r\n<div>The most exciting feature of React Native is probably live code reloading.  Being able to make a code change and see it reflected live, instantly, on a mobile device is pretty awesome.  But unfortunately React Native apps don’t update that way in production.  When you build a React Native app, it packages all of your code into an app bundle that itself gets packaged into your binary app that you put in the store.</div>\r\n<div> </div>\r\n<div>But since React Native app views are generated from code, and since code can be downloaded, it stands to reason that you could have a dynamically updated app (where you can push new code without having to redistribute the app through the app store).</div>\r\n<div> </div>\r\n<div>People have <a href=\"https://medium.com/ios-os-x-development/so-you-want-to-dynamically-update-your-react-native-app-d1d88bf11ede#.drk80ut64\">explored techniques</a> for doing this.  And there are even services under development that manage this for you (for both React Native and Cordova), such as <a href=\"http://microsoft.github.io/code-push\">Code Push</a>.</div>\r\n<div> </div>\r\n<div>The typical approach is to have your app download a new app bundle to the local device and then run that app bundle.  Depending on a number of factors, that download could take some time.  So do you make your users wait to download the update, or do you let them run the old code while downloading the update?  If you choose the latter, that means you might have some users running the old code and other users running the new code, which could introduce issues if you are changing the client to correspond to changes in the back end, as just one example.</div>\r\n<div> </div>\r\n<div>Can dynamic updating of your deployed React Native app be done?  Sure.  Is if free and easy and secure and baked-in?  Not really.  It’s still something you’re going to have to think about and manage.</div>\r\n<div> </div>\r\n<div>With Synchro, being able to deploy updates to your entire installed base, simultaneously and instantly, was one of our core principles from the outset.  And with Synchro you can do these deployments in a number of ways, including using our Synchro Studio (typically for local development, and test/staging deployments), publishing from your version control system, or any other mechanism that you use for configuration control of Node.js or other cloud services.</div>\r\n<div> </div>\r\n<div>In summary, React Native apps can be updated dynamically with some effort on your part.  But with Synchro it’s not some homework assignment that you have to go figure out.  It’s something that’s core to our platform, and that we think a lot about and try to make easy for you.</div>\r\n<div> </div>\r\n<div><span class=\"wysiwyg-font-size-large\">Provable Security</span></div>\r\n<div> </div>\r\n<div>React Native is a tool for building client applications that run on mobile devices, and it is subject to the same security concerns as other similar development platforms (including native development environments).   It is very easy to make a mistake in mobile client code and inadvertently create an attack vector.  Someone could forget to use the https URI scheme and end up transferring your application data in the clear.  Someone could use the https scheme, but not understand that additional work was required to validate the server certificate when establishing a connection (maybe assuming that the underlying network library was doing that), and make your app subject to a DNS hijacking / man-in-the-middle attack.  Someone could get some highly sensitive data from a REST API not realizing that the networking library also wrote it to a cache on the device, thus exposing another attack vector.  There are endless examples of these kinds of simple, hard to find, mistakes.  With React Native, as with almost any mobile client platform, your application security is equal to your ability to catch the subtle mistakes made by your worst developer on their worst day.  If your app is primarily about hosting cat videos and showing ads, then this is probably not going to keep you up at night.  If your app is running your enterprise, then it probably should. </div>\r\n<div> </div>\r\n<div>One area that should cause increased security concern is the fact that React Native is designed to support highly modular, distributed development.  The example of the “like” button being a modular feature with its own developer, where that control manages its own state, handles talking to the network to perform its function, etc., is a good illustration of where React Native shines, and of best practices for using React Native.  The fact that Facebook likes to brag about a new developer being able to drop a feature into a very complex app on their first day is really exciting from a productivity standpoint, while at the same time being absolutely horrifying from a security standpoint.  Again, it depends on what your app does, and how important security is to you, but if security is important, you should seriously consider how the development environment and best practices contribute to your app’s attack surface.</div>\r\n<div> </div>\r\n<div>With Synchro, we address the concept of client security as one of our founding design principles.  Our position is that because the interaction of our native client with the network and local storage is centralized, we can say with some confidence that that code is secure (we know that it can only ever talk to a single network endpoint, your app endpoint, and that it will only do so securely, for example).  Most importantly, since none of your app code ever runs on the device, it is impossible for you to introduce an attack vector on the client.  That’s what we mean when we say that Synchro client apps are “provably secure”, as opposed to other development platforms where the best you can hope for if you are very skilled and very careful is “probably secure”.</div>\r\n<div> </div>\r\n<div>You do have to secure the Synchro Server, but that is a challenge with which Node.js developers should already be familiar.  You are likely already running and securing web sites or mobile app API endpoints, and securing your Synchro server should look a lot like securing those services.</div>\r\n<div> </div>\r\n<div><span class=\"wysiwyg-font-size-large\">Built with Node.js</span></div>\r\n<div> </div>\r\n<div>React Native is installed using NPM and uses Node.js to build your JavaScript code.  It also runs a Node server during debugging to enable live code reloading.  And the apps that you build with React Native can even use some Node modules.  That all sounds pretty Node friendly.  But, while React Native does use a Node-like module loader for your apps, it does not run your apps in a Node.js environment.  This means that you can only use Node modules implemented in pure JavaScript and that do not rely on a Node environment.  Many Node modules that you’re probably used to using in your server apps are not going to run in a React Native environment.  This includes core modules like “request” and “bcrypt”, among many others, and means that no modules with this type of module anywhere in their dependency tree are going to work in React Native apps.</div>\r\n<div> </div>\r\n<div>By contrast, your apps running under Synchro have access to a full Node.js environment, and your Synchro apps can use any Node package, including those with native code or that require a Node environment.</div>\r\n<div> </div>\r\n<div><span class=\"wysiwyg-font-size-large\">Summary</span></div>\r\n<div> </div>\r\n<div>React Native is a very exciting platform, and it has a lot to offer, especially for Node.js developers.  But it also has a lot of the same limitations and constraints of other mobile app development platforms.  We at Synchro Labs feel that for the class of apps that can be implemented with our platform, we beat React Native, and every other platform, hands down.  If you’re an enterprise developer with a backlog of apps to mobilize, we can get you there faster and easier than any other solution.  And if you’re a Node developer, that’s even more true.</div>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200255388-general/200730348-faq/215871247-how-does-synchro-compare-to-react-native/index.html"
    },
    {
      "id": 204650298,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/204650298-Help-I-have-a-question-and-I-need-an-answer.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/204650298-Help-I-have-a-question-and-I-need-an-answer",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 4,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200730348,
      "created_at": "2015-04-02T22:35:15Z",
      "updated_at": "2016-03-07T16:09:48Z",
      "name": "Help, I have a question and I need an answer",
      "title": "Help, I have a question and I need an answer",
      "body": "<p>The Help Center search bar is your first step in finding an answer.  If you've tried that and didn't find an answer, go ahead and submit a support request using the \"Submit a request\" link on this (and every) page.</p>\r\n<p>Note that you will have to set up an account on Synchro.io and be signed in in order to submit a request.</p>\r\n<p>If your question really isn't addressed in our docs, we'll usually create a new knowledge base article that addresses your issue, then point you to it.</p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200255388-general/200730348-faq/204650298-help-i-have-a-question-and-i-need-an-answer/index.html"
    },
    {
      "id": 219088908,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/219088908-Getting-Started.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/219088908-Getting-Started",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 0,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 204233727,
      "created_at": "2016-05-17T17:56:49Z",
      "updated_at": "2016-05-21T08:27:51Z",
      "name": "Getting Started",
      "title": "Getting Started",
      "body": "<p>This tutorial will walk you through the core concepts of Synchro, demonstrating them one at at time, mostly in code.  Each step of the tutorial builds on the previous step, with the changes between steps highlighted.  And each step contains images that show you what the code is doing on screen.</p>\r\n<p>For an overview of Synchro and the design behind it, see our <a href=\"https://synchro.io/technology\">Technology</a> page.</p>\r\n<p>If you'd like to install your own Synchro Server and run the tutorial code, first follow the \"Test Drive\" instructions on our <a href=\"https://synchro.io/getstarted\">Get Started</a> page, then install the code from the <a href=\"https://github.com/SynchroLabs/SynchroTutorial\">Synchro Tutorial GitHub project</a>.</p>\r\n<p>If you would like to explore the tutorial app, but don't want to install it locally, you can either point Synchro Explorer (available in all app stores) at the endpoint <strong>api.synchro.io/api/tutorial</strong> for a native experience, or go the web version of the app hosted at <a href=\"https://api.synchro.io/app/tutorial\">https://api.synchro.io/app/tutorial</a> from a desktop or mobile browser.</p>\r\n<p>The Tutorials menu should look like this:</p>\r\n<p><img src=\"https://support.synchro.io/hc/en-us/article_attachments/207397027/Menu.png\" alt=\"\" /> </p>\r\n<p>Of course you are welcome to just browse the tutorial pages that follow without installing or running anything.</p>\r\n<p><strong>Get Started - <a href=\"/hc/en-us/articles/219089668\">Hello 1: Static View</a></strong></p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/204233727-tutorial/219088908-getting-started/index.html"
    },
    {
      "id": 219089668,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/219089668-Hello-1-Static-View.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/219089668-Hello-1-Static-View",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 1,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 204233727,
      "created_at": "2016-05-17T18:19:27Z",
      "updated_at": "2016-05-21T06:23:41Z",
      "name": "Hello 1: Static View",
      "title": "Hello 1: Static View",
      "body": "<p>The simplest possible Synchro app module does nothing more than serve a static View, as shown below.  The Synchro client app (native or web) will request a View from the Synchro Server, which will call the appropriate Synchro app module to provide the View object.  The client then renders the View as appropriate for the client environment, using native themes and controls.</p>\r\n<p>It is possible to provide detailed styling to View elements to override the native themes and native control style, but by default, the view will have a native look and feel.</p>\r\n<p>If you want to get an idea of the controls supported in Synchro Views, check out our <a href=\"/hc/en-us/sections/200768748-Controls\">Controls</a> documentation.</p>\r\n<p><strong>Module: hello1.js - <a href=\"https://github.com/SynchroLabs/SynchroTutorial/blob/master/hello1.js\">View on GitHub</a></strong></p>\r\n<pre><code>exports.View =\r\n{\r\n    title: \"Hello World 1\",\r\n    elements:\r\n    [\r\n        { control: \"text\", value: \"Hello World\" },\r\n    ]\r\n}\r\n</code></pre>\r\n<p>The View above would be rendered on native mobile clients like this: </p>\r\n<p><img src=\"https://support.synchro.io/hc/en-us/article_attachments/207362488/Hello1.png\" alt=\"\" /></p>\r\n<p><strong>Next - <a href=\"/hc/en-us/articles/219089688\">Hello 2: View populated from ViewModel</a> </strong></p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/204233727-tutorial/219089668-hello-1-static-view/index.html"
    },
    {
      "id": 219089688,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/219089688-Hello-2-View-populated-from-ViewModel.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/219089688-Hello-2-View-populated-from-ViewModel",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 2,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 204233727,
      "created_at": "2016-05-17T18:19:55Z",
      "updated_at": "2016-05-21T06:24:01Z",
      "name": "Hello 2: View populated from ViewModel",
      "title": "Hello 2: View populated from ViewModel",
      "body": "<p>Real-world Synchro app modules generally provide a ViewModel data object to back the View.  The View is populated from this ViewModel data object.</p>\r\n<p>The View and ViewModel are linked together using <a href=\"/hc/en-us/articles/205267778\">Data Binding</a>.</p>\r\n<p>The following code shows initialization of a simple ViewModel and shows a View populated from that ViewModel.</p>\r\n<p><strong>Module: hello2.js - <a href=\"https://github.com/SynchroLabs/SynchroTutorial/blob/master/hello2.js\">View on GitHub</a></strong></p>\r\n<pre><code><span class=\"mark\">exports.InitializeViewModel = function(context, session)\r\n{\r\n    return {\r\n        userName: \"Jane Smith\"\r\n    };\r\n}</span>\r\n\r\nexports.View = {\r\n    title: \"Hello World 2\",\r\n    elements: [\r\n        { control: \"text\", value: \"Hello <span class=\"mark\">{userName}</span>\" }\r\n    ]\r\n};\r\n</code></pre>\r\n<p>As you can see below, the View is showing the data from the ViewModel. </p>\r\n<p><img src=\"https://support.synchro.io/hc/en-us/article_attachments/207362628/Hello2.png\" alt=\"\" /></p>\r\n<p><strong>Next - <a href=\"/hc/en-us/articles/219542347\">Hello 3: View dynamically updated from ViewModel</a> </strong></p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/204233727-tutorial/219089688-hello-2-view-populated-from-viewmodel/index.html"
    },
    {
      "id": 219542347,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/219542347-Hello-3-View-dynamically-updated-from-ViewModel.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/219542347-Hello-3-View-dynamically-updated-from-ViewModel",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 3,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 204233727,
      "created_at": "2016-05-17T18:20:19Z",
      "updated_at": "2016-05-19T06:55:34Z",
      "name": "Hello 3: View dynamically updated from ViewModel",
      "title": "Hello 3: View dynamically updated from ViewModel",
      "body": "<p>In the previous example we saw View elements populated with data from the ViewModel data object.  It is also possible for View elements to set data in the ViewModel data object.</p>\r\n<p>In the module below, we have added an edit control to the View that is bound to the <em>userName</em> value of the ViewModel.  That means that the edit control will be initially populated with the value of the <em>userName</em> from the ViewModel.  And it also means that when the content of the edit control changes, it will be immediately reflected in the <em>userName</em> field of the ViewModel data object (and any other View elements bound to that item will thus be updated in real-time).  In the example below, as you change the contents of the edit control, you will see the Hello message updated in real-time.</p>\r\n<p>The other concept demonstrated below is that any View control attribute may be bound to any ViewModel data element, with appropriate conversion performed automatically.  The <em>visibility</em> attribute of the text control is bound to the <em>userName,</em> such that if the <em>userName</em> is empty, the text field will be invisible, otherwise it will be visible.  </p>\r\n<p>Both of these techniques demonstrate that it is possible to write responsive interfaces that do not require procedural code (or communication between client and server). </p>\r\n<p><strong>Module: hello3.js - <a href=\"https://github.com/SynchroLabs/SynchroTutorial/blob/master/hello3.js\">View on GitHub</a></strong></p>\r\n<pre><code>exports.InitializeViewModel = function(context, session)\r\n{\r\n    return {\r\n        userName: \"Jane Smith\"\r\n    };\r\n}\r\n\r\nexports.View = {\r\n    title: \"Hello World 3\",\r\n    elements: [\r\n        <span class=\"mark\">{ control: \"edit\", binding: \"userName\", placeholder: \"enter name\" },</span>\r\n        { control: \"text\", value: \"Hello {userName}\", <span class=\"mark\">visibility: \"{userName}\"</span> }\r\n    ]\r\n};</code></pre>\r\n<p>This module will look like this on mobile client (and will update in real-time as the the user name is edited): </p>\r\n<p><img src=\"https://support.synchro.io/hc/en-us/article_attachments/207407387/Hello3.png\" alt=\"\" /></p>\r\n<p><strong>Next - <a href=\"/hc/en-us/articles/219089748\">Hello 4: View that executes a command</a> </strong></p>\r\n<p> </p>\r\n<p> </p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/204233727-tutorial/219542347-hello-3-view-dynamically-updated-from-viewmodel/index.html"
    },
    {
      "id": 219089748,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/219089748-Hello-4-View-that-executes-a-command.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/219089748-Hello-4-View-that-executes-a-command",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 4,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 204233727,
      "created_at": "2016-05-17T18:20:45Z",
      "updated_at": "2016-05-19T07:04:03Z",
      "name": "Hello 4: View that executes a command",
      "title": "Hello 4: View that executes a command",
      "body": "<p>View controls may be configured to trigger a \"command\" in their corresponding Synchro module.  The kind of action that may be configured to trigger a command varies based on the control, and can be anything from a button being pushed, to a text control be edited, to location services being detected.</p>\r\n<p>In the example below, when the button is pushed, the <em>onSubmit</em> command will be called.  The actual implementation of the command runs in the context of the Synchro app module on the Synchro Server.  The viewModel passed to the command will always reflect the current state of the ViewModel on the client.</p>\r\n<p>Note that we have also bound the <em>enabled</em> attribute of the button to the <em>userName</em>, such that the button will only be enabled when the <em>userName</em> has a value.</p>\r\n<p><strong>Module: hello4.js - <a href=\"https://github.com/SynchroLabs/SynchroTutorial/blob/master/hello4.js\">View on GitHub</a></strong></p>\r\n<pre><code>exports.InitializeViewModel = function(context, session)\r\n{\r\n    return {\r\n        userName: \"Jane Smith\"\r\n    };\r\n}\r\n\r\nexports.View = {\r\n    title: \"Hello World 4\",\r\n    elements: [\r\n        { control: \"edit\", binding: \"userName\", placeholder: \"enter name\" },\r\n        { control: \"text\", value: \"Hello {userName}\", visibility: \"{userName}\" },\r\n        <span class=\"mark\">{ control: \"button\", caption: \"Submit\", binding: \"onSubmit\", enabled: \"{userName}\" }</span>\r\n    ]\r\n};\r\n\r\n<span class=\"mark\">exports.Commands =\r\n{\r\n    onSubmit: function(context, session, viewModel)\r\n    {\r\n        Synchro.showMessage(context, {\r\n            title: \"Hello World\",\r\n            message: \"User name: \" + viewModel.userName\r\n        });\r\n    }\r\n}</span></code></pre>\r\n<p>The module will look like this on mobile client (the Hello message and \"Submit\" button state will reflect the contents of the user name in real-time): </p>\r\n<p><img src=\"https://support.synchro.io/hc/en-us/article_attachments/207407407/Hello4.png\" alt=\"\" /></p>\r\n<p> When the \"Submit\" button is clicked, you will see a platform-specific form of message box, as below:</p>\r\n<p><img src=\"https://support.synchro.io/hc/en-us/article_attachments/207362708/Hello4a.png\" alt=\"\" /></p>\r\n<p><strong>Next - <a href=\"/hc/en-us/articles/219542847\">Hello 5: View with value conversion</a> </strong></p>\r\n<p> </p>\r\n<p> </p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/204233727-tutorial/219089748-hello-4-view-that-executes-a-command/index.html"
    },
    {
      "id": 219542847,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/219542847-Hello-5-View-with-value-conversion.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/219542847-Hello-5-View-with-value-conversion",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 5,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 204233727,
      "created_at": "2016-05-17T18:21:20Z",
      "updated_at": "2016-05-20T21:06:38Z",
      "name": "Hello 5: View with value conversion",
      "title": "Hello 5: View with value conversion",
      "body": "<p>It is sometimes the case that we want to build responsive Views that require more than just binding attributes directly to ViewModel data elements.  In these cases, we can employ an advanced binding syntax using <em>eval()</em>.  The <em>eval</em> contents must be valid JavaScript code, and typically also contain binding tokens that correspond to ViewModel data elements.  Because the <em>eval</em> code converts ViewModel data (optionally in combination) into View attribute values, we refer to this technique as \"value conversion\".</p>\r\n<p>In the example below, we have divided the user name into two fields.  The Hello text will show the uppercase concatenation of the two fields.  And the Submit button will only be enabled if BOTH fields contain a value.</p>\r\n<p><strong>Module: hello5.js - <a href=\"https://github.com/SynchroLabs/SynchroTutorial/blob/master/hello5.js\">View on GitHub</a></strong></p>\r\n<pre><code>exports.InitializeViewModel = function(context, session) {\r\n    return {\r\n        <span class=\"mark\">firstName: \"Jane\",</span>\r\n        <span class=\"mark\">lastName: \"Smith\",</span>\r\n    }\r\n}\r\n\r\nexports.View =\r\n{\r\n    title: \"Hello World\",\r\n    elements:\r\n    [\r\n        <span class=\"mark\">{ control: \"edit\", binding: \"firstName\", placeholder: \"first name\" },</span>\r\n        <span class=\"mark\">{ control: \"edit\", binding: \"lastName\", placeholder: \"last name\" },</span>\r\n        { control: \"text\", value: \"<span class=\"mark\">eval('Hello ' + ({firstName} + ' ' + {lastName}).toUpperCase())</span>\" },\r\n        { control: \"button\", caption: \"Submit\", binding: \"onSubmit\", enabled: \"<span class=\"mark\">eval({firstName} &amp;&amp; {lastName})</span>\" },\r\n    ]\r\n}\r\n\r\nexports.Commands =\r\n{\r\n    onSubmit: function(context, session, viewModel)\r\n    {\r\n        Synchro.showMessage(context, { \r\n            title: \"Hello World\", \r\n            message: \"User name: \" + <span class=\"mark\">viewModel.firstName + \" \" + viewModel.lastName</span> \r\n        });\r\n    }\r\n}\r\n</code></pre>\r\n<p>This module will appear as below on mobile devices (the Welcome text and \"Submit\" button state will reflect to contents of the first and last name fields, in real-time): </p>\r\n<p><img src=\"https://support.synchro.io/hc/en-us/article_attachments/207362748/Hello5.png\" alt=\"\" /></p>\r\n<p><strong><em>Security note:</em></strong> The <em>eval()</em> code is executed in a secure sandbox on the client, such that the code has no access to any data or state in the client environment and can only impact the View attribute which contains it (and cannot, for example, impact the ViewModel).  One implication of this is that no user-provided data can ever be evaluated as JavaScript (so injection attacks are not possible).  </p>\r\n<p><strong>Next - <a href=\"/hc/en-us/articles/219542867\">Hello 6: Complex view with container controls</a> </strong></p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/204233727-tutorial/219542847-hello-5-view-with-value-conversion/index.html"
    },
    {
      "id": 219542867,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/219542867-Hello-6-Complex-view-with-container-controls.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/219542867-Hello-6-Complex-view-with-container-controls",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 6,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 204233727,
      "created_at": "2016-05-17T18:21:48Z",
      "updated_at": "2016-05-20T21:27:21Z",
      "name": "Hello 6: Complex view with container controls",
      "title": "Hello 6: Complex view with container controls",
      "body": "<p>Up to this point, our View specifications have just been simple lists of controls with no layout information or styling.  When you build real-world applications, you will arrange your controls in containers and indicate layout constraints (including sizing, alignment, margins, etc).</p>\r\n<p>See the <a href=\"/hc/en-us/articles/205324388-Control-Sizing-and-Layout\">Control Sizing and Layout</a> and <a href=\"/hc/en-us/articles/206059187-Coordinate-System-and-Layout\">Coordinate System and Layout</a> documentation for more information on these topics.</p>\r\n<p>Below we use <code>stackpanel</code> container controls along with new <code>text</code> captions, and use layout constraints on the <code>text</code> and <code>edit</code> controls, to make what is essentially a table style layout.  With Synchro, it is possible to make complex layouts that are still platform-independent and responsive. </p>\r\n<p><strong>Module: hello6.js - <a href=\"https://github.com/SynchroLabs/SynchroTutorial/blob/master/hello6.js\">View on GitHub</a></strong></p>\r\n<pre><code>exports.InitializeViewModel = function(context, session) {\r\n    return {\r\n        firstName: \"Jane\",\r\n        lastName: \"Smith\",\r\n    }\r\n}\r\n\r\nexports.View =\r\n{\r\n    title: \"Hello World 6\",\r\n    elements:\r\n    [\r\n        <span class=\"mark\">{ control: \"text\", value: \"Enter your name:\", font: { bold: true } },</span>\r\n        <span class=\"mark\">{ control: \"stackpanel\", orientation: \"Horizontal\", contents: [</span>\r\n            <span class=\"mark\">{ control: \"text\", value: \"First name:\", verticalAlignment: \"Center\", width: 200 },</span>\r\n            { control: \"edit\", binding: \"firstName\", <span class=\"mark\">verticalAlignment: \"Center\", width: 240</span> },\r\n        ] },\r\n        <span class=\"mark\">{ control: \"stackpanel\", orientation: \"Horizontal\", contents: [</span>\r\n            <span class=\"mark\">{ control: \"text\", value: \"Last name:\", verticalAlignment: \"Center\", width: 200 },</span>\r\n            { control: \"edit\", binding: \"lastName\", <span class=\"mark\">verticalAlignment: \"Center\", width: 240</span> },\r\n        ] },\r\n        { control: \"text\", value: \"eval('Hello ' + ({firstName} + ' ' + {lastName}).toUpperCase())\" },\r\n        { control: \"button\", caption: \"Submit\", binding: \"onSubmit\", enabled: \"eval({firstName} &amp;&amp; {lastName})\" },\r\n    ]\r\n}\r\n\r\nexports.Commands =\r\n{\r\n    onSubmit: function(context, session, viewModel)\r\n    {\r\n        Synchro.showMessage(context, { \r\n            title: \"Hello World\", \r\n            message: \"User name: \" + viewModel.firstName + \" \" + viewModel.lastName \r\n        });\r\n    }\r\n}</code></pre>\r\n<p> </p>\r\n<p><img src=\"https://support.synchro.io/hc/en-us/article_attachments/207407427/Hello6.png\" alt=\"\" /></p>\r\n<p><strong>Next - <a href=\"/hc/en-us/articles/219542947\">Hello 7: View with shared styles</a> </strong></p>\r\n<p> </p>\r\n<p> </p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/204233727-tutorial/219542867-hello-6-complex-view-with-container-controls/index.html"
    },
    {
      "id": 219542947,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/219542947-Hello-7-View-with-shared-styles.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/219542947-Hello-7-View-with-shared-styles",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 7,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 204233727,
      "created_at": "2016-05-17T18:22:21Z",
      "updated_at": "2016-05-20T21:38:05Z",
      "name": "Hello 7: View with shared styles",
      "title": "Hello 7: View with shared styles",
      "body": "<p>While you can specify every layout attribute of every View control explicitly, it is often useful to define a set of attributes centrally (in the ViewModel) and have View elements refer to those attributes.  Not only does this technique require less code, but it makes it easy to maintain consistency between related controls in a View (for example, if several controls have the same styling or the same width, you can make a change in one place to control all of them).</p>\r\n<p>For details on this mechanism, see: <a href=\"/hc/en-us/articles/216081367-View-Styles\">View Styles</a>.  A more advanced version of this functionality, including the ability to apply styles to control types automatically (without a <code>style</code> attribute) and to filter styles based on client characteristics, see the <a href=\"/hc/en-us/articles/215439548-View-Style-Helper\">View Style Helper</a> documentation.</p>\r\n<p>Below we have added some more styling (including font sizes and text alignment), and we have centralized the styles in the ViewModel and referred to them using the <code>style</code> attribute of the relevant controls.</p>\r\n<p><strong>Module: hello7.js - <a href=\"https://github.com/SynchroLabs/SynchroTutorial/blob/master/hello7.js\">View on GitHub</a></strong></p>\r\n<pre><code>exports.InitializeViewModel = function(context, session) {\r\n    return {\r\n        firstName: \"Jane\",\r\n        lastName: \"Smith\",\r\n        <span class=\"mark\">textStyle: { fontsize: 12, verticalAlignment: \"Center\" },</span>\r\n        <span class=\"mark\">labelStyle: { width: 200, textAlignment: \"Right\" },</span>\r\n        <span class=\"mark\">editStyle: { width: 240 }</span>\r\n    }\r\n}\r\n\r\nexports.View =\r\n{\r\n    title: \"Hello World 7\",\r\n    elements:\r\n    [\r\n        { control: \"text\", value: \"Enter your name:\", font: { <span class=\"mark\">size: \"{textStyle.fontsize}\",</span> bold: true } },\r\n        { control: \"stackpanel\", orientation: \"Horizontal\", contents: [\r\n            { control: \"text\", value: \"First name:\", <span class=\"mark\">style: \"textStyle, labelStyle\"</span> },\r\n            { control: \"edit\", binding: \"firstName\", <span class=\"mark\">style: \"textStyle, editStyle\"</span> },\r\n        ] },\r\n        { control: \"stackpanel\", orientation: \"Horizontal\", contents: [\r\n            { control: \"text\", value: \"Last name:\", <span class=\"mark\">style: \"textStyle, labelStyle\"</span> },\r\n            { control: \"edit\", binding: \"lastName\", <span class=\"mark\">style: \"textStyle, editStyle\"</span> },\r\n        ] },\r\n        { control: \"text\", value: \"eval('Hello ' + ({firstName} + ' ' + {lastName}).toUpperCase())\", <span class=\"mark\">style: \"textStyle\"</span> },\r\n        { control: \"button\", caption: \"Submit\", binding: \"onSubmit\", enabled: \"eval({firstName} &amp;&amp; {lastName})\" },\r\n    ]\r\n}\r\n\r\nexports.Commands =\r\n{\r\n    onSubmit: function(context, session, viewModel)\r\n    {\r\n        Synchro.showMessage(context, { \r\n            title: \"Hello World\", \r\n            message: \"User name: \" + viewModel.firstName + \" \" + viewModel.lastName \r\n        });\r\n    }\r\n}</code></pre>\r\n<p> </p>\r\n<p><img src=\"https://support.synchro.io/hc/en-us/article_attachments/207362768/Hello7.png\" alt=\"\" /></p>\r\n<p><strong>Next - <a href=\"/hc/en-us/articles/219542967\">List 1: List view from static array</a> </strong></p>\r\n<p> </p>\r\n<p> </p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/204233727-tutorial/219542947-hello-7-view-with-shared-styles/index.html"
    },
    {
      "id": 219542967,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/219542967-List-1-List-view-from-static-array.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/219542967-List-1-List-view-from-static-array",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 8,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 204233727,
      "created_at": "2016-05-17T18:22:46Z",
      "updated_at": "2016-05-20T22:07:03Z",
      "name": "List 1: List view from static array",
      "title": "List 1: List view from static array",
      "body": "<p>The <a href=\"/hc/en-us/articles/205268118\">listview</a> control is one of several controls (including <a href=\"/hc/en-us/articles/206058797\">listbox</a> and <a href=\"/hc/en-us/articles/205268128\">picker</a>) that operate on a JavaScript array in the ViewModel.  The listview iterates the array to which it is bound, and creates a list element with a corresponding view item container for each item in the underlying array.  The \"context\" of the view for each item is the corresponding array member.  For more details, see the \"Binding Context\" discussion in <a href=\"/hc/en-us/articles/205267778-Data-Binding\">Data Binding</a>.</p>\r\n<p>In the example below, we have bound a <code>listview</code> in the View to the \"people\" array in the ViewModel.  The <code>itemTemplate</code> defines the view for each item in the list.</p>\r\n<p>Note that there is an <code>image</code> control in our item view, which we populate using the value from the <code>Synchro.getResourceUrl</code> helper function.  For more information, see: <a href=\"/hc/en-us/articles/217448657\">Static Resources</a>.</p>\r\n<p><strong>Module: list1.js - <a href=\"https://github.com/SynchroLabs/SynchroTutorial/blob/master/list1.js\">View on GitHub</a></strong></p>\r\n<pre><code>var imgUser = Synchro.getResourceUrl(\"user.png\");\r\n\r\nexports.InitializeViewModel = function(context, session, params, state)\r\n{\r\n    return {\r\n        people: [\r\n             { first: \"Betsy\", last: \"Braddock\" }, \r\n             { first: \"Steven\", last: \"Rogers\" }, \r\n             { first: \"Natasha\", last: \"Romanoff\" }, \r\n             { first: \"Tony\", last: \"Stark\" }, \r\n             { first: \"Wade\", last: \"Wilson\" }, \r\n        ],\r\n    }\r\n}\r\n\r\nexports.View =\r\n{\r\n    title: \"List 1\",\r\n    elements:\r\n    [\r\n        { control: \"stackpanel\", orientation: \"Vertical\", width: \"*\", contents: [\r\n            { control: \"listview\", select: \"Single\", width: \"*\", binding: \"people\", itemTemplate:\r\n                { control: \"stackpanel\", orientation: \"Horizontal\", width: \"*\", padding: 5, contents: [\r\n                    { control: \"image\", resource: imgUser, height: 50, width: 50, verticalAlignment: \"Center\" },\r\n                    { control: \"stackpanel\", orientation: \"Vertical\", contents: [\r\n                        { control: \"text\", value: \"{first}\" },\r\n                        { control: \"text\", value: \"{last}\" },\r\n                    ] },\r\n                ] },\r\n            },\r\n        ] },\r\n    ]\r\n}</code></pre>\r\n<p>This module will appear as below: </p>\r\n<p><img src=\"https://support.synchro.io/hc/en-us/article_attachments/207362788/List1.png\" alt=\"\" /></p>\r\n<p><strong>Next - <a href=\"/hc/en-us/articles/219090468\">List 2: List view loaded asynchronously</a> </strong></p>\r\n<p> </p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/204233727-tutorial/219542967-list-1-list-view-from-static-array/index.html"
    },
    {
      "id": 219090468,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/219090468-List-2-List-view-loaded-asynchronously.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/219090468-List-2-List-view-loaded-asynchronously",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 9,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 204233727,
      "created_at": "2016-05-17T18:23:10Z",
      "updated_at": "2016-06-03T17:11:45Z",
      "name": "List 2: List view loaded asynchronously",
      "title": "List 2: List view loaded asynchronously",
      "body": "<p>In real-world apps, it is often the case that ViewModel data needs to be populated asynchronously (such as when loading data from a database, or by calling a network API).  Synchro accommodates asynchronous processing in app code using a variety of mechanisms to allow an immediate response, with optional interim responses, and then a final response, over time.  For details on the various types of asynchronous support provided in Synchro (and used in this example), see: <a href=\"/hc/en-us/articles/206058467-Asynchronous-Processing\">Asynchronous Processing</a>.</p>\r\n<p><em>Note:</em> The budget for composing a response to any Synchro app function is 25ms.  If the process cannot be completed in that amount of time, then asynchronous techniques should be employed. </p>\r\n<p>The asynchronous technique demonstrated below is called \"delayed ViewModel initialization\".  With this technique, the response to <code>InitializeViewModel</code> is returned immediately, and then since <code>LoadViewModel</code> is present, that function will automatically be called so that the asynchronous loading of the ViewModel may continue/complete.</p>\r\n<p>It is common to employ a value in the ViewModel to indicate to the View that it is in a \"loading\" state.  Below, we use the <code>isLoading</code> member of the ViewModel for that purpose, and we use two sets of controls whose visibility is bound to that value to show the \"loading\" and \"loaded\" states. </p>\r\n<p>The call to <code>Synchro.yieldAwaitable</code> is just a mechanism to generate a delay before we load the ViewModel.  In a real application, <code>Synchro.yieldAwaitable</code> would yield to your asynchronous thunk, generator, Promise, etc.</p>\r\n<p><strong>Module: list2.js - <a href=\"https://github.com/SynchroLabs/SynchroTutorial/blob/master/list2.js\">View on GitHub</a></strong></p>\r\n<pre><code>var imgUser = Synchro.getResourceUrl(\"user.png\");\r\n\r\nexports.InitializeViewModel = function(context, session, params, state)\r\n{\r\n    return {\r\n        <span class=\"mark\">isLoading: true</span>\r\n    }\r\n}\r\n\r\n<span class=\"mark\">exports.LoadViewModel = function * (context, session, viewModel)\r\n{\r\n    yield Synchro.yieldAwaitable(context, function(callback){ setTimeout(callback, 4000) });\r\n    viewModel.people = [\r\n         { first: \"Betsy\", last: \"Braddock\" }, \r\n         { first: \"Steven\", last: \"Rogers\" }, \r\n         { first: \"Natasha\", last: \"Romanoff\" }, \r\n         { first: \"Tony\", last: \"Stark\" }, \r\n         { first: \"Wade\", last: \"Wilson\" }, \r\n    ];\r\n    viewModel.isLoading = false;\r\n}</span>\r\n\r\nexports.View =\r\n{\r\n    title: \"List 2\",\r\n    elements:\r\n    [\r\n<span class=\"mark\">        { control: \"stackpanel\", orientation: \"Vertical\", visibility: \"{isLoading}\", contents: [\r\n            { control: \"progressring\", value: \"{isLoading}\", verticalAlignment: \"Center\" },\r\n            { control: \"text\", value: \"Loading...\", color: \"Red\", font: { size: 24, bold: true }, verticalAlignment: \"Center\" },\r\n        ] },</span>\r\n        { control: \"stackpanel\", orientation: \"Vertical\", width: \"*\", <span class=\"mark\">visibility: \"{!isLoading}\",</span> contents: [\r\n            { control: \"listview\", select: \"None\", width: \"*\", binding: \"people\", itemTemplate:\r\n                { control: \"stackpanel\", orientation: \"Horizontal\", width: \"*\", padding: 5, contents: [\r\n                    { control: \"image\", resource: imgUser, height: 50, width: 50, verticalAlignment: \"Center\" },\r\n                    { control: \"stackpanel\", orientation: \"Vertical\", contents: [\r\n                        { control: \"text\", value: \"{first}\" },\r\n                        { control: \"text\", value: \"{last}\" },\r\n                    ] },\r\n                ] },\r\n            },\r\n        ] },\r\n    ]\r\n}</code></pre>\r\n<p>In the interval between when <code>IntializeViewModel</code> returns and <code>LoadViewModel</code> returns (approximately 4 seconds), this module will show a \"Loading\" view, as below: </p>\r\n<p><img src=\"https://support.synchro.io/hc/en-us/article_attachments/207362808/List2.png\" alt=\"\" /></p>\r\n<p>After <code>LoadViewModel</code> returns the ViewModel with the populated list (and <code>isLoading</code> set to false), this module will display the loaded list as below:</p>\r\n<p><img src=\"https://support.synchro.io/hc/en-us/article_attachments/207407447/List2a.png\" alt=\"\" /></p>\r\n<p><strong>Next - <a href=\"/hc/en-us/articles/219090528\">List 3: List view with nav to detail view</a> </strong></p>\r\n<p> </p>\r\n<p> </p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/204233727-tutorial/219090468-list-2-list-view-loaded-asynchronously/index.html"
    },
    {
      "id": 219090528,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/219090528-List-3-List-view-with-nav-to-detail-view.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/219090528-List-3-List-view-with-nav-to-detail-view",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 10,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 204233727,
      "created_at": "2016-05-17T18:24:20Z",
      "updated_at": "2016-06-03T17:12:19Z",
      "name": "List 3: List view with nav to detail view",
      "title": "List 3: List view with nav to detail view",
      "body": "<p>In the example below we demonstrate the mechanisms for navigating between Views, as well as for maintaining View state and passing data between Views.  For more details on these mechanisms and techniques, see <a href=\"/hc/en-us/articles/206058697-Navigation-Support\">Navigation Support</a>.</p>\r\n<p>Navigation from a view to a child view is accomplished via <code>Synchro.pushAndNavigateTo()</code>.  Navigation from the child view back to the parent view is accomplished via <code>Synchro.pop()</code>.</p>\r\n<p>When navigating to a child view via <code>Synchro.pushAndNavigateTo()</code>, the parent view can specify a params object to be passed to the child view's <code>InitializeViewModel</code> function, as well as its own \"state\", which will be preserved and passed back to it when its own <code>InitializeViewModel</code> function is called upon return.  In the example below, the parent specifies its entire ViewModel as \"state\", but in practice this can be any data (including a subset or superset of the ViewModel) that is required.  Storing and restoring state allows applications to avoid lengthy repopulation of parent ViewModels, as in our example here (note that we don't have the simulated 4 second wait when we come back to the list view from the detail view).</p>\r\n<p>In the <code>IntializeViewModel</code> of the list view below, a check is done to determine whether the view state is being restored or needs to be regenerated (reloaded).  In addition, any changes made by a child view (and stored in the session) are processed.</p>\r\n<p><strong>Module: list3.js - <a href=\"https://github.com/SynchroLabs/SynchroTutorial/blob/master/list3.js\">View on GitHub</a></strong></p>\r\n<pre><code>var imgUser = Synchro.getResourceUrl(\"user.png\");\r\n\r\nexports.InitializeViewModel = function(context, session, params, state)\r\n{\r\n<span class=\"mark\">    var viewModel = state;\r\n    if (viewModel == null)\r\n    {\r\n        viewModel = { isLoading: true };\r\n    }\r\n    else if (session.updatedPerson)\r\n    {\r\n        viewModel.people[session.updatedPerson.index] = session.updatedPerson.person;\r\n        delete session.updatedPerson;\r\n    }\r\n\r\n    return viewModel;</span>\r\n}\r\n\r\nexports.LoadViewModel = function * (context, session, viewModel)\r\n{\r\n    <span class=\"mark\">if (viewModel.people === undefined)</span>\r\n    <span class=\"mark\">{</span>\r\n        yield Synchro.yieldAwaitable(context, function(callback){ setTimeout(callback, 4000) });\r\n        viewModel.people = [\r\n             { first: \"Betsy\", last: \"Braddock\" }, \r\n             { first: \"Steven\", last: \"Rogers\" }, \r\n             { first: \"Natasha\", last: \"Romanoff\" }, \r\n             { first: \"Tony\", last: \"Stark\" }, \r\n             { first: \"Wade\", last: \"Wilson\" }, \r\n        ];\r\n        viewModel.isLoading = false;\r\n    <span class=\"mark\">}</span>\r\n}\r\n\r\nexports.View =\r\n{\r\n    title: \"List 3\",\r\n    elements:\r\n    [\r\n        { control: \"stackpanel\", orientation: \"Vertical\", visibility: \"{isLoading}\", contents: [\r\n            { control: \"progressring\", value: \"{isLoading}\", verticalAlignment: \"Center\" },\r\n            { control: \"text\", value: \"Loading...\", color: \"Red\", font: { size: 24, bold: true }, verticalAlignment: \"Center\" },\r\n        ] },\r\n        { control: \"stackpanel\", orientation: \"Vertical\", width: \"*\", contents: [\r\n            { control: \"listview\", select: \"None\", width: \"*\", \r\n              binding: { items: \"people\", <span class=\"mark\">onItemClick: { command: \"onSelected\", person: \"{$data}\", index: \"{$index}\" }</span> }, \r\n              itemTemplate:\r\n                { control: \"stackpanel\", orientation: \"Horizontal\", width: \"*\", padding: 5, contents: [\r\n                    { control: \"image\", resource: imgUser, height: 50, width: 50, verticalAlignment: \"Center\" },\r\n                    { control: \"stackpanel\", orientation: \"Vertical\", contents: [\r\n                        { control: \"text\", value: \"{first}\" },\r\n                        { control: \"text\", value: \"{last}\" },\r\n                    ] },\r\n                ] },\r\n            },\r\n        ] },\r\n    ]\r\n}\r\n\r\nexports.Commands = \r\n{\r\n<span class=\"mark\">    onSelected: function (context, session, viewModel, params)\r\n    {\r\n        return Synchro.pushAndNavigateTo(context, \"hello8\", params, viewModel);\r\n    },</span>\r\n}</code></pre>\r\n<p>The view will be generated as in the previous example with a 4 second delay and \"loading\" status, unless we are returning from a child view, in which case the list view will be restored instantly.</p>\r\n<p>When an item in the list is clicked, the <code>onSelected</code> command will be called, and the child view will be activated. </p>\r\n<p><img src=\"https://support.synchro.io/hc/en-us/article_attachments/207362828/List3.png\" alt=\"\" /></p>\r\n<p>The detail view below receives its initial data from the parent view by way of <code>params</code>, which it uses to populate its ViewModel.  When \"Submit\" is pressed, any edits are stored in the session object (for the parent to process upon return), then <code>Synchro.pop()</code> returns control to the parent.</p>\r\n<p><strong>Module: hello8.js - <a href=\"https://github.com/SynchroLabs/SynchroTutorial/blob/master/hello8.js\">View on GitHub</a></strong></p>\r\n<pre><code>exports.InitializeViewModel = function(context, session, params, state) {\r\n    return {\r\n        firstName: <span class=\"mark\">params.person.first,</span>\r\n        lastName: <span class=\"mark\">params.person.last,</span>\r\n        <span class=\"mark\">index: params.index,</span>\r\n        textStyle: { fontsize: 12, verticalAlignment: \"Center\" },\r\n        labelStyle: { width: 200, textAlignment: \"Right\" },\r\n        editStyle: { width: 240 }\r\n    }\r\n}\r\n\r\nexports.View =\r\n{\r\n    title: \"Hello World 8\",\r\n    elements:\r\n    [\r\n        { control: \"text\", value: \"Enter name:\", font: { size: \"{textStyle.fontsize}\", bold: true } },\r\n        { control: \"stackpanel\", orientation: \"Horizontal\", contents: [\r\n            { control: \"text\", value: \"First name:\", style: \"textStyle, labelStyle\" },\r\n            { control: \"edit\", binding: \"firstName\", style: \"textStyle, editStyle\" },\r\n        ] },\r\n        { control: \"stackpanel\", orientation: \"Horizontal\", contents: [\r\n            { control: \"text\", value: \"Last name:\", style: \"textStyle, labelStyle\" },\r\n            { control: \"edit\", binding: \"lastName\", style: \"textStyle, editStyle\" },\r\n        ] },\r\n        { control: \"button\", caption: \"Submit\", binding: \"onSubmit\", enabled: \"eval({firstName} &amp;&amp; {lastName})\" },\r\n    ]\r\n}\r\n\r\nexports.Commands =\r\n{\r\n    onSubmit: function(context, session, viewModel)\r\n    {\r\n<span class=\"mark\">        session.updatedPerson = { index: viewModel.index, person: { first: viewModel.firstName, last: viewModel.lastName }};\r\n        Synchro.pop(context);</span>\r\n    }\r\n}</code></pre>\r\n<p>The name can be edited in the child view below, and the changes will be displayed on the parent list view page. </p>\r\n<p><img src=\"https://support.synchro.io/hc/en-us/article_attachments/207362848/Hello8.png\" alt=\"\" /></p>\r\n<p><strong>Next - <a href=\"/hc/en-us/articles/219090588\">Conclusion</a> </strong></p>\r\n<p> </p>\r\n<p> </p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/204233727-tutorial/219090528-list-3-list-view-with-nav-to-detail-view/index.html"
    },
    {
      "id": 219090588,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/219090588-Conclusion.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/219090588-Conclusion",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 11,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 204233727,
      "created_at": "2016-05-17T18:24:39Z",
      "updated_at": "2016-05-19T07:49:59Z",
      "name": "Conclusion",
      "title": "Conclusion",
      "body": "<p>We hope this tutorial has given you a good understanding of the core concepts of the Synchro platform.</p>\r\n<p>If you would like to explore more Synchro app code, we recommend:</p>\r\n<p><a href=\"https://github.com/SynchroLabs/SynchroSamples\">Synchro Samples</a> - A large number of simple modules, each demonstrating a single concept or the usage of a specific type of control.</p>\r\n<p><a href=\"https://github.com/SynchroLabs/SynchroCivics\">Synchro Civics</a> - A complete application that shows how to integrate all of these Synchro concepts, techniques, and controls.  This is the same Synchro app that drives our Synchro Civics mobile client app available in all app stores.</p>\r\n<p><strong>Happy Coding with Synchro!</strong></p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/204233727-tutorial/219090588-conclusion/index.html"
    },
    {
      "id": 204858178,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/204858178-Application-Model.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/204858178-Application-Model",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 0,
      "vote_sum": 1,
      "vote_count": 1,
      "section_id": 200810808,
      "created_at": "2015-04-19T05:42:54Z",
      "updated_at": "2016-06-03T17:10:39Z",
      "name": "Application Model",
      "title": "Application Model",
      "body": "<p>Consider the sample application <strong>Counter</strong>, shown below. This application displays a count, with buttons to increment, decrement, and reset the count. The decrement and reset buttons are only enabled if the count is greater than zero. The count value is displayed in green with a normal font weight unless the count is greater than or equal to 10, in which case the count is displayed in red and bold.</p>\r\n<p><img src=\"https://support.synchro.io/hc/en-us/article_attachments/201551748/win_counter.png\" alt=\"\" /></p>\r\n<p>This is the Synchro code for the <strong>Counter</strong> sample app:</p>\r\n<pre><code>// Counter page\r\n//\r\nvar fontStyle = \r\n{\r\n    normal: { color: \"Green\", isBold: false },\r\n    highlighted: { color: \"Red\", isBold: true }\r\n}\r\n\r\nexports.View =\r\n{\r\n    title: \"Click Counter\",\r\n    elements: \r\n    [\r\n        { control: \"text\", value: \"Count: {count}\", color: \"{font.color}\", font: { size: 24, bold: \"{font.isBold}\" } },\r\n        { control: \"button\", caption: \"Increment Count\", binding: { command: \"vary\", amount: 1 } },\r\n        { control: \"button\", caption: \"Decrement Count\", binding: { command: \"vary\", amount: -1 }, enabled: \"{count}\" },\r\n        { control: \"button\", caption: \"Reset Count\", binding: \"reset\", enabled: \"{count}\" },\r\n    ]\r\n}\r\n\r\nexports.InitializeViewModel = function(context, session, params)\r\n{\r\n    var viewModel =\r\n    {\r\n        count: 0,\r\n        font: fontStyle.normal,\r\n    }\r\n    return viewModel;\r\n}\r\n\r\nexports.Commands = \r\n{\r\n    vary: function(context, session, viewModel, params)\r\n    {\r\n        viewModel.count += params.amount;\r\n    },\r\n    reset: function(context, session, viewModel)\r\n    {\r\n        viewModel.count = 0;\r\n    },\r\n}\r\n\r\nexports.OnViewModelChange = function(context, session, viewModel, source, changes)\r\n{\r\n    viewModel.font = (viewModel.count &lt; 10) ? fontStyle.normal : fontStyle.highlighted; \r\n}<br /></code></pre>\r\n<p>Now let's break down what is happening here. Note that for the purpose of this explanation, we will refer to the unit of functionality expressed above as a \"page\", and the instance of this code running on the Synchro server as the \"page module\".</p>\r\n<p>The page above provides a view, view model data, view model commands, and view model update notifications. We'll discuss how these elements fit into the application model below.</p>\r\n<p>In our sample, we declare some module variables, as shown below.</p>\r\n<pre><code>var fontStyle = \r\n{\r\n    normal: { color: \"Green\", isBold: false },\r\n    highlighted: { color: \"Red\", isBold: true }\r\n}\r\n</code></pre>\r\n<p>It is important to note that there is <strong>no module state</strong> of any kind (the module may very well even be unloaded and reloaded, and possibly even updated, during any given session). Any local module variables should be used as if they were static, as we have done here. The only state available to the page module is provided via the <code>session</code> and <code>viewModel</code> parameters passed to the various callback methods.</p>\r\n<p>When the client requests a page, the first action taken by the Synchro server is to get initial view model data for the page via the page's <code>exports.InitializeViewModel</code> method.</p>\r\n<pre><code>exports.InitializeViewModel = function(context, session, params)\r\n{\r\n    var viewModel =\r\n    {\r\n        count: 0,\r\n        font: fontStyle.normal,\r\n    }\r\n    return viewModel;\r\n}\r\n</code></pre>\r\n<p>The Synchro server then retrieves the view specification for the page via <code>exports.View</code>, and applies any Layout Filtering or (optional) view initialization logic to that view specification.</p>\r\n<pre><code>exports.View =\r\n{\r\n    title: \"Click Counter\",\r\n    elements: \r\n    [\r\n        { control: \"text\", value: \"Count: {count}\", color: \"{font.color}\", font: { size: 24, bold: \"{font.isBold}\" } },\r\n        { control: \"button\", caption: \"Increment Count\", binding: { command: \"vary\", amount: 1 } },\r\n        { control: \"button\", caption: \"Decrement Count\", binding: { command: \"vary\", amount: -1 }, enabled: \"{count}\" },\r\n        { control: \"button\", caption: \"Reset Count\", binding: \"reset\", enabled: \"{count}\" },\r\n    ]\r\n}\r\n</code></pre>\r\n<p>Once the Synchro server has the view specification (filtered for the client, as appropriate) and the initial view model data, it sends that information to the client, and the client can then render the view and begin allowing the user to interact with it.</p>\r\n<p>Various user interactions can trigger view model commands. In our example, the user clicking any of the buttons will trigger a command. The view model commands are packaged together and exposed via the <code>exports.Commands</code> object.</p>\r\n<pre><code>exports.Commands = \r\n{\r\n    vary: function(context, session, viewModel, params)\r\n    {\r\n        viewModel.count += params.amount;\r\n    },\r\n    reset: function(context, session, viewModel)\r\n    {\r\n        viewModel.count = 0;\r\n    },\r\n}\r\n</code></pre>\r\n<p>When view model data is changed by the client, the server is notified via the <code>exports.OnChange</code> method, allowing the page module to take action based on the change, before any commands are executed. The <code>source</code> parameter will contain the value \"view\" in this case (the view was the source of the change).</p>\r\n<p>When view model data is changed by the execution of a page module command, the <code>exports.OnChange</code> method is also called, in this case with a <code>source</code> parameter value of \"command\" (a command was the source of the change). It should be noted that the command could simply apply its own post processing, but this call is provided as a convenience to allow centralized handling of view model data changes in one place. For example, in the counter sample we want to set the font based on the count without having to do this from each command that might have modified the count.</p>\r\n<pre><code>exports.OnViewModelChange = function(context, session, viewModel, source, changes)\r\n{\r\n    viewModel.font = (viewModel.count &lt; 10) ? fontStyle.normal : fontStyle.highlighted; \r\n}\r\n</code></pre>\r\n<p>See the complete list of <a href=\"/hc/en-us/articles/205668357\">Module Entry Points</a> for more details on these and other module functions, including their parameters and operation.</p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/204858178-application-model/index.html"
    },
    {
      "id": 205668357,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205668357-Module-Entry-Points.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205668357-Module-Entry-Points",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 1,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2015-04-27T22:03:20Z",
      "updated_at": "2016-06-03T09:28:11Z",
      "name": "Module Entry Points",
      "title": "Module Entry Points",
      "body": "<p>The following describes the entry points that a Synchro module may export. Most functions exported from a Synchro module share the following parameters:</p>\r\n<ul>\r\n<li><code>context</code> - An opaque context object that should only be used for passing to other API entrypoints that require it.</li>\r\n<li><code>session</code> - The current session.</li>\r\n<li><code>viewModel</code> - The current viewModel object.</li>\r\n</ul>\r\n<h3>View</h3>\r\n<pre><code>exports.View = { ... };</code></pre>\r\n<p>The <code>View</code> is an object representing the view template for the module.</p>\r\n<h3>InitializeView</h3>\r\n<pre><code>exports.InitializeView(context, session, viewModel, view, metrics, isViewMetricUpdate)</code></pre>\r\n<p>The <code>InitializeView</code> entrypoint is optional. The view is typically provided by the exported <code>View</code> object, but this entrypoint can be implemented if you desire to either modify that View, or generate your own view, from code. Any View defined by the exported <code>View</code> object will be passed to this function (if no View object was exported, that value will be undefined).</p>\r\n<p>This entrypoint, if present, is called both on rendering of the initial view template, and whenever the ViewMetrics change (such as when the orientation of the device or viewport of the app changes). The <code>isViewMetricUpdate</code> boolean parameter to this function signals why the entrypoint was called.</p>\r\n<h3>InitializeViewModel</h3>\r\n<pre><code>exports.InitializeViewModel(context, session, params, state)</code></pre>\r\n<p>The <code>InitializeViewModel</code> entrypoint is required. It must generate and return the initial view model object.</p>\r\n<h3>LoadViewModel</h3>\r\n<pre><code>exports.LoadViewModel(context, session, viewModel)</code></pre>\r\n<p>The <code>LoadViewModel</code> entrypoint is optional. It is used if there is additional processing required on the initial view model after it has been generated by <code>InitializeViewModel</code> and passed to the client.</p>\r\n<h3>OnViewMetricsChange</h3>\r\n<pre><code>exports.OnViewMetricsChange(context, session, viewModel, metrics)</code></pre>\r\n<p>The <code>OnViewMetricsChange</code> entrypoint is optional. It is called when the view metrics change, such as when the orentation changes, or when the application viewport size changes.</p>\r\n<h3>OnViewModelChange</h3>\r\n<pre><code>exports.OnViewModelChange(context, session, viewModel, source, changes)</code></pre>\r\n<p>The <code>OnViewModelChange</code> entrypoint is optional. It is called when the view model has been changed, either by the client or by the server. The <code>source</code> parameter indicates wether the change was generated by the client or the server.</p>\r\n<h3>OnBack</h3>\r\n<pre><code>exports.OnBack(context, session, viewModel)</code></pre>\r\n<p>The <code>OnBack</code> entrypoint is optional. If it is present, it is called when the user triggers the <strong>back</strong> mechanism on their device (either in the app command bar, via a hard back button, or using some other platform-defined behavior).  </p>\r\n<p>If the navigation action is performed inside of <code>OnBack</code>, then it should return <code>true</code>.  If <code>OnBack</code> is implemented and does not return <code>true</code>, the default back navigation action, <code>Synchro.pop()</code>, will be performed.</p>\r\n<h3>Commands</h3>\r\n<p><code>Commands</code> is a dictionary of user-defined entrypoints that may be called from various controls which bind to them.</p>\r\n<pre><code>exports.Commands =\r\n{\r\n    sampleCmd: function(context, session,  viewModel, params)\r\n}</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/205668357-module-entry-points/index.html"
    },
    {
      "id": 206058127,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/206058127-Built-in-Helper-Functions.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/206058127-Built-in-Helper-Functions",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 2,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2015-05-11T17:25:47Z",
      "updated_at": "2016-04-09T19:43:09Z",
      "name": "Built-in Helper Functions",
      "title": "Built-in Helper Functions",
      "body": "<p>Synchro provides a number of built-in commands in the Synchro namespace. These are automatically made accessible to Synchro modules (no \"require\" is necessary).</p>\r\n<h3>Synchro.getResourceUrl</h3>\r\n<pre><code>Synchro.getResourceUrl(resource)\r\n</code></pre>\r\n<p><code>getResourceUrl</code> uses the resource mapper provided in the Synchro application configuration to resolve resource names to full URLs that can be used to access those resources.</p>\r\n<h3>Synchro.navigateTo</h3>\r\n<pre><code>Synchro.navigateTo(context, route, params)\r\n</code></pre>\r\n<p><code>navigateToView</code> navigates between Synchro views. The <code>route</code> describes the path to the desired view, and <code>params</code>, if present, is an object that is passed to the IntializeViewModel function of the module being navigated to.</p>\r\n<p>For more details, see <a href=\"/hc/en-us/articles/206058697\">Navigation Support</a>.</p>\r\n<h3>Synchro.pushAndNavigateTo</h3>\r\n<pre><code>Synchro.pushAndNavigateTo(context, route, params, state)\r\n</code></pre>\r\n<p><code>pushAndNavigateToView</code> navigates between Synchro views. It works like <code>navigateTo</code>, except that is also pushes the current view on to the back stack, so that it can be accessed later using <code>Synchro.pop</code> or <code>Synchro.popTo</code>. In addition, any <code>state</code> provided will be passed to the InitializeViewModel function of this view when it is navigated back to via<code>Synchro.pop</code> or <code>Synchro.popTo</code>.</p>\r\n<p>For more details, see <a href=\"/hc/en-us/articles/206058697\">Navigation Support</a>.</p>\r\n<h3>Synchro.pop</h3>\r\n<pre><code>Synchro.pop(context)\r\n</code></pre>\r\n<p><code>pop</code> navigates to the most recent view stored on the back stack.</p>\r\n<p>For more details, see <a href=\"/hc/en-us/articles/206058697\">Navigation Support</a>.</p>\r\n<h3>Synchro.popTo</h3>\r\n<pre><code>Synchro.popTo(context, route)\r\n</code></pre>\r\n<p><code>popTo</code> navigates to the most recent view stored on the back stack which has a route matching the supplied <code>route</code>.</p>\r\n<p>For more details, see <a href=\"/hc/en-us/articles/206058697\">Navigation Support</a>.</p>\r\n<h3>Synchro.showMessage</h3>\r\n<pre><code>Synchro.showMessage(context, messageBox)\r\n</code></pre>\r\n<p><code>showMessage</code> causes the client device to show a message using the native message/alert mechanism on the device. Below is an example showing the components of the messageBox:</p>\r\n<pre><code>{\r\n    title: \"Caption\",\r\n    message: \"This is the message\",\r\n    options:\r\n    [\r\n        { label: \"Ok\", command: \"doOK\" },\r\n        { label: \"Cancel\" }\r\n    ]\r\n}\r\n</code></pre>\r\n<p>The <code>title</code> is optional. The <code>options</code> are also optional. If no <code>options</code> are provided, the message box will have a single Close button that dismisses the message box. Up to three options may be provided. Each option will generate a button with a label as specified in the <code>label</code> attribute of the option. An option with a <code>command</code> attribute will result in the message box being dismissed and that command issued when the corresponding button is clicked. An option without a <code>command</code> attribute result in a button that simply dismisses the message box.</p>\r\n<h3>Synchro.launchUrl</h3>\r\n<pre><code>Synchro.launchUrl(context, primaryUrl, secondaryUrl)\r\n</code></pre>\r\n<p><code>launchUrl</code> will attempt to launch the provided primary URL. If that fails, typically because there is no handler for the URL scheme, and if a secondary URL is provided, then the secondary URL will be launched.</p>\r\n<p>One common use case would be to try to launch a custom scheme URL, like twitter://user?screen_name=foo, to launch the Twitter app (if installed). If not, you could fall back to a seconday URL to launch the Twitter page in the browser, like http://twitter.com/foo.</p>\r\n<h3>Synchro.yieldAwaitable</h3>\r\n<pre><code>yield Synchro.yieldAwaitable(context, yieldable)\r\n</code></pre>\r\n<p><code>yieldAwaitable</code> allows for asynchronous processing of any object that the <a href=\"https://www.npmjs.com/package/co\">co</a> library considers <a href=\"https://www.npmjs.com/package/co#yieldables\">yieldable</a> (in practice this will often be a thunk wrapping a <a href=\"http://thenodeway.io/posts/understanding-error-first-callbacks/\">Node-style async completion callback</a>, and can also be a Promise or a generator function, among other things).</p>\r\n<p>If the yielded object or async function returns an error, that error will be thrown by <code>yieldAwaitable</code>, otherwise <code>yieldAwaitable</code> will return any result produced by the yieldable (via the completion callback, Promise result, etc).</p>\r\n<p><strong>Note: <code>yieldAwaitable</code> is an asynchronous generator function. It may only be called from an asynchronous generator function, and it must be preceded by the keyword \"yield\".</strong></p>\r\n<p>For more details, see <a href=\"/hc/en-us/articles/206058467\">Asynchronous Processing</a>.</p>\r\n<h3>Synchro.interimUpdateAwaitable</h3>\r\n<pre><code>yield Synchro.interimUpdateAwaitable(context)\r\n</code></pre>\r\n<p><code>interimUpdateAwaitable</code> provides a partial viewModel update back to the client, while allowing the server module to continue processing. It is important to call <code>interimUpdateAwaitable</code> in most cases before invoking an async or long running call using <code>yieldAwaitable</code>, typically with some indicator in the ViewModel that will communicate the waiting state back to the user's View.</p>\r\n<p><strong>Note: <code>interimUpdatedAwaitable</code> is an asynchronous generator function. It may only be called from an asynchronous generator function, and it must be preceded by the keyword \"yield\".</strong></p>\r\n<p>For more details, see <a href=\"/hc/en-us/articles/206058467\">Asynchronous Processing</a>.</p>\r\n<h3>Synchro.isActiveInstance</h3>\r\n<pre><code> Synchro.isActiveInstance(context)\r\n</code></pre>\r\n<p><code>isActiveInstance</code> indicates whether the page/instance being processed is the active instance. If it returns <code>false</code>, that means that the instance that the calling code is processing is not current (has been navigated away from). In this case, no viewModel updates will be sent to the client.</p>\r\n<p>If your async processing is incremental, such that you are calling <code>yieldAwaitable</code> in a loop, then you should check <code>isActiveInstance</code> each time through the loop, and if it returns false, you should abandon the loop (as any further processing on behalf of the obsolete page/instance is not useful)</p>\r\n<p>For more details, see <a href=\"/hc/en-us/articles/206058467\">Asynchronous Processing</a>.</p>\r\n<h3>Synchro.getMetrics</h3>\r\n<pre><code>Synchro.getMetrics(context)\r\n</code></pre>\r\n<p><code>getMetrics</code> returns a <code>metrics</code> object containing <code>DeviceMetrics</code> and <code>ViewMetrics</code>.</p>\r\n<p>For more details, see <a href=\"/hc/en-us/articles/205267858\">Device and View Metrics</a>.</p>\r\n<h3>Synchro.getConfig</h3>\r\n<pre><code>Synchro.getConfig(context, key)\r\n</code></pre>\r\n<p><code>getConfig</code> will return a value representing the application-level configuration defined for the provided <strong>key</strong>.</p>\r\n<p>Please see the Application Configuration section of <a href=\"/hc/en-us/articles/205274228\">Server Configuration</a> for more details on setting application configuration values.</p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/206058127-built-in-helper-functions/index.html"
    },
    {
      "id": 205267778,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205267778-Data-Binding.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205267778-Data-Binding",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 3,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2015-05-11T17:27:14Z",
      "updated_at": "2016-04-20T22:09:14Z",
      "name": "Data Binding",
      "title": "Data Binding",
      "body": "<h2>What is data binding?</h2>\r\n<p>Data binding is the mechanism that allows user interface elements in a \"View\" to be linked directly to data and/or commands in a \"View Model\".</p>\r\n<p>Consider the following View and View Model:</p>\r\n<p>View:</p>\r\n<pre>{ control: \"stackpanel\", orientation: \"Horizontal\", contents: [\r\n    { control: \"text\", value: \"First name:\" },\r\n    { control: \"edit\", binding: \"firstName\" }, // &lt;&lt; Edit control bound to firstName\r\n] },\r\n{ control: \"stackpanel\", orientation: \"Horizontal\", contents: [\r\n    { control: \"text\", value: \"Last name:\" },\r\n    { control: \"edit\", binding: \"lastName\" }, // &lt;&lt; Edit control bound to lastName\r\n] },\r\n{ control: \"text\", value: \"Welcome {firstName} {lastName}\" }, // &lt;&lt; Text composed from bound values</pre>\r\n<p>View Model:</p>\r\n<pre>viewModel =\r\n{\r\n    firstName: \"John\",\r\n    lastName: \"Smith\",\r\n}</pre>\r\n<p>In this example, edit controls for first and last name will be pre-populated with the values \"John\" and \"Smith\" respectively, and the welcome string will be set to \"Welcome John Smith\". As the end user changes the value in either edit control, the associated value in the view model will be updated in real time, and that will trigger the simultaneous update of the welcome string.</p>\r\n<p>In Synchro, data binding is the only method that applications have to populate and interact with user interface elements, and for that reason the Synchro data binding system is necessarily comprehensive (supporting literally every possible interaction).</p>\r\n<h2>Types of data binding</h2>\r\n<h3>Value Binding</h3>\r\n<p>Value binding binds a control to a single data item in the view model (the view model data item \"backs\" the control).  For example, the <code>edit</code> controls in the example above use value binding to bind themselves to the corresponding view model items.  This means those controls are populated from the view model items when the view is initially rendered, and that the view model items backing the controls are updated in real-time whenever the control contents change.</p>\r\n<p>Value Binding:</p>\r\n<ul>\r\n<li>Can be used on certain elements</li>\r\n<li>Specified in the \"binding\" attribute</li>\r\n<li>Value binding (if any) is two-way, linked to a single data item in the view model</li>\r\n</ul>\r\n<h3>Property Binding</h3>\r\n<p>Property binding is a way of populating an attribute of a control using one or more binding tokens that represent view model data items (in addition to static text, if desired).  For example, the <code>text</code> control that displays the \"Welcome\" message in the example above uses property binding to populate itself.</p>\r\n<p>When using property binding, \"binding tokens\" are used to represent values from the view model.  These tokens are encapsulated in braces, and can use path syntax to navigate the view model (see \"Binding Paths\" below).  They can also use format specifiers.</p>\r\n<p>Propery Binding:</p>\r\n<ul>\r\n<li>Can be used in any attribute of any element</li>\r\n<li>Multiple bindings can be aggregated in an attribute</li>\r\n<li>One way (or one time using <code>^</code> notation)</li>\r\n<li>Can use format specifiers, for example <code>{screenSizeInches:F2}</code> (formats as a fixed point number with two decimal places).</li>\r\n</ul>\r\n<p>For supported format specifiers, see: <a href=\"http://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx\">http://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx</a></p>\r\n<h2>Binding Paths</h2>\r\n<p>Accessing view model data in a binding specification uses a path syntax. Consider the view model below:</p>\r\n<pre>viewModel = \r\n{\r\n    person: \r\n    {\r\n        firstName: \"John\",\r\n        lastName: \"Smith\"\r\n    },\r\n    colors: \r\n    [\r\n        { name: \"Red\", value: \"FF0000\" },\r\n        { name: \"Green\", value: \"00FF00\" },\r\n        { name: \"Blue\", value: \"0000FF\" }\r\n    ],\r\n    answer: 42\r\n}</pre>\r\n<ul>\r\n<li>To access a simple value, use the property name, for example: <code>answer</code></li>\r\n<li>To access an object property, use dot notation, for example: <code>person.firstName</code></li>\r\n<li>To access an array element, use square bracket notation with a numeric (0-based) index, for example: <code>colors[1]</code></li>\r\n<li>These notations can be combined as required, for example: <code>colors[1].name</code></li>\r\n</ul>\r\n<h2>The Binding Context</h2>\r\n<p>Each user interface element has a \"binding context\", provided by its container or parent element, which specifies the item in the view model on which its bindings will be based. At the top level, the binding context is the view model itself (as in the binding paths examples above).</p>\r\n<p>Generally, the binding context for a given element is passed on to any child or contained element. However, some container elements modify the binding context passed their child or contained elements. For example, a list view element might create a binding context for each item in the underlying bound array, and pass those binding contexts to each child element (so each list item element is bound to a corresponding item in the array).</p>\r\n<p>Elements can also alter their own binding context by using the <code>foreach</code> and/or <code>with</code>attribute in their binding specification. These binding context operations are applied before any property or value binding is processed for the element.</p>\r\n<p>The <code>foreach</code> binding attribute creates an instance of the element for each instance of the array referenced by <code>foreach</code>. For example, using the View Model above:</p>\r\n<pre>{ control: \"text\", value: \"Color: {name}\", binding: { foreach: 'colors' } }</pre>\r\n<p>will yield three text controls, one for each color, each displaying the name of the color.</p>\r\n<p>The <code>with</code> binding attribute selects a new context by applying the provided path to the current binding context. For example, using the view model above:</p>\r\n<pre>{ control: \"text\", value: \"Hello {firstName} {lastName}\", binding: { with: 'person' } }</pre>\r\n<p>will yield a text control with a welcome value using the first and last name from the 'person' property of the view model. Since <code>with</code> specified 'person', the binding context for the element was the person property, and the name values referenced are relative to that binding context.</p>\r\n<p>It is possible to used both <code>foreach</code> and <code>with</code> in a single binding specification, using the<code>foreach</code> to select the context to be iterated, and then using <code>with</code> to further select properties of each iterated item to become the binding context.</p>\r\n<h2>Special binding path tokens</h2>\r\n<p>It should be clear that each element has a binding context, and that that binding context can refer to any item anywhere in the view model. It is sometimes necessary to refer to values relative to either the root binding context (the view model itself) or the current binding context. The following special binding path tokens allow for this:</p>\r\n<ul>\r\n<li><code>$root</code> - Selects the root of the view model.</li>\r\n<li><code>$parent</code> - Selects the parent of the current binding context.</li>\r\n<li><code>$data</code> - Selects the value of the current binding context.</li>\r\n<li><code>$index</code> - Produces a numeric value representing the position (zero-based index) of an iterated binding context</li>\r\n</ul>\r\n<h2>Advanced Property Binding</h2>\r\n<h3>Negation</h3>\r\n<p>Any binding token may be negated by preceding it with an exclamation point. For example: <code>visibility=\"{!isVisible}\"</code></p>\r\n<h3>One-Time</h3>\r\n<p>Any binding token may be specify that its value should only be set upon initial rendering of the view, and not further updated, by preceding it with a caret. For example: <code>value=\"{^firstName}\"</code></p>\r\n<h3>Automatic Value Conversion</h3>\r\n<p>When an attribute consists of a single binding token, the value of that attribute will be converted from the value represented by the token to the type required by the attribute if necessary.  A common example is to value bind an edit control to a view model data item, then property bind the enabled attribute of a button using a token that refers to the same data item.</p>\r\n<pre><code>{ control: \"edit\", placeholder: \"enter message\", binding: \"message\"},\r\n{ control: \"button\", caption: \"Send\", binding: \"onSend\", enabled: \"{message}\" }</code></pre>\r\n<p>In the example above, the \"Send\" button will only be enabled when the user has entered characters in the \"message\" edit control.</p>\r\n<h3>Complex Data Conversion using JavaScript eval( )</h3>\r\n<p>When complex property binding is required that cannot be achieved using the above techniques, you may use JavaScript expressions surrounded by eval( ).  When using eval, the entire attribute must be the eval (with no static text or tokens before or after the eval).  The contents of the eval may contain binding tokens.</p>\r\n<p>Consider the case where you want to display a Twitter-style counter of the number of characters remaining available.  For that, you could do something like:</p>\r\n<pre><code>{ control: \"text\", value: \"eval('Characters remaining: ' + (140 - {text}.length))\" }</code></pre>\r\n<p>Consider the case where you only want your \"submit\" button enabled if the user has entered text into both of two fields:</p>\r\n<pre><code>{ control: \"button\", caption: \"Submit\", enabled: \"eval({subject}.length &amp;&amp; {body}.length)\" }</code></pre>\r\n<p>The JavaScript eval is performed on the client.  It is performed when the view is initially rendered, and also any time the underlying value of any token contained in the eval is updated (providing optimal real-time updates).</p>\r\n<p>It should be noted that the Synchro mobile clients do not actually use the JavaScript eval function internally.  They set up a JavaScript context and use it to evaluate the code.  They also do not expand binding tokens into the code.  They replace those tokens with variable references, and define those variables in the JavaScript context to contain the values to which they resolve.  This means, among other things, that there is no exposure to code injection (for example, if a token expanded to some JavaScript code, that code would never be executed by the Synchro eval mechanism).</p>\r\n<p> </p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/205267778-data-binding/index.html"
    },
    {
      "id": 206058697,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/206058697-Navigation-Support.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/206058697-Navigation-Support",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 4,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2015-05-11T17:47:35Z",
      "updated_at": "2016-06-03T09:33:30Z",
      "name": "Navigation Support",
      "title": "Navigation Support",
      "body": "<p>Synchro provides the ability to implement any desired navigation scheme, while also providing built-in functionality that makes it very easy to support common navigation schemes with minimal application logic.</p>\r\n<h2>Basic Navigation</h2>\r\n<p>The base method used to navigate from one view to another is <code>Synchro.navigateTo</code>.</p>\r\n<h2>Navigation Using the Back Stack</h2>\r\n<p>Synchro also has support for a \"back stack\", which is a list of ancestor views that can easily be navigated back to from a child view (either directly, or indirectly). When you call<code>Synchro.pushAndNavigateTo</code>, the current view is pushed on to the back stack before navigating to the new view. The new view can then simply call <code>Synchro.pop</code> to navigate back to the calling page. If a page wants to navigate to an ancestor other than its immediate parent, it can call <code>Sychro.popTo</code> to search the back stack for the closest view matching the supplied path, then navigate to that view.</p>\r\n<h2>User \"Back\" handling</h2>\r\n<p>Many mobile devices have a \"back\" button that the user can press at any time. In addition, Synchro pages can feature a back navigation control element (platform dependent, but typically in the top menu/command bar). By default, a Synchro view will simply do a <code>Synchro.pop</code> in response to the user back action.</p>\r\n<p>If desired, a Synchro module can implement an OnBack handler to handle the back action. For example, if the goal was to have the back action navigate one or more levels up to a menu page, an <code>OnBack</code> handler could be supplied that does <code>Synchro.popTo()</code>.  The <code>OnBack</code> handler should return <code>true</code> if it handles the back navigation, otherwise the system will take the default back navigation action - <code>Synchro.pop()</code>.</p>\r\n<h2>Advanced Back Stack Navigation</h2>\r\n<p>It is sometimes useful to navigate to an intermediate view, where that view is inappropriate to see again when navigating back. For example, say that a user is on \"menu\" view and attempts navigate to a \"resource\" view, but your app determines that it needs to authenticate the user or collect some additional information using an \"intermediate\" view before proceeding to the resource view. Once the user is on the resource view and they hit back, you don't want them to return to the intermediate authentication/data collection view, but rather to its parent menu view. There are two ways to accomplish this using back stack navigation:</p>\r\n<p>First, you could navigate from the intermediate view to the resource view using<code>Synchro.navigateTo</code> instead of <code>Synchro.pushAndNavigateTo</code>. In this way, the intermediate view will not be pushed on to the back stack, such that when the resource page calls<code>Synchro.pop</code>, it will return to the menu view (assuming that <code>Synchro.pushAndNavigateTo</code>was used to get from the menu view to the intermediate view, so that the menu view is on the back stack).</p>\r\n<p>Second, you could navigate from the intermediate view to the resource view using<code>Synchro.pushAndNavigateTo</code>, pushing the intermediate view on to the back stack. You could them implement a custom OnBack handler on the resource view that did a<code>Synchro.popTo</code>, specifying the menu as the target (such that it would navigate back to the menu view, skipping the intermediate view).</p>\r\n<p>In this simple case, either solution would be satisfactory. There may be more advanced cases where one approach works better than the other. For instance, if there was more than one way to arrive at the resource view, the first approach of just not putting the intermediate view on the back stack is preferable (so that pop navigation can be used to travel back whichever path was used to get to the resource view). Alternatively, if there were some cases where you did want to navigate back to the intermediate page and others where you did not, then putting it on the back stack and skipping over it using popTo only when appropriate is the correct solution.</p>\r\n<h2>Custom Navigation</h2>\r\n<p>It is possible to use a combination of <code>Synchro.navigateTo</code> and custom OnBack handlers to implement completely custom navigation schemes that make no use of the back stack.  With this kind of navigation scheme, you may also set a View element called \"back\" to true or false to indicate whether a back navigation element should be shown.</p>\r\n<h2>Preserving State on Navigation</h2>\r\n<p>It is sometimes necessary to store some view state when navigating away from a view, so that the view can be accurately and quickly restored when navigating back to it from a descendant view. There is a built-in mechanism to support this when using back stack navigation. You may supply a <code>state</code> value as the last parameter to<code>Synchro.pushAndNavigateTo</code>, then when and if the view is navigated back to, that value will be passed back as the last parameter to InitializeViewModel.</p>\r\n<p>For example, lets assume we have an item list view that has to load a list of items from a remote resource, possibly a database or a REST API, and that that activity is moderately time consuming (a second or two), such that we would not want to reload the item list when navigating back, presenting the user with a delay that they do not expect. When navigating to a child detail view, we would supply the item list as our state value. When/if the list view is navigated back to, that state value will be passed back to the list view in InitializeViewModel. If the state value is present, we can populate our user interface immediately from the state value, and if not, we can load the item list normally.</p>\r\n<p>Because any <code>state</code> value must be maintained as part of the user session, it is recommended that it be used only when necessary, and only to store the necessary data when using it. The serialized size of the data maintained using the state mechanism impacts both the session storage capacity requirements of the system, as well as overall system performance (due to reading/writing the session per transaction).</p>\r\n<p>It would of course be possible to implement a comparable solution if back stack navigation is not being used, such as by writing the state data directly to the session when navigating away and then reading it back from the session upon return. The same caveats would apply, and in addition, care must be given to ensure that no extraneous data is left behind in the session.</p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/206058697-navigation-support/index.html"
    },
    {
      "id": 206058467,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/206058467-Asynchronous-Processing.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/206058467-Asynchronous-Processing",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 5,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2015-05-11T17:37:41Z",
      "updated_at": "2016-06-03T17:11:15Z",
      "name": "Asynchronous Processing",
      "title": "Asynchronous Processing",
      "body": "<p>When Synchro calls one of your module entry points, the expectation is that you will complete your logic as quickly as possible without blocking, and in no case take more than 100 milliseconds. This is necessary both for the client interface to appear responsive and to avoid blocking Node from processing other requests.</p>\r\n<p>If you need to perform long-running / asynchronous processing, you will need to do so using <code>Synchro.yieldAwaitable()</code> and associated helpers as provided below. Using <code>yieldAwaitable</code> will both streamline your module design and automatically share the session and view model state between potentially multiple processors running against a given module instance. </p>\r\n<h2>Synchro Asynchronous Processing with Generators/Yield+CO</h2>\r\n<div>There are a number of different approaches to doing asynchronous processing in Node.  A true async/await solution for Node is coming in the future, but until then we can do better than the de facto standard of “callback hell”.  For a good overview of possible approaches to asynchronous processing in Node, see <a href=\"https://thomashunter.name/blog/the-long-road-to-asyncawait-in-javascript/\">this article</a>.</div>\r\n<div> </div>\r\n<div>Synchro provides a mechanism for asynchronous processing in user code that is based on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/function*\">generator functions</a> and the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/yield\">yield</a> keyword, combined with the <a href=\"https://www.npmjs.com/package/co\">co library</a>.  Generator functions and yield are available in contemporary versions of Node (they have been fully supported since v0.12.0).  The co library is stable and widely used (820+ npm libraries depend on co as of early 2016). </div>\r\n<div> </div>\r\n<div>A generator function is a special kind of function which can be exited and later re-entered, and is most commonly used to implement asynchronous operations.  A generator function is declared by placing an asterisk after the “function” keyword in the function declaration.  The “yield\" keyword may be used inside of a generator function, allowing asynchronous processing of a variety of objects or functions.  Since Synchro use the co library wrapper to call all user code, a generator function in Synchro user code may yield anything that <a href=\"https://www.npmjs.com/package/co#yieldables\">co considers yieldable</a> (including thunks to async callbacks, Promises, other generator functions, and more).  </div>\r\n<div> </div>\r\n<div>This is what a generator function looks like:</div>\r\n<div> </div>\r\n<pre><code>function * doStuffAwaitable (param) // &lt;- Generator\r\n{\r\n    var foo = yield doFirstThingAwaitable(); // &lt;- yield\r\n    doSecondThing();\r\n    return yield doThirdThingAwaitable(foo, param); // &lt;- yield\r\n}</code></pre>\r\n<div> </div>\r\n<div>All Synchro module entry points, including application hook functions, can be implemented as either plain functions or as  generator functions.  If the user code provided at the entry point will yield at any point, then it must be implemented as a generator function. </div>\r\n<h2>Concurrent Request Processing and Synchronization</h2>\r\n<div>There are two aspects of asynchronous processing that are important to understand and handle appropriately in any Node application, including a Synchro app.  The first is “flow of control”, which is the mechanism used to execute the instructions of processing functions and to report completion and any results to the system.  The generator/yield+co support outlined above is how we deal with flow of control in Synchro, allowing you to enter your function at the top and exit at the bottom, with the ability to yield asynchronously in between as needed, without having to worry about callbacks or any other signaling.</div>\r\n<div> </div>\r\n<div>The other issue is “concurrent request processing”, which is the mechanism of dealing with the prospect of other requests being processed while your request is yielding to an asynchronous operation.  Node is single-threaded with respect to request processing.  As long as you do not yield, you can guarantee that no other request is being processed while your request is being processed.  But as soon as you perform an asynchronous operation in your processing, then you have to account for the fact that other requests could have been processed while your request was waiting, and those other requests could have changed the state of the system (this is true irrespective of the async approach being used). </div>\r\n<div> </div>\r\n<div>In Synchro, we provide helper functions for asynchronous processing that deal with synchronizing access to the system state (namely the session and the viewModel).  When you call <code>yieldAwaitable</code> or <code>interimUpdateAwaitable</code>, those functions write the session and viewModel state before yielding, and recover them after yielding, meaning that any requests being processed while your request is waiting will see any changes your request had made to the session or viewModel before it yielded, and that your request will in turn see any changes made by other requests when control is returned.  This can be very useful, for example in a case where you are doing a long running operation and the user can elect to cancel the operation (after each stage of the operation you can check the viewModel to see if another request indicated that the operation should terminate).  A major caveat related to this is that you should not write to the session or viewModel inside of any asynchronous processing code (anything processed inside of a call to <code>yieldAwaitable</code>), as those changes will be lost when control is returned from the Synchro async helper functions.</div>\r\n<div>\r\n<h2>Asynchronous Processing using Synchro Helper Functions</h2>\r\n</div>\r\n<div>To implement asynchronous processing in your Synchro user code you must implement your entry point as a generator function and you must then yield using <code>yieldAwaitable</code>.  You may provide interim/partial updates to the client during asynchronous processing using <code>interimUpdateAwaitable</code>.  Lastly, you may use <code>isActiveInstance</code> during asynchronous processing to determine whether the user has navigated away from your module instance (and you should stop any ongoing operation).  You must use the \"yield\" keyword when calling any Synchro helper function implemented as a generator, which are those functions with the suffix \"Awaitable\".</div>\r\n<div> </div>\r\n<div>Detailed documention for these and other functions can be found in <a href=\"/hc/articles/206058127\">Built-in Helper Functions</a>. </div>\r\n<h3>Synchro.yieldAwaitable</h3>\r\n<pre><code>yield Synchro.yieldAwaitable(context, yieldable)\r\n</code></pre>\r\n<p><code>yieldAwaitable</code> allows for asynchronous yielding to anything that the <a href=\"https://www.npmjs.com/package/co#yieldables\">co library considers yieldable</a>, including Promises, generator functions, etc.  </p>\r\n<p>When you yield using <code>yieldAwaitable</code> you will pass the current context and the yieldable.  Any result produced by the yieldable will be returned by <code>yieldAwaitable</code>.  Any error produced by the yieldable will be thrown from <code>yieldAwaitable</code>.</p>\r\n<p>One of the most common uses of <code>yieldAwaitable</code> is to make asynchronous calls to functions implemented using <a href=\"http://thenodeway.io/posts/understanding-error-first-callbacks/\">Node-style async completion callbacks</a>. That is to say that it can be used to call any async function that takes as its last argument a completion callback function, where that callback function takes two parameters - an error and a result.  In order to call a Node-style async callback using <code>yieldAwaitable</code>, you must wrap your async function call in a thunk (a function that takes a single parameter, the callback, and calls your async code in its body). </p>\r\n<p>Below is an example of wrapping a simple async function with a thunk and yielding to it.  The async function will, after a specified delay, simulate a random dice roll of a die with the indicated number of sides:</p>\r\n<pre>function slowDiceRollAsync(sides, delay, callback) // Standard Node-style async function\r\n{\r\n    setTimeout(function()\r\n    {\r\n        var dieValue = Math.floor((Math.random() * sides) + 1);\r\n        callback(null, dieValue);\r\n    }, \r\n    delay);\r\n}\r\n</pre>\r\n<p>And below is how you might call that from a Synchro command: <code></code></p>\r\n<pre>exports.Commands = \r\n{\r\n    onRoll: function * (context, session, viewModel, params) // &lt;- Generator function\r\n    {\r\n        // Roll a 6-sided die with a 100ms delay...\r\n        //\r\n        viewModel.roll = yield Synchro.yieldAwaitable(context, function(cb){ slowDiceRollAsync(100, 6, cb) }); // &lt;- yield\r\n    }\r\n}</pre>\r\n<p>Below is another example of yielding to a Promise.  It includes a simple function that produces a Promise that, when resolved, will after a specified delay simulate a random dice roll of a die with the indicated number of sides:</p>\r\n<pre>function slowDiceRollPromise(sides, delay) // Function that returns a Promise\r\n{<br />    return new Promise(function(resolve) <br />    {<br />        setTimeout(function() <br />        {<br />            var dieValue = Math.floor((Math.random() * sides) + 1);<br />            resolve(dieValue);<br />        }, <br />        delay);<br />    });<br />}\r\n</pre>\r\n<p>And below is how you might call that from a Synchro command:<code></code></p>\r\n<pre>exports.Commands = \r\n{\r\n    onRoll: function * (context, session, viewModel, params) // &lt;- Generator function\r\n    {\r\n        // Roll a 6-sided die with a 100ms delay...\r\n        //\r\n        viewModel.roll = yield Synchro.yieldAwaitable(context, slowDiceRollPromise(100, 6)); // &lt;- yield\r\n    }\r\n}</pre>\r\n<h3>Synchro.interimUpdateAwaitable</h3>\r\n<pre><code>yield Synchro.interimUpdateAwaitable(context)\r\n</code></pre>\r\n<p><code>interimUpdateAwaitable</code> provides a partial viewModel update back to the client, while allowing the server module to continue processing. It is important to call <code>interimUpdateAwaitable</code> before invoking an async or long running call using <code>yieldAwaitable</code> if there are any ViewModel changes that need to be sent back to the client before the async processing completes (for example, if an indicator in the ViewModel is set to communicate the waiting state back to the user's View).</p>\r\n<h3>Synchro.isActiveInstance</h3>\r\n<pre><code>Synchro.isActiveInstance(context)\r\n</code></pre>\r\n<p><code>isActiveInstance</code> indicates whether the page/instance being processed is the active instance. If it returns <code>false</code>, that means that the instance that the calling code is processing is not current (has been navigated away from). In this case, no viewModel updates will be sent to the client.</p>\r\n<p>If your async processing is incremental, such that you are calling <code>yieldAwaitable</code> in a loop, then you should check <code>isActiveInstance</code> each time through the loop, and if it returns false, you should abandon the loop (as any further processing on behalf of the obsolete page/instance is not useful)</p>\r\n<p>Following is an example of a simple asynchronous loop demonstrating these principles:</p>\r\n<pre><code>while (Synchro.isActiveInstance(context) &amp;&amp; !viewModel.cancelled)\r\n{\r\n    yield Synchro.interimUpdateAwaitable(context);\r\n    yield Synchro.yieldAwaitable(context, someYieldable);\r\n    viewModel.progress++;\r\n} \r\n</code></pre>\r\n<h2>Delayed ViewModel Initialization</h2>\r\n<p>There is one very common case where modules implement async or long-running processing, which is during initialization of the view model. In order to make this common task easy, and to make up for the fact that you cannot call <code>interimUpdate</code> before the view model has been initialized, we have provided a mechanism for doing delayed viewmodel intialization.</p>\r\n<p>If a page needs to perform an asynchronous or long-running task when it is loaded, it may establish an initial view model in <code>InitializeViewModel</code> and then further populate that view model asynchronously in <code>LoadViewModel</code>. The initial view model and corresponding view will be returned to the client at the completion of<code>InitializeViewModel</code> (and subsequent view rendering), so that the client can render the initial user interface. Then <code>LoadViewModel</code> will be called to complete subsequent view model loading/population. It is common to set some kind of <em>waiting</em> indicator in the initial view model, then clear that when the final view model is returned.</p>\r\n<h2>Putting it all together</h2>\r\n<p>The Synchro sample <strong>countdown</strong> illustrates all of these principles in one fairly straighforward module:</p>\r\n<pre>// Countdown page\r\n//\r\nexports.View =\r\n{\r\n    title: \"Countdown\",\r\n    elements: \r\n    [\r\n        { control: \"stackpanel\", orientation: \"Horizontal\", visibility: \"{isLoading}\", contents: [\r\n            { control: \"progressring\", height: 50, width: 50, value: \"{isLoading}\", verticalAlignment: \"Center\" },\r\n            { control: \"text\", value: \"Loading...\", color: \"Red\", fontsize: 24, verticalAlignment: \"Center\" },\r\n        ] },\r\n        { control: \"stackpanel\", orientation: \"Vertical\", visibility: \"{!isLoading}\", contents: [\r\n            { control: \"text\", value: \"Count: {count}\", color: \"Green\", font: { size: 24, bold: true } },\r\n            { control: \"progressbar\", value: \"{count}\", minimum: 0, maximum: 10, width: 300 },\r\n            { control: \"button\", caption: \"Start Countdown\", binding: \"start\", visibility: \"{!isCounting}\" },\r\n            { control: \"button\", caption: \"Pause Countdown\", binding: \"stop\", visibility: \"{isCounting}\" },\r\n        ] }\r\n    ]\r\n}\r\n\r\nexports.InitializeViewModel = function(context, session)\r\n{\r\n    var viewModel =\r\n    {\r\n        count: 0,\r\n        isLoading: true,\r\n        isCounting: false\r\n    }\r\n    return viewModel;\r\n}\r\n\r\nexports.LoadViewModel = function * (context, session, viewModel) // &lt;- Generator function\r\n{\r\n    yield Synchro.yieldAwaitable(context, function(cb){ waitInterval(4000, cb) }); // &lt;- yield  \r\n    viewModel.count = 10;\r\n    viewModel.isLoading = false;\r\n}\r\n\r\nfunction waitInterval(intervalMillis, callback)\r\n{\r\n    setTimeout(function(){callback()}, intervalMillis);\r\n}\r\n\r\nexports.Commands = \r\n{\r\n    start: function * (context, session, viewModel, params) // &lt;- Generator function\r\n    {\r\n        viewModel.isCounting = true;\r\n\r\n        while (Synchro.isActiveInstance(context) &amp;&amp; viewModel.isCounting &amp;&amp; (viewModel.count &gt; 0))\r\n        {\r\n            yield Synchro.yieldAwaitable(context, funciton(cb){ waitInterval(1000, cb) }); // &lt;- yield\r\n            if (viewModel.isCounting)\r\n            {\r\n                viewModel.count--;            \r\n                yield Synchro.interimUpdateAwaitable(context); // &lt;- yield               \r\n            }\r\n        }\r\n\r\n        viewModel.isCounting = false;\r\n    },\r\n    stop: function(context, session, viewModel, params)\r\n    {\r\n        viewModel.isCounting = false;\r\n    },\r\n}</pre>\r\n<p>Note that this module is implemented such that the user may hit a button that invokes the <strong>stop</strong> command while the async loop is running. This can be accomplished because our loop in the <strong>start</strong> command handler is yielding to Node such that the <strong>stop</strong> command can be executed during the loop, and further, since the Synchro async helpers insure proper sharing of the instance (view model) state, both commands can access it.</p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/206058467-asynchronous-processing/index.html"
    },
    {
      "id": 215438528,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/215438528-Application-Hooks.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/215438528-Application-Hooks",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 6,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2016-01-05T01:51:00Z",
      "updated_at": "2016-01-21T22:16:35Z",
      "name": "Application Hooks",
      "title": "Application Hooks",
      "body": "<p>Application hooks provide a mechanism for supplying code that runs before or after a defined <a href=\"/hc/en-us/articles/205668357\">module entry point</a> is called, and do this for every page (module/route) in an application, for the life of the application.</p>\r\n<p>Hooks can be useful for things like ensuring authentication status on every page, or applying app-wide styles to views on every page.</p>\r\n<p>While it is possible to implement hooks as asynchronous generator functions (see: <a href=\"/hc/en-us/articles/206058467\">Asynchronous Processing</a>), great care should be exercised in doing so since the hooks are called for every page.</p>\r\n<h3>Supported Application Hook Functions</h3>\r\n<p>An application hook is a module that implements one or more of the defined application hook functions, listed below.  The hook functions have a prefix of \"Before\" or \"After\" to indicate whether they are called before or after the hooked function.  The hook functions are called with a route and routeModule, followed by the same set of parameters passed to the hooked function. </p>\r\n<p>Note: The application hook functions will be called whether or not the \"hooked\" function is implemented in the current module.</p>\r\n<pre><code>BeforeInitializeViewModel (route, routeModule, context, session, params, state)</code></pre>\r\n<pre><code>AfterInitializeViewModel (route, routeModule, context, session, params, state, viewModel)</code></pre>\r\n<pre><code>BeforeInitializeView (route, routeModule, context, session, viewModel, view, metrics, isViewMetricsUpdate)</code></pre>\r\n<pre><code>AfterInitializeView (route, routeModule, context, session, viewModel, view, metrics, isViewMetricsUpdate)</code></pre>\r\n<pre><code>BeforeLoadViewModel (route, routeModule, context, session, viewModel)</code></pre>\r\n<pre><code>AfterLoadViewModel (route, routeModule, context, session, viewModel)</code></pre>\r\n<pre><code>BeforeOnViewMetricsChange (route, routeModule, context, session, viewModel, metrics)</code></pre>\r\n<pre><code>AfterOnViewMetricsChange (route, routeModule, context, session, viewModel, metrics)</code></pre>\r\n<pre><code>BeforeOnViewModelChange (route, routeModule, context, session, viewModel, source, changes)</code></pre>\r\n<pre><code>AfterOnViewModelChange (route, routeModule, context, session, viewModel, source, changes)</code></pre>\r\n<pre><code>BeforeOnBack (route, routeModule, context, session, viewModel)</code></pre>\r\n<pre><code>AfterOnBack (route, routeModule, context, session, viewModel)</code></pre>\r\n<pre><code>BeforeCommand (route, routeModule, command, context, session, viewModel, parameters)</code></pre>\r\n<pre><code>AfterCommand (route, routeModule, command, context, session, viewModel, parameters)</code></pre>\r\n<h3>Installing Application Hooks</h3>\r\n<p>Application hooks are installed via the package.json file for the application, in the \"hooks\" attribute.  The \"hooks\" attribute can be set to the module name of the hook, or if more than one hook is installed, an array of module names.</p>\r\n<pre><code>{\r\n    \"name\": \"synchro-samples\",\r\n    \"version\": \"x.x.x\",     \r\n    \"description\": \"Synchro API Samples\",\r\n    \"main\": \"menu\",\r\n    \"private\": true,\r\n    \"engines\": { \"synchro\": \"*\" },\r\n    \"hooks\": [ \"somehook\", \"lib/otherhook\" ]\r\n}</code></pre>\r\n<p>If multiple application hooks are installed, they are called in the order they are specified for all \"Before\" hook functions, and in the reverse order for all \"After\" hook functions.</p>\r\n<h3>Sample Hook</h3>\r\n<p>Following is an application hook that implements every hook function and just logs that it got called:</p>\r\n<pre><code>// Logging Hook Example\r\n//\r\n// This module illustrates the implementation of each supported application hook function, where each of the \r\n// hooks simply logs some information about the hook to the console when it is called.\r\n//\r\n\r\nexports.BeforeInitializeViewModel = function (route, routeModule, context, session, params, state)\r\n{\r\n    console.log(\"BeforeInitializeViewModel - route: %s\", route);\r\n}\r\n\r\nexports.AfterInitializeViewModel = function(route, routeModule, context, session, params, state, viewModel)\r\n{\r\n    console.log(\"AfterInitializeViewModel - route: %s, viewModel: %s\", route, JSON.stringify(viewModel, null, 4));\r\n}\r\n\r\nexports.BeforeInitializeView = function (route, routeModule, context, session, viewModel, view, metrics, isViewMetricsUpdate)\r\n{\r\n    console.log(\"BeforeInitializeView - route: %s\", route);\r\n}\r\n\r\nexports.AfterInitializeView = function (route, routeModule, context, session, viewModel, view, metrics, isViewMetricsUpdate)\r\n{\r\n    console.log(\"AfterInitializeView - route: %s, view: %s\", route, JSON.stringify(view, null, 4));\r\n}\r\n\r\nexports.BeforeLoadViewModel = function (route, routeModule, context, session, viewModel)\r\n{\r\n    console.log(\"BeforeLoadViewModel - route: %s, viewModel: %s\", route, JSON.stringify(viewModel, null, 4));\r\n}\r\n\r\nexports.AfterLoadViewModel = function (route, routeModule, context, session, viewModel)\r\n{\r\n    console.log(\"AfterLoadViewModel - route: %s, viewModel: %s\", route, JSON.stringify(viewModel, null, 4));\r\n}\r\n\r\nexports.BeforeOnViewMetricsChange = function (route, routeModule, context, session, viewModel, metrics)\r\n{\r\n    console.log(\"BeforeOnViewMetricsChange - route: %s, metrics: %s\", route, JSON.stringify(metrics, null, 4));\r\n}\r\n\r\nexports.AfterOnViewMetricsChange = function (route, routeModule, context, session, viewModel, metrics)\r\n{\r\n    console.log(\"AfterOnViewMetricsChange - route: %s, metrics: %s\", route, JSON.stringify(metrics, null, 4));\r\n}\r\n\r\nexports.BeforeOnViewModelChange = function (route, routeModule, context, session, viewModel, source, changes)\r\n{\r\n    console.log(\"BeforeOnViewModelChange - route: %s, source: %s\", route, source);\r\n}\r\n\r\nexports.AfterOnViewModelChange = function (route, routeModule, context, session, viewModel, source, changes)\r\n{\r\n    console.log(\"AfterOnViewModelChange - route: %s, source: %s\", route, source);\r\n}\r\n\r\nexports.BeforeOnBack = function (route, routeModule, context, session, viewModel)\r\n{\r\n    console.log(\"BeforeOnBack - route: %s\", route);\r\n}\r\n\r\nexports.AfterOnBack = function (route, routeModule, context, session, viewModel)\r\n{\r\n    console.log(\"AfterOnBack - route: %s\", route);\r\n}\r\n\r\nexports.BeforeCommand = function (route, routeModule, command, context, session, viewModel, parameters)\r\n{\r\n    console.log(\"BeforeCommand - route: %s, command: %s\", route, command);\r\n}\r\n\r\nexports.AfterCommand = function (route, routeModule, command, context, session, viewModel, parameters)\r\n{\r\n    console.log(\"AfterCommand - route: %s, command: %s\", route, command);\r\n}</code></pre>\r\n<p> </p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/215438528-application-hooks/index.html"
    },
    {
      "id": 205267858,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205267858-Device-and-View-Metrics.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205267858-Device-and-View-Metrics",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 7,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2015-05-11T17:39:31Z",
      "updated_at": "2015-12-04T07:37:04Z",
      "name": "Device and View Metrics",
      "title": "Device and View Metrics",
      "body": "<p>Synchro provides both device and view metrics. These metrics are provided in a metrics object that is passed to certain module callbacks, such as <code>InitializeView</code> and<code>OnViewMetricsChange</code>, and which can be retrieved at any time by calling<code>Synchro.getMetrics(context)</code>. The metrics object contains two members, <code>DeviceMetrics</code>and <code>ViewMetrics</code>, as described below:</p>\r\n<h2>Device Metrics</h2>\r\n<p>Device metrics describe characteristics of the physical device that is connecting to Synchro. It should be noted that device metrics do not change during a session (or for a given device).</p>\r\n<p>The height and width values in device metrics are based on the natural orientation of the device, and will not change when the device is rotated (for current height/width, see view metrics below).</p>\r\n<p>The following device metrics are provided:</p>\r\n<ul>\r\n<li><code>clientName</code> - e.g. Synchro Explorer or your custom app name</li>\r\n<li><code>clientVersion</code> - in x.x.x format</li>\r\n<li><code>os</code> - Windows, WinPhone, Android, iOS</li>\r\n<li><code>osName</code></li>\r\n<li><code>deviceName</code></li>\r\n<li><code>deviceType</code> - Phone, Tablet</li>\r\n<li><code>deviceClass</code> - Phone, Phablet, MiniTablet, Tablet</li>\r\n<li><code>naturalOrientation</code> - Portrait, Landscape</li>\r\n<li><code>widthUnits</code></li>\r\n<li><code>heightUnits</code></li>\r\n<li><code>widthDeviceUnits</code></li>\r\n<li><code>heightDeviceUnits</code></li>\r\n<li><code>deviceScalingFactor</code></li>\r\n<li><code>scalingFactor</code></li>\r\n<li><code>widthInches</code></li>\r\n<li><code>heightInches</code></li>\r\n</ul>\r\n<h2>View Metrics</h2>\r\n<p>View metrics describe the current state of the device and the viewport in which Synchro is rendered. View metrics change whenever the device state or Synchro application viewport change, for example, when the orientation of the device changes, or when a Windows 8 application changes mode (between FullScreen, Snapped, and Filled).</p>\r\n<p>The following view metrics are provided:</p>\r\n<ul>\r\n<li><code>orientation</code> - Portrait, Landscape (current orientation of the device)</li>\r\n<li><code>widthUnits</code></li>\r\n<li><code>heightUnits</code></li>\r\n<li><code>widthInches</code></li>\r\n<li><code>heightInches</code></li>\r\n</ul>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/205267858-device-and-view-metrics/index.html"
    },
    {
      "id": 206058607,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/206058607-Layout-Filtering.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/206058607-Layout-Filtering",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 8,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2015-05-11T17:45:21Z",
      "updated_at": "2015-05-11T17:45:21Z",
      "name": "Layout Filtering",
      "title": "Layout Filtering",
      "body": "<h2>Filtering Overview</h2>\r\n<p>While Synchro applications strive to run well with a single view on all platforms, there are cases where it is appropriate, even necessary, to customize the actual view definition for a page/screen. Layout filtering is the mechanism that provides this support.</p>\r\n<p>Layout filtering pre-processes the view for a given application page or screen, filtering the elements that apply based on the current device metrics, view metrics, or view model, and then passes the resulting view to the mobile client. The most common filters are based on device metrics such as the client operating system, device type, or screen size, and view metrics, most commonly the current orientation.</p>\r\n<h2>Filtering Caveats</h2>\r\n<p>There are many tools and techniques for flexible layouts in Synchro, and it will very often be the case that highly flexible layouts that adapt well to different device sizes and orientations can be achieved without layout filtering.</p>\r\n<p>As just one example, if you had a page that primarily consisted of a list of items, where you wanted to display details of the selected item next to the list, but only when in portrait mode and only on wide screen devices, you could compute the desired visibility of the details control container, store that in your view model, and then data-bind that value to the visibility attribute of the details control container. The layout would then adjust automatically (even responding to device rotation), with no layout filtering required. If however, you wanted the list to be a no-select list with a bound command to launch a separate details page in one mode, and a single-select list with the current selection data-bound such that it drove the details display on the same page in the other mode, you would need layout filtering.</p>\r\n<p>Layouts that change due to layout filtering will cause the client to re-render the layout, which may result in a slight delay and/or may lose some display state when switching (especially when switching back and forth). While these visual artifacts are fairly minor, they are best avoided when possible.</p>\r\n<h2>Element Filtering</h2>\r\n<p>Any view element may contain a filter specifying criteria for inclusion of that element in the final rendered view. If the filter criteria is met, the element is included, and if not, it is excluded. In either case, the filter specification itself is removed from the element when the final view is rendered.</p>\r\n<p>A filter consists of a value specification and a qualifier. The value specification may use one of the following value domains as its attribute:</p>\r\n<ul>\r\n<li><code>deviceMetric</code></li>\r\n<li><code>viewMetric</code></li>\r\n<li><code>viewModel</code></li>\r\n</ul>\r\n<p>The contents of the value specification attribute should be an appropriate device metric, view metric, or view model member. Please refer to the complete list of <a class=\"internal present\" href=\"https://github.com/SynchroLabs/SynchroServer/wiki/Device-and-View-Metrics\">Device and View Metrics</a> for more details on the values that you may use for filtering in those domains.</p>\r\n<p>The qualifier may use one of the following relationship specification values as its attribute:</p>\r\n<ul>\r\n<li><code>is</code> - equals value, or if value is array, is present in array</li>\r\n<li><code>isnot</code> - not equals value, or if value is array, is not present in array</li>\r\n<li><code>lt</code> - less than</li>\r\n<li><code>lte</code> - less than or equal to</li>\r\n<li><code>gt</code> - greater than</li>\r\n<li><code>gte</code> - greater than or equal to</li>\r\n</ul>\r\n<p>The contents of the qualifier attribute should be the value to be used for the comparison (or, in the case of <code>is</code> or <code>isnot</code>, optionally an array of values).</p>\r\n<p>One of each of these two attribute types are combined to form an object that is the contents of a <code>filter</code> attribute on the element to be filtered. For example:</p>\r\n<pre>{ control: \"text\", filter: { deviceMetric: \"deviceType\", is: \"Tablet\" }, value: \"Tablets Rule!\" },\r\n{ control: \"text\", filter: { viewMetric: \"widthInches\", gt: 6.0 }, value: \"Wide Screen\" },</pre>\r\n<p>More than one value may be provided when using the <code>is</code> (or <code>isnot</code>) relationship attribute, in which case the filter checks to see if the value matches (or does not match) any value in the attribute array, for example:</p>\r\n<pre>{ control: \"text\", filter: { deviceMetric: \"os\", is: [\"Windows\", \"WinPhone\"] }, value: \"Microsoft Rules!\" },</pre>\r\n<p>More than one filter can be specified on an element by using an array of filter objects, such as:</p>\r\n<pre>{ control: \"text\", filter: [{ deviceMetric: \"deviceType\", is: \"Tablet\" }, { viewMetric: \"widthInches\", gt: 6.0 }], value: \"Wide screen tablet\" },</pre>\r\n<p>In this case, the filters are treated as an <em>and</em> (all filters must pass in order for the element to be included in the rendered view).</p>\r\n<h2>Selection Filtering</h2>\r\n<p>It is possible to have a set of elements with mutually exclusive filters to guarantee that a single element is present in the final layout, such as:</p>\r\n<pre>{ control: \"text\", filter: { deviceMetric: \"deviceType\", is: \"Phone\" }, value: \"Device is Phone!\" },\r\n{ control: \"text\", filter: { deviceMetric: \"deviceType\", is: \"Tablet\" }, value: \"Device is Tablet!\" },</pre>\r\n<p>In addition, there are \"selector\" container elements that can assist in scenarios where more complex filtering logic is required.</p>\r\n<ul>\r\n<li><code>select: \"First\"</code> - This will select the first child element to replace this element (after removing any non-qualifying child elements based on filter criteria).</li>\r\n<li><code>select: \"All\"</code> - This will select all child elements to replace this element (typically used to group like elements)</li>\r\n</ul>\r\n<p>Note: select:First and element disqualification via filter criteria are performed first, for the entire layout, followed by select:All. This allows select:All elements to be contained in a select:First element (a common scenario).</p>\r\n<p>It is common for the final element in a select:First to have no filter criteria, and thus serve as the default (the element chosen when no other elements pass their filter criteria).</p>\r\n<p>Examples:</p>\r\n<pre>{ select: \"First\", contents: [\r\n    { control: \"text\", filter: { deviceMetric: \"os\", is: \"iOS\" }, value: \"iOS rules!\" },\r\n    { control: \"text\", filter: { deviceMetric: \"os\", is: \"Android\" }, value: \"Android rules!\" },\r\n    { control: \"text\", value: \"Some kind of Windows platform rules!\" },\r\n    ]},\r\n\r\n{ select: \"First\", contents: [\r\n    { control: \"text\", filter: { deviceMetric: \"os\", is: [\"Windows\", \"WinPhone\"] }, value: \"Microsoft OS\",  },\r\n    { control: \"text\", value: \"Non-Microsoft OS\" },\r\n    ]},</pre>\r\n<p>Here is a real-word example to include specific auxiliary control elements based on the OS (platform), using select:All child elements for grouping:</p>\r\n<pre>{ select: \"First\", contents: [\r\n    { select: \"All\", filter: { deviceMetric: \"os\", is: \"Windows\" }, contents: [\r\n        { control: \"commandBar.button\", text: \"Add\", icon: \"Add\", commandBar: \"Bottom\", commandType: \"Secondary\", binding: \"increment\" },\r\n        { control: \"commandBar.button\", text: \"Subtract\", icon: \"Remove\", commandBar: \"Bottom\", commandType: \"Secondary\", binding: \"decrement\"},\r\n        { control: \"commandBar.button\", text: \"Reset\", icon: \"Stop\", commandBar: \"Bottom\", binding: \"reset\" },\r\n        ]},\r\n    { select: \"All\", filter: { deviceMetric: \"os\", is: \"WinPhone\" }, contents: [\r\n        { control: \"appBar.button\", text: \"Add\", icon: \"add\",  binding: \"increment\" },\r\n        { control: \"appBar.button\", text: \"Subtract\", icon: \"minus\", binding: \"decrement\"},\r\n        { control: \"appBar.button\", text: \"Reset\", icon: \"refresh\", binding: \"reset\" },\r\n        ]},\r\n    { select: \"All\", filter: { deviceMetric: \"os\", is: \"Android\" }, contents: [\r\n        { control: \"actionBar.item\", text: \"Add\", binding: \"increment\" },\r\n        { control: \"actionBar.item\", text: \"Subtract\", binding: \"decrement\", enabled: \"{count}\" },\r\n        { control: \"actionBar.item\", text: \"Reset\", icon: \"ic_action_refresh\", showAsAction: \"IfRoom\", binding: \"reset\" },\r\n        ]},\r\n    { select: \"All\", filter: { deviceMetric: \"os\", is: \"iOS\" }, contents: [\r\n        { control: \"navBar.button\", systemItem: \"Trash\", binding: \"reset\", enabled: \"{count}\" },\r\n        { control: \"toolBar.button\", text: \"Add\", icon: \"plus-symbol-mini\", binding: \"increment\" },\r\n        { control: \"toolBar.button\", text: \"Subtract\", icon: \"minus-symbol-mini\", binding: \"decrement\" },\r\n        ]},\r\n    ]},</pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/206058607-layout-filtering/index.html"
    },
    {
      "id": 216081367,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/216081367-View-Styles.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/216081367-View-Styles",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 9,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2016-01-05T00:58:00Z",
      "updated_at": "2016-06-03T17:07:45Z",
      "name": "View Styles",
      "title": "View Styles",
      "body": "<p>View styles provide a way to separate the specification of some or all attributes of a View control from the control definition. This can be useful in a number of ways, including separating layout/style from content, and sharing styling across multiple controls.</p>\r\n<h3>Control Attributes</h3>\r\n<p>Each control in a View definition has a series of attributes that may be used to specify the look, feel, and function of the control.  Consider the example below:</p>\r\n<pre><code>{ control: \"text\", value: \"Hello\", fontsize: 12, color: \"Blue\" }</code></pre>\r\n<h3>Control Attributes using Data Binding</h3>\r\n<p>It is often useful to take advantage of data binding to populate the value of a control attribute from your ViewModel.  For example:</p>\r\n<pre><code>{ control: \"text\", value: \"{message}\", fontsize: 12, color: \"Blue\" }</code></pre>\r\n<p>Where your ViewModel contains:</p>\r\n<pre><code>{\r\n    message: \"Hello\"\r\n}</code></pre>\r\n<p>One of the benefits of the data binding approach is that whenever the bound value in the ViewModel changes, the control value is automatically updated.</p>\r\n<p>For more information, see <a href=\"/hc/en-us/articles/205267778\">data binding</a>.</p>\r\n<h3>Styles</h3>\r\n<p>By using styles (via the \"style\" attribute), it is possible to define a ViewModel object containing multiple attribute values and to direct a control to refer to that set of values when populating its attributes.  For example:</p>\r\n<pre><code>{ control: \"text\", style: \"textStyle\" }</code></pre>\r\n<p>Where your ViewModel contains:</p>\r\n<pre><code>{\r\n    textStyle: { value: \"Hello\", fontsize: 12, color: \"Blue\" }\r\n}</code></pre>\r\n<p>In this example, the control will look for an object called <em>textStyle</em> in the ViewModel, and will then look inside of <em>textStyle</em> for values corresponding to the name of each of the control's attributes.</p>\r\n<p>It should be noted that when a control uses an attribute value found in a style definition, it actually binds to that value (such that any subsequent changes to the value in the style will be reflected in the control automatically).  Using the style <em>textStyle</em> as above is equivalent to doing:</p>\r\n<pre><code>{ \r\n    control: \"text\",\r\n    value: \"{textStyle.value}\", fontsize: \"{textStyle.fontsize}\", color: \"{textStyle.color}\" \r\n}</code></pre>\r\n<p>In fact it would do the equivalent of that binding for every attribute supported by the text control for which a cooresponding value specification was present in the style definition.</p>\r\n<h3>Multiple Styles</h3>\r\n<p>Multiple styles can be indicated by separating them with commas.  If multiple styles are specified, the control will look for the style value corresponding to each of its attributes individually, starting with the first listed style and continuing with subsequent styles, until it finds one with a value corresponding the the specific attribute.</p>\r\n<p>A common use of multiple styles is to have one style that applies to all controls of a particular type, and then individual styles specific to each control.  Following is an example of using multiple styles in this way.</p>\r\n<pre><code>{ control: \"text\", style: \"labelStyle, textStyle\" },\r\n{ control: \"text\", style: \"nameStyle, textStyle\" }</code></pre>\r\n<p>Where the ViewModel contains:</p>\r\n<pre><code>{\r\n    textStyle: { fontsize: 12, color: \"Blue\" },\r\n    labelStyle: { value: \"Hello\" },\r\n    nameStyle: { value: \"Mr. Smith\", font: { bold: true } }\r\n}</code></pre>\r\n<p>Here both controls will use a font size of 12 and a color of blue. The label control will have a value of \"Hello\", and the name control will have a value of \"Mr. Smith\" and will be bold.</p>\r\n<h3>Combining Attribute Definition Approaches</h3>\r\n<p>It is possible (and common) to combine the use of styles, data bound attribute values, and static attribute values.  Consider the following example:</p>\r\n<pre><code>{ control: \"text\", style: \"textStyle\", value: \"Hello\" },\r\n{ control: \"text\", style: \"nameStyle, textStyle\", value: \"{name}\" }</code></pre>\r\n<p>Where the ViewModel contains:</p>\r\n<pre><code>{\r\n    // Styles\r\n    textStyle: { fontsize: 12, color: \"Blue\" },\r\n    nameStyle: { font: { bold: true } },\r\n    // Data\r\n    name: \"Mr. Smith\"\r\n}</code></pre>\r\n<p>It should be noted that an explicit attribute value will override any value specified in a style.</p>\r\n<p>In this example, both text controls will have the same font size and color values, as specified in the style <em>textStyle</em>.  The name control will also be bold, as specified in the style <em>nameStyle</em>.  The first control has the value attribute specified explicitly as the static value \"Hello\", whereas the second control value is specified explicitly as being bound to the \"name\" value from the ViewModel. </p>\r\n<h3>View Style Helper Module</h3>\r\n<p>There is a convenience module to help in implementing styles application-wide.  For more information, see <a href=\"/hc/en-us/articles/215439548\">View Style Helper</a>.</p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/216081367-view-styles/index.html"
    },
    {
      "id": 215439548,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/215439548-View-Style-Helper.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/215439548-View-Style-Helper",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 10,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2016-01-05T03:28:40Z",
      "updated_at": "2016-06-03T17:09:48Z",
      "name": "View Style Helper",
      "title": "View Style Helper",
      "body": "<p>Synchro provides a \"Style Helper\" module to assist in applying styles in your application.  </p>\r\n<p>You are certainly free to build a module like this yourself if the provided style helper module doesn't meet your needs (the style helper module is itself a standalone module - it does not rely on anything internal to Synchro).</p>\r\n<p>The Synchro Style Helper module does the following:</p>\r\n<ul>\r\n<li>Applies default styles to controls in your View based on control type</li>\r\n<li>Merges app default styles into your ViewModel</li>\r\n<li>Filters styles based on operating system</li>\r\n</ul>\r\n<h3>Applies Default Styles</h3>\r\n<p>If you want to provide styling for every control of a certain type it can get pretty cumbersome to specify the style on every instance of the control, like this:</p>\r\n<pre><code>{ control: \"text\", style: \"txtStyle\", value: \"Hello\" },\r\n{ control: \"text\", style: \"txtStyle\", value: \"World\" },\r\n{ control: \"button\", style: \"btnStyle\", caption: \"Submit\", binding: \"OnClick\" }</code></pre>\r\n<p>The Style Helper will automatically apply a style to each control based on the control type.</p>\r\n<h3>Merges App Default Styles</h3>\r\n<p>It is often useful to define a set of application-wide styles to use on every page of your app.  In order to use those styles on your controls, you need to move those styles to the ViewModel of the page.</p>\r\n<p>In addition, it may be the case that you want to override some of your application-wide styles on a given page.</p>\r\n<p>The Style Helper will merge only those application-wide styles that are actually referenced from the View on a page, and will merge them in such a way that any style values specified in the ViewModel will override corresponding application-wide style values.</p>\r\n<h3>Filters Styles Based on OS</h3>\r\n<p>It may be useful to have different style values for different operating systems.  The Style Helper module provides a mechanism for applying operating system filters to produce a clean set of styles for the current operating system.  There are two types operating system filters, <code>os_value</code> for selecting a single value, and <code>os_merge</code> to select a group of attribute values.</p>\r\n<p><code>os_value</code> selects the appropriate value from those listed and replaces itself with that value.</p>\r\n<p><code>os_merge</code> selects the appropriate set of attributes from those listed and replaces itself with that set of (zero or more) attributes.</p>\r\n<p>Following is an example of how these filters are used.</p>\r\n<pre><code>editStyle:\r\n{\r\n    fontsize: { os_value: { iOS: 9, Android: 10, Windows: 11, default: 12 } },\r\n    os_merge: \r\n    {\r\n        iOS: \r\n        {\r\n            color: \"Blue\"\r\n        },\r\n        Windows:\r\n        {\r\n            color: \"Blue\",\r\n            background: \"Black\"\r\n        },\r\n        default:\r\n        {\r\n            background: \"Green\"\r\n        }\r\n    }\r\n}</code></pre>\r\n<h3>Usage</h3>\r\n<p>Include the style helper:</p>\r\n<pre><code>var styleHelper = require(\"synchro-api/style-helper\");</code></pre>\r\n<p>Call the all-in-one helper function (passing your style mappings and default styles, if any):</p>\r\n<pre><code>exports.InitializeView = function(context, session, viewModel, view, metrics, isViewMetricsUpdate)\r\n{\r\n    console.log(\"Processing styles\");\r\n    styleHelper.processViewAndViewModelStyles(viewModel, view, metrics, appStyleMappings, appStyles);\r\n}</code></pre>\r\n<p>There are also functions provided to do each of the functions of the Style Helper individually:</p>\r\n<pre><code>addDefaultStylesToView (view, defaultStyleMapping)</code></pre>\r\n<p>Given a view, visit each control element, and if there is a default style mapping cooresponding to the control name, add the default style to the control (if any styles are defined on the control, add to end of list, else create new style attribute and set it to the default style). The passed-in view is modified in place.</p>\r\n<pre><code>mergeStyles (viewModel, appStyles, viewOrList)</code></pre>\r\n<p>Merges the provided app-level styles into the viewModel (in place). You may specify which of the provided styles are to be merged via with \"viewOrList\" parameter:</p>\r\n<ul>\r\n<li>If \"viewOrList\" is undefined (not provided in call) or null, all app styles will be merged.</li>\r\n<li>If \"viewOrList\" is an object (typically a View), then all styles referenced by the object will be merged.</li>\r\n<li>If \"viewOrList\" is an array, then the app styles matching elements of the array will be merged. If the array is empty, then of course no app styles will be merged.</li>\r\n</ul>\r\n<p>Individual settings for styles defined in the viewModel will override any corresponding app style settings.</p>\r\n<pre><code>filterStyles (viewModel, deviceMetrics)</code></pre>\r\n<p>Apply filters to the supplied viewModel (in place)<br /> </p>\r\n<h3>Applying Styles in an Application Hook</h3>\r\n<p>In practice, the best way to apply application-wide styles using the Style Helper is via an application hook.  In this way, the Style Helper will be called for you on each page automatically.  </p>\r\n<p>For more information on how application hooks work, see <a href=\"/hc/en-us/articles/215438528\">Application Hooks</a>.</p>\r\n<p>Below is an example of such a hook. </p>\r\n<pre><code>// App-wide Style Hook\r\n//\r\n// This module illustrates using application hook functionality to apply styles across an application.\r\n//\r\nvar styleHelper = require(\"synchro-api/style-helper\");\r\n\r\n// The mappings below define the default style to add to each control of the key type in the view.\r\n//\r\nvar appStyleMappings = \r\n{\r\n    \"button\": \"btnStyle\",\r\n    \"text\": \"txtStyle\"\r\n}\r\n\r\n// The \"app\" styles below will be merged in to any styles provided in the viewModel.  Only app styles that are actually \r\n// referenced from the view will be merged.  Also, the app styles are merged in such that any style values provided in the\r\n// viewModel will override the cooresponding app style.\r\n//\r\nvar appStyles = \r\n{\r\n    btnStyle:\r\n    {\r\n        color: \"CornflowerBlue\",\r\n        background: \"DarkSlateGray\",\r\n    },\r\n    txtStyle:\r\n    {\r\n        fontsize: 12\r\n    },\r\n    stackStyle:\r\n    {\r\n        orientation: \"Horizontal\"\r\n    },\r\n    editStyle:\r\n    {\r\n        // These aren't really meaningful style values - they're just included as an example of how platform filtering\r\n        // can be done on style values.\r\n        //\r\n        fontsize: { os_value: { iOS: 9, Android: 10, Windows: 11, default: 12 } },\r\n        os_merge: \r\n        {\r\n            iOS: \r\n            {\r\n                color: \"Blue\"\r\n            },\r\n            Windows:\r\n            {\r\n                color: \"Blue\",\r\n                background: \"Black\"\r\n            },\r\n            default:\r\n            {\r\n                background: \"Green\"\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexports.AfterInitializeView = function(route, routeModule, context, session, viewModel, view, metrics, isViewMetricsUpdate)\r\n{\r\n    console.log(\"Processing styles\");\r\n    styleHelper.processViewAndViewModelStyles(viewModel, view, metrics, appStyleMappings, appStyles);\r\n}</code></pre>\r\n<p> </p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/215439548-view-style-helper/index.html"
    },
    {
      "id": 206059187,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/206059187-Coordinate-System-and-Layout.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/206059187-Coordinate-System-and-Layout",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 11,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2015-05-11T18:20:25Z",
      "updated_at": "2015-05-11T18:22:19Z",
      "name": "Coordinate System and Layout",
      "title": "Coordinate System and Layout",
      "body": "<div class=\"markdown-body\">\r\n<h2>Basic Layout Concepts</h2>\r\n<h3>Synchro Units</h3>\r\n<p>Synchro uses a unified coordinate system across all devices and operating systems. This coordinate system is designed to make it easy to create layouts that work across a wide variety of devices, while maintaining a simple and efficient mapping to the underlying device coordinate system. When the term \"unit\" is used below, it refers to a Synchro unit.</p>\r\n<p>The Synchro coordinate system places 0, 0 in the upper left corner of the screen/page, with values increasing down and to the right.</p>\r\n<p>Phone-type devices are assumed to operate in portrait mode and will always be 480 units wide. The native aspect ratio will be preserved, so the height will range from 720 units (3.5\" iPhone/iPod) to 853 units (16:9 Android and Windows Phone devices).</p>\r\n<p>Tablet-type devices are assumed to operate in landscape mode and will always be 768 units tall. The native aspect ratio will be preserved, so the width will range from 1024 units (iPad/iPad Mini) to 1368 units (Surface).</p>\r\n<p>If controls overflow the screen size in either dimension, the page will automatically enable scrolling as appropriate so that all page contents may be accessed.</p>\r\n<p>Note that this unit system applies both to positioning of controls (though that will largely be handled automatically) as well as for sizing of controls. For example, a control that is 240 units wide will always be exactly half of the width of the screen on any phone-type device.</p>\r\n<h3>Layout Guidelines</h3>\r\n<p>If your application is primarily targeted at phone-type devices, you will generally be safe laying out your pages vertically assuming a width of 480 units. If it is important that all content be visible on the screen without scrolling, you should constrain the layout to 720 units tall. However, it is recommended that you let your pages overflow vertically as needed. This will meet the expectation of a phone user, who will expect to scroll the page up/down if not all controls are visible.</p>\r\n<p>If your application is primarily targeted at tablet-type devices, you have more flexibility in terms of layout. While the screen will be 768 units tall, some part of that space may be used for page navigation controls (app bar, caption, back button, etc), and the size of those elements will vary by platform. Layouts on these types of devices may overflow in either dimension, but it is preferable to only overflow in a single dimension.</p>\r\n<p>A common technique to take advantage of the full size of the screen/page is to use star sizing on your top level container controls, and potentially on their contents. This will allow these controls to take up the available space without causing an overflow.</p>\r\n<p>Many layouts can be made to function acceptably on both phone and tablet devices, but it will often be the case when fine-tuning your layouts that you will want to have a specific layout for each class of device. This can be accomplished very easily by using <a href=\"/hc/en-us/articles/206058607-Layout-Filtering\">Layout Filtering</a>.</p>\r\n<h2>Advanced Layout Concepts</h2>\r\n<p>It should be possible to create great looking, cross-platform screen/page layouts for most applications using the basic layout concepts and guidelines above. There may be special cases where the basic layout concepts are not sufficient, and where access to more detailed information about the device, the native coordinate system, pixel density, physical screen size, etc. may be required.</p>\r\n<h3>Device Metrics</h3>\r\n<p>Synchro provides the following device metrics related to the coordinate system, layout, and scaling:</p>\r\n<ul>\r\n<li><code>widthUnits</code></li>\r\n<li><code>heightUnits</code></li>\r\n<li><code>widthDeviceUnits</code></li>\r\n<li><code>heightDeviceUnits</code></li>\r\n<li><code>deviceScalingFactor</code></li>\r\n<li><code>scalingFactor</code></li>\r\n<li><code>widthInches</code></li>\r\n<li><code>heightInches</code></li>\r\n</ul>\r\n<h3>Device Units</h3>\r\n<p>Synchro exposes the concept of \"device units\" and provides the dimensions of the screen in device units via the <code>widthDeviceUnits</code> and <code>heightDeviceUnits</code> metrics. Device units represent the native underlying coordinate system of the device (a \"point\" in iOS, a \"view pixel\" in Windows Phone, an actual pixel in Android, etc). These units may themselves be scaled or transformed in some way by the device operating system to map to underlying display pixels (and will in fact be scaled on most contemporary devices, which will have displays with significantly higher actual native pixel resolutions).</p>\r\n<p>The <code>deviceScalingFactor</code> represents the ratio of physical pixels (typically) to device units.</p>\r\n<p>DeviceUnits * <code>deviceScalingFactor</code> = Pixels</p>\r\n<p>The <code>scalingFactor</code> represents the ratio of units to device units.</p>\r\n<p>Units * <code>scalingFactor</code> = DeviceUnits</p>\r\n<h3>Physical Measurement</h3>\r\n<p>Synchro exposes the physical dimensions of the device screen in inches via <code>widthInches</code>and <code>heightInches</code>.</p>\r\n<p>There may be special cases where the layout needs to be modified for devices that are physically very large or very small, and these metrics may be used to make that determination.</p>\r\n<p>There may also be special cases where controls need to be a certain physical size on screen. If you wanted to create a control that was exactly two inches wide on any device, for example, you could compute the width of that control in Synchro units as follows:</p>\r\n<p><code>widthUnits</code> / <code>widthInches</code> * 2</p>\r\n</div>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/206059187-coordinate-system-and-layout/index.html"
    },
    {
      "id": 205324388,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205324388-Control-Sizing-and-Layout.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205324388-Control-Sizing-and-Layout",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 12,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2015-05-13T16:16:31Z",
      "updated_at": "2016-05-20T18:44:13Z",
      "name": "Control Sizing and Layout",
      "title": "Control Sizing and Layout",
      "body": "<p>Every control is contained in a parent control and arranged by that parent control based on attributes of the contained child controls.  The following describes how controls are positioned within their parent controls.  </p>\r\n<p>The container controls in Synchro include: <a href=\"/hc/en-us/articles/205268008\">Border</a>, <a href=\"/hc/en-us/articles/205268018\">Canvas</a>, <a href=\"/hc/en-us/articles/205268118\">ListView (itemTemplate)</a>, <a href=\"/hc/en-us/articles/205268028\">ScrollView</a>, <a href=\"/hc/en-us/articles/205268038\">StackPanel</a>, and <a href=\"/hc/en-us/articles/206063937\">WrapPanel</a>.</p>\r\n<p><em>Note on the page level container: </em></p>\r\n<p>Each page has a top-level container that is sized based on the available page size automatically.  If your page definition contains multiple top-level controls, then the page container will be a vertical stackpanel created by Synchro to organize those controls.  If your page definition contains a single top-level control, then that control will be the page container.</p>\r\n<h3>Size</h3>\r\n<p>Every control has a size, as specified in its <code>height</code> and <code>width</code> attributes.</p>\r\n<ul>\r\n<li>If a dimension is unspecified, the control will size to the minimum size possible to contain its contents (\"wrap contents\" sizing), whether that contents is its own intrinsic contents, such as the text in a text control, or that contents consists of other controls, such as the child controls in a stack panel.</li>\r\n<li>If a dimension is specified as a numeric value, it will represent absolute Synchro units - see <a href=\"/hc/en-us/articles/206059187\">Coordinate System and Layout</a>.</li>\r\n<li>If a dimension is star (\"*\"), then the control will expand to fill its container (\"fill parent\" sizing).</li>\r\n</ul>\r\n<p>Note: A \"star-sized\" dimension will not cause a parent container to expand to accommodate content that could grow larger than the size the parent would otherwise be; it will only allocate an amount of space (limited to the size of the parent) that the child can use. This is true even if the parent size is unspecified (\"wrap content\").  A \"fill parent\" (star-size) child will not cause a \"wrap content\" parent to grow to contain it.</p>\r\n<h3>Alignment</h3>\r\n<p>Controls are aligned to their parents via these attributes:</p>\r\n<ul>\r\n<li><code>horizontalAlginment</code>: Left, Center, Right - default: Left</li>\r\n<li><code>verticalAlignment</code>: Top, Center, Bottom - default: Top</li>\r\n</ul>\r\n<p>Note: A star-size (fill parent) height/width can be considered the equivalent of a \"stretch\" alignment</p>\r\n<h3><a id=\"user-content-margins\" class=\"anchor\" href=\"https://github.com/SynchroLabs/SynchroServer/wiki/Control-Sizing-and-Layout#margins\"></a>Margins</h3>\r\n<p>Every control may have margins (in all four directions) as specified in the <code>margin</code> attribute and configured as a <a href=\"/hc/en-us/articles/205325108\">thickness</a>.  For example:</p>\r\n<pre><code>{ control: \"text\", value: \"Hello\", margin: 10 }</code></pre>\r\n<pre><code>{ control: \"text\", value: \"Hello\", margin: { top: 5, left: 10, bottom: 5, right: 10 }</code></pre>\r\n<p>By default, container controls have no margin, and non-container controls have a margin of 5 Synchro units in all directions.  You may override the margin in certain specified directions as desired:</p>\r\n<pre><code>{ control: \"text\", value: \"Hello\", margin: { left: 0 }</code></pre>\r\n<h3>Exceptions</h3>\r\n<p>The Canvas control positions explicitly sized items relative to its origin, and thus ignores any alignment or margins.  The ScrollView contains only a single item (the item to be scrolled), and also ignores alignment and margins by design.  Other container control types may have different or additional positioning behaviors - see the documentation for the container control in question for details.</p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/205324388-control-sizing-and-layout/index.html"
    },
    {
      "id": 205325108,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205325108-Thickness-Specification.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205325108-Thickness-Specification",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 13,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2015-05-13T16:43:37Z",
      "updated_at": "2015-05-13T16:43:37Z",
      "name": "Thickness Specification",
      "title": "Thickness Specification",
      "body": "<p>A thickness attribute can contain a single value to represent a desired thickness in units. Alternatively, it can specify one or more specific thickness attributes:</p>\r\n<ul>\r\n<li><code>top</code></li>\r\n<li><code>left</code></li>\r\n<li><code>bottom</code></li>\r\n<li><code>right</code></li>\r\n</ul>\r\n<p>For example, a border with a thickness of 5 units in all dimensions could be specified as<code>border: 5</code>, but could also be specified as <code>border: { top: 5, left: 5, bottom: 5, right: 5 }</code>. And of course, in the latter model, different values can be provided for each sub-attribute.</p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/205325108-thickness-specification/index.html"
    },
    {
      "id": 205325098,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205325098-Font-Specification.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205325098-Font-Specification",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 14,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2015-05-13T16:42:34Z",
      "updated_at": "2015-05-13T16:42:34Z",
      "name": "Font Specification",
      "title": "Font Specification",
      "body": "<h2>Supported attributes</h2>\r\n<ul>\r\n<li><code>face</code> = Mono, Serif, SanSerif</li>\r\n<li><code>size</code> = float (typographic points)</li>\r\n<li><code>bold</code> = true/false</li>\r\n<li><code>italic</code> = true/false</li>\r\n</ul>\r\n<pre><code>font: { face: \"Serif\", size: 12, bold: true, italic: false }</code></pre>\r\n<p>Note: If no \"face\" value is provided, the font face will be the default face for the control/element (which will vary by control/element type and by platform, and is usually what you want).</p>\r\n<p>The <code>fontsize</code> attribute is supported as convenience to any element that can contain a font specification (since it is common to specify only the size). The following are equivalent:</p>\r\n<pre><code>{ control: \"text\", value: \"Hello\", font: { size: 12 } )\r\n{ control: \"text\", value: \"Hello\", fontsize: 12 }\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/205325098-font-specification/index.html"
    },
    {
      "id": 205325048,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205325048-Color-Specification.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205325048-Color-Specification",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 15,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2015-05-13T16:37:45Z",
      "updated_at": "2016-04-09T06:38:25Z",
      "name": "Color Specification",
      "title": "Color Specification",
      "body": "<p>A color specification can contain the name of a CSS SilverLight color, as detailed here:</p>\r\n<ul>\r\n<li><a href=\"http://www.w3schools.com/colors/colors_names.asp\">http://www.w3schools.com/colors/colors_names.asp</a></li>\r\n</ul>\r\n<p>These color definitions are the same as the Microsoft XAML/SilverLight colors, as detailed here:</p>\r\n<ul>\r\n<li><a href=\"http://msdn.microsoft.com/en-us/library/system.windows.media.colors(v=vs.110).aspx\">http://msdn.microsoft.com/en-us/library/system.windows.media.colors(v=vs.110).aspx</a></li>\r\n</ul>\r\n<p>Note that the special name <code>\"Transparent\"</code> from the Microsoft color definitions is supported (though rarely needed).</p>\r\n<p>Alternatively, a color specification can define a color explicitly by prefixing a hexadecimal definition in the form AARRGGBB or RRGGBB with #.</p>\r\n<p>For example, the following will all result in the same color:</p>\r\n<pre><code>{ control: \"rectangle\", height: \"*\", width: \"*\", fill: \"CornflowerBlue\" }\r\n{ control: \"rectangle\", height: \"*\", width: \"*\", fill: \"#FF6495ED\" }\r\n{ control: \"rectangle\", height: \"*\", width: \"*\", fill: \"#6495ED\" }\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/205325048-color-specification/index.html"
    },
    {
      "id": 214657358,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/214657358-Component-Versioning.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/214657358-Component-Versioning",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 16,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2015-12-05T20:46:40Z",
      "updated_at": "2015-12-05T20:52:51Z",
      "name": "Component Versioning",
      "title": "Component Versioning",
      "body": "<p>A running Synchro solution employs three components: The Synchro server, the Synchro app, and the Synchro mobile client.  Each of these components interacts with other components and may have expectations about the protocol and level of service offered by those components.</p>\r\n<p>For example, a Synchro app may use certain controls, and it needs to be able to confirm that the client version is sufficient to supply those controls.  Or the Synchro server may expect that the Synchro app modules implement certain exported functions that comply to a certain definition.</p>\r\n<p>To the extent possible, all components of a Synchro solution are as lenient as possible, and work to be backward and forward compatible.  But some situations arise where specified version requirements must be defined and enforced to ensure proper app operation (particularly if you have deployed custom Synchro mobile apps to your end users, and then later upgrade to a newer version of Synchro server and begin to use new features or controls available in the mobile clients that correspond to that server release).</p>\r\n<p>The Synchro server and the Synchro mobile client application each have version numbers, defined in the form: x.x.x (and complying with the <a href=\"http://semver.org\">semver</a> versioning semantic).  The Synchro app definition may impose version requirements on both the Synchro server and the Synchro mobile client, as illustrated below in the package.json of the \"Civics\" sample app:</p>\r\n<pre> \r\n{\r\n  \"name\": \"synchro-civics\",\r\n  \"version\": \"0.1.0\",\r\n  \"description\": \"Synchro Civics\",\r\n  \"main\": \"civics_main\",\r\n  \"private\": true,\r\n  \"engines\": { \"synchro\": \"*\" },\r\n  \"synchro\": \r\n  {\r\n    \"clientVersion\": \"&gt;=1.1\"\r\n  } \r\n}</pre>\r\n<p>The <code>engines</code> key, typically used to define the version of the Node framework required, in this case specifies that this app is to be run by the Synchro server. In the example above, the semver constraint of \"*\" indicates that any version is acceptable.</p>\r\n<p>The \"synchro\" key contains Synchro app specific settings. If the <code>clientVersion</code> is specified, then its value is a semver constraint indicating the version requirements that this Synchro app places on the Synchro mobile client.</p>\r\n<p>Lastly, the Synchro server may have constraints as to whiat level of the Synchro mobile client it requires, as defined in the server configuration element <code>CLIENT_VERSION</code>. This will default to a fairly lenient client version requirement, as the Synchro server is good at being backward compatible. However, if you want to set a constraint at the server level on behalf of your apps, that may be preferable to defining such constraints for each app (assuming they are all the same).</p>\r\n<p>In any event, if the mobile client does not meet the constraints either of the Synchro server or of the Synchro app to which it is trying to connect, the end user will receive an appropriate message indicating that they need a newer version of the mobile client application.</p>\r\n<p> </p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/214657358-component-versioning/index.html"
    },
    {
      "id": 215383417,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/215383417-Synchro-Command-Line-Interface.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/215383417-Synchro-Command-Line-Interface",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 17,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2015-12-06T02:14:37Z",
      "updated_at": "2015-12-06T02:18:30Z",
      "name": "Synchro Command Line Interface",
      "title": "Synchro Command Line Interface",
      "body": "<p><code>synchro</code> is a command-line tool for installing and managing your Synchro Node servers and applications.</p>\r\n<h2>Synchro Quick Start</h2>\r\n<h3>Install the Command Line Interface (CLI)</h3>\r\n<pre><code>npm install synchro -g\r\n</code></pre>\r\n<h3>Documentation</h3>\r\n<p>Use the <code>--help</code> command to get basic comand help:</p>\r\n<pre><code>synchro --help\r\n</code></pre>\r\n<h3>Authentication</h3>\r\n<p>After installing the command line interface, you need to authenticate to the Synchro server so that you can download the required packages. Go to synchro.io/signup to create an account. Then run:</p>\r\n<pre><code>synchro auth\r\n</code></pre>\r\n<p>When prompted, supply the email address and password that you used to set up your account on the Synchro.io web site. You will only have to do this once per machine.</p>\r\n<h3>Creating a Synchro server on your machine</h3>\r\n<p>After authenticating, create a new directory and switch to it, then run:</p>\r\n<pre><code>synchro init\r\n</code></pre>\r\n<p>This will install the Synchro server application and use npm to install all required packages.</p>\r\n<h3>Creating your first Synchro App</h3>\r\n<p>Once Synchro has been initialized, you can create your first Synchro app by doing:</p>\r\n<pre><code>synchro new hello-world\r\n</code></pre>\r\n<h3>Running the Synchro server</h3>\r\n<p>You can start the server to play with your new app by doing:</p>\r\n<pre><code>node app.js\r\n</code></pre>\r\n<p>Or if you prefer:</p>\r\n<pre><code>npm start\r\n</code></pre>\r\n<h2>Commands</h2>\r\n<p>Note: Use the -h option to get detailed help on an individual command. For example:</p>\r\n<p><code>synchro new -h</code></p>\r\n<h3><code>synchro add</code></h3>\r\n<p>Add an app whose container exists in the module store to the current configuration</p>\r\n<h3><code>synchro auth</code></h3>\r\n<p>Authenticate to the Synchro.io server using your Synchro.io username/password, so that you can then download and install the Synchro server using <code>synchro init</code>.</p>\r\n<h3><code>synchro delete</code></h3>\r\n<p>Remove the app from the current config (if installed there) and remove the container from the module store (whethere or not the app was installed in the current config).</p>\r\n<h3><code>synchro init</code></h3>\r\n<p>Download, install, and configure a Synchro server in the current working directory.</p>\r\n<h3><code>synchro install</code></h3>\r\n<p>Retreive a remote Synchro application and install it in the current configuration and module store. Not implemented yet!</p>\r\n<h3><code>synchro ls</code></h3>\r\n<p>List installed apps.</p>\r\n<h3><code>synchro new</code></h3>\r\n<p>Create a new application in the module store and add it to the current configuration.</p>\r\n<h3><code>synchro remove</code></h3>\r\n<p>Remove an app from the current config without removing its container from the module store.</p>\r\n<h3><code>synchro syncdeps</code></h3>\r\n<p>Ensure that the dependencies of a specified Synchro app are installed on the local server. Not implemented yet!</p>\r\n<h3><code>synchro update</code></h3>\r\n<p>Update a Synchro server in the current working directory to the most current version.</p>\r\n<h3><code>synchro userpass</code></h3>\r\n<p>Sets/clears a username/password combination in the current configuration, where such username/password is used by the default Synchro Studio auth. Username and hash of password are written under STUDIO_USERS in current config.</p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/215383417-synchro-command-line-interface/index.html"
    },
    {
      "id": 205274228,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205274228-Server-Configuration.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205274228-Server-Configuration",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 18,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2015-05-12T02:18:20Z",
      "updated_at": "2015-12-06T01:06:56Z",
      "name": "Server Configuration",
      "title": "Server Configuration",
      "body": "<p>This article covers the configuration mechanism used by Synchro Server.  For more information about the actual configuration settings, please see: <a href=\"/hc/en-us/articles/215381747\">Server Configuration Settings</a>.</p>\r\n<p>Configuration works the same (and is shared) between Synchro server (app.js) and Synchro CLI commands.</p>\r\n<p>Each configuration value is determined by evaluating the following, in order, until a value is found:</p>\r\n<ol>\r\n<li>Command line parameters</li>\r\n<li>Environment variables</li>\r\n<li>The Configuration File</li>\r\n<li>Built-in, Default Values</li>\r\n</ol>\r\n<h2>Specifying the Configuration File</h2>\r\n<p>By default, both the Synchro server and all Synchro CLI commands will use a configuration file named \"config.json\" in the main application directory of the Synchro server (which is also the directory where Synchro CLI commands for that server will be executed).</p>\r\n<p>You may specify a different configuration file as a command line parameter, or set a reference to the configuration file to be used in an environment variable. In addition to any general configuration settings, the configuration file may contain service definition/configuration, and the list of installed apps for that configuration. This makes it easy to define multiple configurations which might use different services and serve different sets of applications (such as “local”, “azure”, “azure-dev”, etc).</p>\r\n<p>Example: Synchro server with config on command line:</p>\r\n<pre>node app.js -c config.json\r\n</pre>\r\n<p>Example: Synchro CLI with config on command line:</p>\r\n<pre>synchro new hello-world -c azure.json\r\n</pre>\r\n<p>Example: Setting the config via an environment variable:</p>\r\n<pre>set SYNCHRO_CONFIG=azure-dev.json\r\n</pre>\r\n<p>If set via an environment variable (and not overridden on the command line), both the Synchro server and Synchro CLI will use that configuration.</p>\r\n<h2>Environment Variables</h2>\r\n<p>To define a configuration setting via an environment variable, prefix the setting with<code>SYNCHRO__</code> and use the <code>__</code> (double underscore) separator as needed to represent any configuration member paths.</p>\r\n<p>For example, to set the value MODULESTORE.storageAccount (for the Azure module store), you would do:</p>\r\n<pre>set SYNCHRO__MODULESTORE__storageAccount=xxxxxxxxxx\r\n</pre>\r\n<p>A common approach is to use a config file for many settings, but to supplement those settings using environment variables for things that are either deployment-specific or secure/secret. For example, if you had a configuration element that contained an API key, and you didn't want that value contained in the files you push to your cloud server, or checked in to your revision control system, your could just specify that particular value using an environment variable.</p>\r\n<h2>Configuration Setting Example</h2>\r\n<p>A commonly used and easy to understand configuration setting is <code>PORT</code>, which defines the port on which the server will listen.</p>\r\n<h4>Default Value</h4>\r\n<p>The default value for <code>PORT</code> is 1337. This value will be used unless it is overridden by one of the methods below.</p>\r\n<h4>Configuration File</h4>\r\n<p>The <code>PORT</code> can be defined in your configuration file, for example:</p>\r\n<pre>{\r\n    PORT: 8000\r\n}\r\n</pre>\r\n<p>This will override the default value.</p>\r\n<h4>Environment Variable</h4>\r\n<p>You can set the value for <code>PORT</code> via an environment variable (as described above), which will override any default or config-file-specified <code>PORT</code>. For example:</p>\r\n<pre>set SYNCHRO__PORT=8080</pre>\r\n<h4>Command Line</h4>\r\n<p>The <code>PORT</code> can be set via the command line using the \"-p\" or \"--port\" flags. If set via the command line, that setting will override any other method of setting the port. For example:</p>\r\n<pre>$ node app.js -p 8888</pre>\r\n<h2>Application Configuration</h2>\r\n<p>The set of Synchro apps being served is represented by the top level configration element <code>APPS</code>, which is itself a dictionary of path mappings, each of which contains a dictionary of data related to the app being served at that path.</p>\r\n<p>For example:</p>\r\n<pre>{\r\n    \"APPS\": {\r\n        \"samples\": {\r\n            \"container\": \"samples\"\r\n        }\r\n        \"samples2\": {\r\n            \"container\": \"samples\"\r\n        }\r\n        \"civics\": {\r\n            \"container\": \"civics\",\r\n            \"GOOGLE_API_KEY\": \"meowquackwoof\"\r\n        }\r\n    }\r\n}\r\n</pre>\r\n<p>The set of keys under <code>APPS</code> define the endpoint suffix at which an app will be served and contain the configuration for the app to be served at that endpoint.</p>\r\n<p>The only required element in the configuration of an app is <code>container</code>, which indicates the module store container in which the app is defined (in the default file module store, this will just be the name of the directory under \"synchro-apps\" in which the app resides).</p>\r\n<p>In the example above, we see that the server is serving three apps. The first one is from the container \"samples\" and is being served at the endpoint <code>/api/samples</code>. The second one is also from the container \"samples\", but is being served from the endpoint <code>/api/samples2</code>. The third one is from the container \"civics\" and is being server at <code>/api/civics</code>.</p>\r\n<p>The \"civics\" app definition also contains some app-specific configuration (the GOOGLE_API_KEY). The civics app can access that configuration setting within the app by doing</p>\r\n<pre><code>var myKey = Synchro.getConfig(\"GOOGLE_API_KEY\");\r\n</code></pre>\r\n<p>You might be wondering why it would be useful to serve more than one instance of an app. The main reason is that you might want to serve multiple instances of the same app, but with different configuration. For example:</p>\r\n<pre>{\r\n    \"APPS\": {\r\n        \"inventory\": {\r\n            \"container\": \"inventoryApp\",\r\n            \"DB_PATH\": \"productionDb\"\r\n        }\r\n        \"inventorytest\": {\r\n            \"container\": \"inventoryApp\"\r\n            \"DB_PATH\": \"testDb\"\r\n        }\r\n    }\r\n}\r\n</pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/205274228-server-configuration/index.html"
    },
    {
      "id": 215381747,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/215381747-Server-Configuration-Settings.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/215381747-Server-Configuration-Settings",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 19,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2015-12-06T00:46:51Z",
      "updated_at": "2016-07-01T02:20:59Z",
      "name": "Server Configuration Settings",
      "title": "Server Configuration Settings",
      "body": "<p>This article covers the Synchro server configuration settings and their default values. For more information on the mechansims that you can use to set these values, see <a href=\"/hc/en-us/articles/205274228\">Server Configuration</a>.</p>\r\n<h2>General Settings</h2>\r\n<h3><code>CLIENT_VERSION</code></h3>\r\n<p>Default value: \"&gt;=1.1\"</p>\r\n<h3><code>PROTOCOL</code></h3>\r\n<p>Default value: http</p>\r\n<h3><code>HOST</code></h3>\r\n<p>Default value: The first external IP address found on the system</p>\r\n<h3><code>PORT</code></h3>\r\n<p>Default value: 1337</p>\r\n<h3><code>NOFORK</code></h3>\r\n<p>Default value: false</p>\r\n<h3><code>DEBUG_BASE_PORT</code></h3>\r\n<p>Default value: 6868</p>\r\n<h2>App Configuration</h2>\r\n<h3><code>APP_ROOT_PATH</code></h3>\r\n<p>Default value: 'synchro-apps'</p>\r\n<p>This value is covered in much more detail in <a href=\"/hc/en-us/articles/206064277\">Application Packaging and Dependencies</a>.</p>\r\n<h3><code>API_PATH_PREFIX</code></h3>\r\n<p>Default value: \"/api\"</p>\r\n<h3><code>APPS</code></h3>\r\n<p>Default value: {}</p>\r\n<h2>Synchro Studio Settings</h2>\r\n<h3><code>NOSTUDIO</code></h3>\r\n<p>Suppress Studio user interface.</p>\r\n<h3><code>STUDIO_USERS</code></h3>\r\n<p>Default value: []</p>\r\n<h3><code>STUDIO_PATH_PREFIX</code></h3>\r\n<p>Default value: \"/studio\"</p>\r\n<h3><code>STUDIO_NOAUTH</code></h3>\r\n<p>Default value: true if no users defined, otherwise false (by default, we will require authentication only if there are any users defined)</p>\r\n<h3><code>STUDIO_TITLE</code></h3>\r\n<p>The main title displayed on the Synchro Studio landing page</p>\r\n<p>Default value: \"Synchro API Server\"</p>\r\n<h3><code>STUDIO_SUBTITLE</code></h3>\r\n<p>The secondary title displayed on the Synchro Studio landing page</p>\r\n<p>Default value: \"The following Synchro apps are being served here:\"</p>\r\n<p> </p>\r\n<h2>App Resource Settings</h2>\r\n<p>For more information on how the values below are used in serving resources, see: <a href=\"/hc/en-us/articles/217448657\">Static Resources</a></p>\r\n<h3><code>API_URI_BASE</code></h3>\r\n<p>Default value: Composed by combing the PROTOCOL, HOST, and PORT, plus the API_PATH_PREFIX.</p>\r\n<h3><code>APP_RESOURCE_PREFIX</code></h3>\r\n<p>Default value: API_URI_BASE plus a URI path element representing the app being served, plus the static string \"resources/\". For example: http://192.168.1.20:1337/api/samples/resources/</p>\r\n<p>Note that this configuration element can also be provided at the app level to override the resource location for a specific app.</p>\r\n<p>For more information about this setting, please see: <a href=\"/hc/en-us/articles/217448657\">Static Resources</a>.</p>\r\n<h2>Logging Configuration</h2>\r\n<h3><code>LOG4JS_CONFIG</code></h3>\r\n<p>Default value:</p>\r\n<pre>{ \r\n    // Redirect console.log to log4js, turn off color coding appenders:\r\n    [\r\n        { type: \"console\", layout: { type: \"basic\" } }\r\n    ],\r\n    replaceConsole: true,\r\n    levels:\r\n    {\r\n        '[all]': 'INFO'\r\n    }\r\n}\r\n</pre>\r\n<h2>Session Store Configuration</h2>\r\n<h3><code>SESSIONSTORE_PACKAGE</code></h3>\r\n<p>Default value: 'synchro-api'</p>\r\n<h3><code>SESSIONSTORE_SERVICE</code></h3>\r\n<p>Default value: 'MemorySessionStore'</p>\r\n<h2>Module Store Configuration</h2>\r\n<h3><code>MODULESTORE_PACKAGE</code></h3>\r\n<p>Default value: 'synchro-api'</p>\r\n<h3><code>MODULESTORE_SERVICE</code></h3>\r\n<p>Default value: 'FileModuleStore'</p>\r\n<h3><code>MODULESTORE</code></h3>\r\n<p>Default value:</p>\r\n<pre>{\r\n    'directory': 'synchro-apps'\r\n}\r\n</pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/215381747-server-configuration-settings/index.html"
    },
    {
      "id": 217448657,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/217448657-Static-Resources.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/217448657-Static-Resources",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 20,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2016-02-25T01:36:41Z",
      "updated_at": "2016-02-25T02:08:26Z",
      "name": "Static Resources",
      "title": "Static Resources",
      "body": "<p>Synchro applications often refer to static resources (most often image files).  You are certainly free to use fully qualified URLs pointing to resources hosted on the Internet (or otherwise reachable from your mobile client apps) if you like.  And if you only do that, you may ignore this article entirely.</p>\r\n<p>However, it may be useful to take advantage of Synchro Server's resource mapping and local development resource serving functionality.</p>\r\n<p>If you put your Synchro app resources in a directory called \"resources\" in your app, and you use <code>Synchro.getResourceUrl()</code> in your Synchro app code to get the paths to your resources, everything should magically work.  For more details, including troubleshooting and migration to production environments, read on.</p>\r\n<p>Note: Capitalized values below represent configuration settings.  For more information on these settings, see: <a href=\"/hc/en-us/articles/215381747\">Server Configuration Settings</a>.  For information on how to set/modify these settings in your environment, see: <a href=\"/hc/en-us/articles/205274228\">Server Configuration</a>.</p>\r\n<h2>Local Development / Out of the Box</h2>\r\n<p>For local development purposes, you should place any static resources for a Synchro app in a directory called \"resources\" inside your app.  Your Synchro Server will then serve those resource files at a path composed as follows:</p>\r\n<p>/API_PATH_PREFIX/yourAppPath/resources </p>\r\n<p>When you use <code>Synchro.getResourceUrl()</code> to specify a resource URL, it will produce a URL composed as follows:</p>\r\n<p>PROTOCOL://HOST:PORT/API_PATH_PREFIX/yourAppPath/resources/yourResource </p>\r\n<p>For example:</p>\r\n<p>http://192.168.1.20:1337/api/youApp/resources/user.png</p>\r\n<p>WARNING: The most common issue with this approach is that in some environments Synchro is unable to properly determine the correct HOST value (one that is reachable from the client devices accessing your Synchro app).  The HOST value should be whatever you use in your Synchro app endpoints for the host.  For local testing from simulators running on the same machine on which Synchro Server is running, \"localhost\" should work fine.  For testing with external devices, you will need either your external IP address or a hostname that will be resolvable by the client devices.  Synchro Server defaults the HOST to what it thinks your external IP address is, but the result of that process is not always correct (or reachable externally).</p>\r\n<p>Assuming your HOST is either correctly determined automatically, or set explicitly in your configuration, there is no other configuration required to serve static resources using Synchro Server and access them from your apps using <code>Synchro.getResourceUrl()</code>.</p>\r\n<h2>Moving to Hosted Apps / Production</h2>\r\n<p>When moving your Synchro apps to hosted or production servers, you will probably not want to continue serving your static resources using Synchro Server.  Synchro Server is serving those resources via Node.js using <code>sendFile</code> and is generally not as smart or efficient as a production web server or content distribution network (CDN) would be.  So you will probably want to think about moving your static resources, and then setting the Synchro Server configuration to allow <code>Synchro.getResourceUrl()</code> to resolve to the location from which you are serving them.</p>\r\n<p>The configuration setting APP_RESOURCE_PREFIX specifies where Synchro should look for resources.  You may set this as a top level configuration element to cause all Synchro apps running on the server to use the same location.  You may also provide this value inside of the configuration for a given Synchro app to use that location for resources used by that Synchro app.  </p>\r\n<p>You may of course combine these techniques, with a global default and overrides for one or more Synchro apps. </p>\r\n<p>Here is an example config:</p>\r\n<pre><code>{\r\n  ...\r\n  \"APP_RESOURCE_PREFIX\": \"http://cdn.site.com/static1\",\r\n  \"APPS\": {\r\n    \"my-app1\": {\r\n      ...        \r\n    },\r\n    \"my-app1-test\": {\r\n      ...\r\n    },\r\n    \"my-app2\": {\r\n      ...\r\n      \"APP_RESOURCE_PREFIX\": \"http://cdn.site.com/static2\",\r\n    },\r\n  }\r\n}</code></pre>\r\n<p>In the example above, <code>my-app1</code> and <code>my-app1-test</code> will both use the system default resource location (static1), while <code>my-app2</code> will override that and use a different location (static2).</p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/217448657-static-resources/index.html"
    },
    {
      "id": 219469657,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/219469657-Using-and-Integrating-the-Web-App-Interface.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/219469657-Using-and-Integrating-the-Web-App-Interface",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 21,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2016-05-14T18:52:44Z",
      "updated_at": "2016-05-14T18:59:06Z",
      "name": "Using and Integrating the Web App Interface",
      "title": "Using and Integrating the Web App Interface",
      "body": "<p>Synchro can provide web app interfaces along with support for native applications.  These web apps can be served from Synchro Server or your own Node server, and can even be integrated with your own web app or framework (no external dependencies and Node.js or Synchro required). </p>\r\n<h2>Turn-Key Synchro Web Apps from your Synchro Server</h2>\r\n<p>The Synchro configuration variable <code>APP_PATH_PREFIX</code> determines whether, and from where, Synchro Server will serve turn-key web apps for each installed Synchro app. By default, this value is set to \"/app\", meaning that web apps will be served from host:port/app/[synchro-app-path]. If you set this configuration value to <code>null</code>, then Synchro Server will not serve web apps.</p>\r\n<p>When serving turn-key web apps from your Synchro Server, the Synchro app list on the main web page provided by that server will now include a \"Web App\" link that will take you to the web app for each Synchro app/endpoint.</p>\r\n<h2>Turn-Key Synchro Web Apps from your own Node server</h2>\r\n<p>Synchro Server includes a dependency called synchro-web, which provides Synchro web app code and services.  This module can be found in node_modules/synchro-web under your Synchro Server installation.  Synchro Web contains a module called app.js that you can run under your own Node server by doing:</p>\r\n<pre><code>node app.js</code></pre>\r\n<p>This will serve the same turn-key Synchro web apps as above, but from your own Node.js instance (with no dependencies on Synchro Server or any of its components).  You would likely need to customize app.js for a real deployment, including providing the Synchro app endpoint and choosing an appropriate port, etc. </p>\r\n<h2>Integrating Synchro Web Apps into an existing web application</h2>\r\n<p>Synchro Web Apps can be integrated with existing web applications and served from the same framework that serves those applications.  Synchro Web Apps have no dependencies on Synchro Server or Node.js, and no external dependencies (they do not rely on JQuery, etc).</p>\r\n<p>The following instructions refer to the Synchro Web directory, which is located in your Synchro Server directory under node_modules/synchro-web. </p>\r\n<p>The only requirements for integration of a Synchro Web App are as follows:</p>\r\n<p>1) Your page must include the Synchro css file, located at public/stylesheets/synchro.css in the Synchro Web directory (you may serve this file from anywhere you like).</p>\r\n<p>2) Your page must define the SynchroInit function, which the Synchro Web App will call on startup: </p>\r\n<pre><code>function SynchroInit(synchro)<br />{<br />    // Wire your back button, if any, to synchro.goBack()<br /><br />    var synchroApp =<br />    {<br />        endpoint: ???,  // required<br />        container: ???, // required<br />        onSetPageTitle: function(title) // optional<br />        {<br />        },<br />        onSetBackEnabled: function(isEnabled) // optional<br />        {<br />        },<br />        onMessageBox: function(messageBox, execCommand) // optional<br />        {<br />        },<br />    }<br />    return synchroApp;<br />}</code></pre>\r\n<p>3) Your page must include the Synchro web app JavaScript support module, located at public/script/synchro.js in the Synchro Web directory (you may serve this file from anywhere you like).</p>\r\n<p>For an example page template, including a working implementation of SynchroInit, please see the template used for the turn-key Synchro web interface, located at views/index.hbs in the Synchro Web directory.  You are free to use or modify this template as needed.</p>\r\n<p> </p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/219469657-using-and-integrating-the-web-app-interface/index.html"
    },
    {
      "id": 206064277,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/206064277-Application-Packaging-and-Dependencies.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/206064277-Application-Packaging-and-Dependencies",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 22,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2015-05-12T02:10:18Z",
      "updated_at": "2015-05-12T08:19:30Z",
      "name": "Application Packaging and Dependencies",
      "title": "Application Packaging and Dependencies",
      "body": "<p>There is a directory, specified via the APP_ROOT_PATH configuration setting, that indicates where Synchro apps can be found on the server. This directory contains a package.json file and a corresponding node_modules directory. Together, they define and manage the set of dependencies made available to all Synchro apps running on that server. By default, the npm packages \"request\" and \"lodash\" are included there. You may add additional dependencies there just like you would to a node application: by using <code>npm install &lt;package&gt; --save</code>.</p>\r\n<p>If using the file-based module store, each Synchro application will be contained in a directory under the APP_ROOT_PATH directory. If using another module store (such as Azure or AWS), any application with dependencies will have a directory under the APP_ROOT_PATH directory which contains its package.json and node_modules. Note that while the package modules themselves may reside somewhere else (depending on the module store used), the node dependencies must exist on-disk at this location.</p>\r\n<p>As outlined above, each individual Synchro app has a package.json, and if it has any dependencies, will have a node_modules directory. You may add dependencies to a Synchro app just like you would to any node application: by using <code>npm install &lt;package&gt; --save</code>.</p>\r\n<p>When a Synchro application is installed from another location using <code>synchro install</code>, the install command will write the Synchro app modules (including package.json) to the module store currently being used. In addition, if the active module store is not the file module store, the install command will create a directory for the Synchro app under APP_ROOT_PATH, and copy package.json there. Finally, it will then install any dependencies there (using npm install).</p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/206064277-application-packaging-and-dependencies/index.html"
    },
    {
      "id": 214664398,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/214664398-Pluggable-Session-and-Module-Stores.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/214664398-Pluggable-Session-and-Module-Stores",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 23,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200810808,
      "created_at": "2015-12-06T01:33:51Z",
      "updated_at": "2016-03-06T21:58:06Z",
      "name": "Pluggable Session and Module Stores",
      "title": "Pluggable Session and Module Stores",
      "body": "<p>Synchro uses a <strong>session store</strong> to track client sessions, which includes all live application state.  Synchro also uses a<strong> module store</strong> to load (and deploy/update) its modules (your Synchro app code).  By default, Synchro uses built-in lightweight implementations of these stores (an in-memory session store, and a local-file module store) that require no configuration.</p>\r\n<p>Other session store and module store implementations are provided for use in production deployments, including support for a session store on Redis, and module stores on Microsoft Azure, Amazon AWS, Google GCloud, OpenStack (including IBM BlueMix), and more.  </p>\r\n<p>Note: Configuration examples given below are in JSON format, as they would appear in your config.json file.  These configuration settings may also be specified via environment variables.  It is even possible to specify some of the configuration in config.json and some in environment variables (a common use case of this model would be to put the passwords in environment variables and everything else in config.json).  For more information about how to specify configuration information, see: <a href=\"/hc/en-us/articles/205274228-Server-Configuration\">Server Configuration</a>.</p>\r\n<h2>Session Stores</h2>\r\n<h3><code>MemorySessionStore</code></h3>\r\n<p>In memory, lightweight, not persistent.  No configuration.</p>\r\n<h3><code>FileSessionStore</code></h3>\r\n<p>In memory, disk backed, lightweight, persistent.  This session store is typically used for testing where persistence is required across instances (restarts).  It also allows inspection of the session data in real-time or post-mortem.</p>\r\n<p>Configuration: </p>\r\n<pre><code>\"SESSIONSTORE_SERVICE\": \"FileSessionStore\"\r\n\"SESSIONSTORE\": {\r\n  \"sessionStateFile\": \"sessions.json\"\r\n}</code></pre>\r\n<h3><code>RedisSessionStore</code></h3>\r\n<p>Robust, highly scalable production session store on Redis.  All production deployments should use this session store.  Managed Redis services are available on every integrated cloud service platform (including Azure, Amazon AWS, IBM BlueMix, and many others), or you may choose to use a Redis server that you manage.</p>\r\n<p>Configuration:</p>\r\n<pre><code>\"SESSIONSTORE_SERVICE\": \"RedisSessionStore\"\r\n\"SESSIONSTORE\": {\r\n  \"host\": \"xxxxxx\",\r\n  \"port\": 6379,\r\n  \"password\": \"xxxxxx\"\r\n}</code></pre>\r\n<h2> </h2>\r\n<h2>Module Stores</h2>\r\n<h3><code>FileModuleStore</code></h3>\r\n<p>Lightweight, local file storage.  No configuration is required, unless you want to change the root directory of the module store.</p>\r\n<p>Configuration:</p>\r\n<pre><code>\"MODULESTORE_SERVICE\": \"FileModuleStore\"\r\n\"MODULESTORE\": {\r\n  \"directory\": \"synchro-apps\"\r\n}</code></pre>\r\n<h3><code>PkgCloudModuleStore</code></h3>\r\n<p>Using PkgCloud module to access storage across a wide variety of storage backends, including Amazon, Azure, Google, HP, OpenStack (including IBM BlueMix), and RackSpace.  For details on configuring this module store to use a storage option not detailed below, see the <a href=\"https://github.com/pkgcloud/pkgcloud#storage\">PkgCloud project docs</a>.</p>\r\n<p>Configuration:</p>\r\n<p>For all module stores using PkgCloud: </p>\r\n<pre><code>\"MODULESTORE_SERVICE\": \"PkgCloudModuleStore\"</code></pre>\r\n<p>For Azure add:</p>\r\n<pre><code>\"MODULESTORE\": {\r\n  \"provider\": \"azure\",\r\n  \"storageAccount\": \"xxxxxx\",\r\n  \"storageAccessKey\": \"xxxxxx\"\r\n} </code></pre>\r\n<p>For Amazon S3 add:</p>\r\n<pre><code>\"MODULESTORE\": {\r\n  \"provider\": \"amazon\",\r\n  \"keyId\": \"xxxxxx\", // access key id\r\n  \"key\": \"xxxxxx\", // secret key\r\n  \"region\": \"xxxxxx\" // region\r\n}</code></pre>\r\n<p>For IBM BlueMix (OpenStack) add:</p>\r\n<pre><code>\"MODULESTORE\": {\r\n  \"provider\": \"openstack\",\r\n  \"keystoneAuthVersion\": \"v3\",\r\n  \"authUrl\": \"https://identity.open.softlayer.com/\",\r\n  \"region\": \"xxxxxx\",\r\n  \"tenantId\": \"XXXXXXXX\", // projectId as provided in your Service Credentials\r\n  \"username\": \"XXXXXXXX\",\r\n  \"password\": \"XXXXXXXX\",\r\n  \"domainId\": \"XXXXXXXX\",\r\n  \"domainName\": \"XXXXXXXX\"\r\n}</code></pre>\r\n<p> </p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200810808-general/214664398-pluggable-session-and-module-stores/index.html"
    },
    {
      "id": 205268078,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205268078-Controls-Overview.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205268078-Controls-Overview",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 0,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-11T17:51:21Z",
      "updated_at": "2016-05-19T22:56:04Z",
      "name": "Controls Overview",
      "title": "Controls Overview",
      "body": "<p>Following is a list of controls supported by Synchro.  </p>\r\n<p>For a common attributes supported by all controls, see: <a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a>.</p>\r\n<p>Otherwise select a control below to see the additional attributes that it supports, as well as data binding support and samples. </p>\r\n<h2><a href=\"/hc/en-us/articles/205268008-Border-Control\">Border Control</a></h2>\r\n<p>The border control is a container that holds a single control and displays a visible border around it.</p>\r\n<h2><a href=\"/hc/en-us/articles/205268048-Button-Control\">Button Control</a></h2>\r\n<p>A standard button control.</p>\r\n<h2><a href=\"/hc/en-us/articles/205268018-Canvas-Control\">Canvas Control</a></h2>\r\n<p>The canvas control is a container that holds one or more controls, which can be positioned relative to the canvas itself (most notably, controls in a canvas container can be made to overlap).</p>\r\n<h2><a href=\"/hc/en-us/articles/204793558-Edit-Control\">Edit Control</a></h2>\r\n<p>A standard edit control.</p>\r\n<h2><a href=\"/hc/en-us/articles/206058737-Image-Control\">Image Control</a></h2>\r\n<p>A control to display an image resource.</p>\r\n<h2><a href=\"/hc/en-us/articles/206058797-Listbox-Control\">Listbox Control</a></h2>\r\n<p>A control to display, and potentially allow interaction with, a list of text items.</p>\r\n<h2><a href=\"/hc/en-us/articles/205268118-ListView-Control\">ListView Control</a></h2>\r\n<p>A control to display, and potentially allow interaction with, a list of view items (items that are themselves composed of one or more controls).</p>\r\n<h2><a href=\"/hc/en-us/articles/205268428-Location-Control\">Location Control</a></h2>\r\n<p>Non-visible (non-layout) control for providing location services.</p>\r\n<h2><a href=\"/hc/en-us/articles/206058767-Password-Control\">Password Control</a></h2>\r\n<p>A standard edit control that does not disclose values entered into the control.</p>\r\n<h2><a href=\"/hc/en-us/articles/205268128-Picker-Control\">Picker Control</a></h2>\r\n<p>A control to let the user pick from a list of items.</p>\r\n<h2><a href=\"/hc/en-us/articles/206063847-ProgressBar-Control\">ProgressBar Control</a></h2>\r\n<p>The ProgressBar control shows percent completion of a task.</p>\r\n<h2><a href=\"/hc/en-us/articles/205273898-ProgressRing-Control\">ProgressRing Control</a></h2>\r\n<p>The ProgressRing control indicates that an activity is occurring (often implying that the user is waiting for completion).</p>\r\n<h2><a href=\"/hc/en-us/articles/206058747-Rectangle-Control\">Rectangle Control</a></h2>\r\n<p>A simple rectangle control, which can have a border and be filled as desired.</p>\r\n<h2><a href=\"/hc/en-us/articles/205268028-ScrollView-Control\">ScrollView Control</a></h2>\r\n<p>A container that holds a single control and scrolls that control within the area of the scroll control.</p>\r\n<h2><a href=\"/hc/en-us/articles/205268108-Slider-Control\">Slider Control</a></h2>\r\n<p>A slider control that can be dragged through a range of positions representing a range of values.</p>\r\n<h2><a href=\"/hc/en-us/articles/205268038-StackPanel-Control\">StackPanel Control</a></h2>\r\n<p>A container control for organizing a set of container controls either horizontally or vertically.</p>\r\n<h2><a href=\"/hc/en-us/articles/206058777-Text-Control\">Text Control</a></h2>\r\n<p>A title or label control for displaying text.</p>\r\n<h2><a href=\"/hc/en-us/articles/205268138-Toggle-Control\">Toggle Control</a></h2>\r\n<p>An on/off toggle control.</p>\r\n<h2><a href=\"/hc/en-us/articles/205268158-WebView-Control\">WebView Control</a></h2>\r\n<p>A control that displays a web view, populated either with local content, or loaded from a URL.</p>\r\n<h2><a href=\"/hc/en-us/articles/206063937-WrapPanel-Control\">WrapPanel Control</a></h2>\r\n<p>A container control that flows contents either vertically or horizontally, and wraps overflowing content onto the next row/column.</p>\r\n<h2><a href=\"/hc/en-us/articles/205273908-Android-ActionBar-Controls\">Android: ActionBar Controls</a></h2>\r\n<p>An Android ActionBar controls.</p>\r\n<h2><a href=\"/hc/en-us/articles/206063957-iOS-NavBar-and-ToolBar-Controls\">iOS: NavBar and ToolBar Controls</a></h2>\r\n<p>iOS NavBar and ToolBar controls.</p>\r\n<h2><a href=\"/hc/en-us/articles/206063947-Windows-CommandBar-Controls\">Windows: CommandBar Controls</a></h2>\r\n<p>Windows CommandBar controls.</p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/205268078-controls-overview/index.html"
    },
    {
      "id": 219657607,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/219657607-Common-Control-Attributes.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/219657607-Common-Control-Attributes",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 1,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2016-05-19T22:51:40Z",
      "updated_at": "2016-05-19T22:52:27Z",
      "name": "Common Control Attributes",
      "title": "Common Control Attributes",
      "body": "<p>Most controls support the common attributes defined below:</p>\r\n<h3>Attributes:</h3>\r\n<ul>\r\n<li><code>height</code> - in Synchro units</li>\r\n<li><code>width</code> - in Synchro units</li>\r\n<li><code>background</code> (<a href=\"/hc/en-us/articles/205325048\">color</a>)</li>\r\n<li><code>margin</code> (<a href=\"/hc/en-us/articles/205325108\">thickness</a>)</li>\r\n<li><code>visibility</code> - boolean</li>\r\n<li><code>opacity</code> - float from 0 (transparent) to 1 (opaque)</li>\r\n<li><code>enabled</code> - boolean</li>\r\n<li><code>horizontalAlignment</code> - one of [Left], Center, Right</li>\r\n<li><code>verticalAlignment</code> - one of [Top], Center, Bottom</li>\r\n</ul>\r\n<p>For more information about control \"layout\" (the <code>height</code>, <code>width</code>, <code>margin</code>, <code>horizontalAlignment</code>, and <code>verticalAlignment</code> attributes), see <a href=\"/hc/en-us/articles/205324388-Control-Sizing-and-Layout\">Control Sizing and Layout</a>. </p>\r\n<p>For details on the additional attributes supported by a given control, please see the documentation for that control. </p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/219657607-common-control-attributes/index.html"
    },
    {
      "id": 205268008,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205268008-Border-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205268008-Border-Control",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 2,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-11T17:49:53Z",
      "updated_at": "2016-05-19T22:58:21Z",
      "name": "Border Control",
      "title": "Border Control",
      "body": "<h3>Overview:</h3>\r\n<p>The <code>border</code> control is a container control that can contain a single child control.</p>\r\n<p>The child control can align itself within the border via the child control's <code>horizontalAlignment</code> or <code>verticalAlignment</code> attributes.</p>\r\n<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>border</code> (<a href=\"/hc/en-us/articles/205325048\">color</a>)</li>\r\n<li><code>borderThickness</code> (<a href=\"/hc/en-us/articles/205325108\">thickness</a>)</li>\r\n<li><code>cornerRadius</code></li>\r\n<li><code>padding</code> (<a href=\"/hc/en-us/articles/205325108\">thickness</a>)</li>\r\n<li><code>background</code> (<a href=\"/hc/en-us/articles/205325048\">color</a>)</li>\r\n<li><code>contents</code></li>\r\n</ul>\r\n<h3>Bindings:</h3>\r\n<ul>\r\n<li><code>onTap</code> (command + params)</li>\r\n</ul>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"border\", border: \"Red\", borderThickness: 10, cornerRadius: 5, padding: 10, background: \"Blue\", contents: [\r\n    { control: \"rectangle\", width: \"{content}\", height: \"{content}\", fill: \"Green\" },\r\n] }\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/205268008-border-control/index.html"
    },
    {
      "id": 205268048,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205268048-Button-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205268048-Button-Control",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 3,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-11T17:50:49Z",
      "updated_at": "2016-06-03T16:51:06Z",
      "name": "Button Control",
      "title": "Button Control",
      "body": "<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>caption</code> - Button caption text</li>\r\n<li><code>icon</code> - Button icon name from <a href=\"https://design.google.com/icons/\">Material Design icons</a> set</li>\r\n<li><code>borderless</code> - boolean, if true, button will have no border or background (defaults to false)</li>\r\n<li><code>color</code> (<a href=\"/hc/en-us/articles/205325048\">color</a>) - Caption font color</li>\r\n<li><code>resource</code> - A URL reference to the image location</li>\r\n</ul>\r\n<h3>Bindings:</h3>\r\n<ul>\r\n<li><code>onClick</code> (command + params)</li>\r\n</ul>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"button\", caption: \"Login\", width: 125, binding: \"login\" },<br /></code></pre>\r\n<pre><code>{ control: \"button\", caption: \"Login\", width: 125, binding: { command: \"login\", param: \"foo\" } },<br /></code></pre>\r\n<pre><code>{ control: \"button\", icon: \"thump_up\", caption: \"Like\", borderless: true, binding: \"setLike\" },<br /></code></pre>\r\n<h3>Notes</h3>\r\n<p>Either a combination of <code>icon</code> and/or <code>caption</code> (for a text button) or <code>resource</code> (for an image button) may be specified, but not both.</p>\r\n<p>To reference an icon, use the name from the Material Design icons set (all lower case, with underscores between words, such as \"camera_alt\").</p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/205268048-button-control/index.html"
    },
    {
      "id": 205268018,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205268018-Canvas-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205268018-Canvas-Control",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 4,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-11T17:50:05Z",
      "updated_at": "2016-05-19T23:01:06Z",
      "name": "Canvas Control",
      "title": "Canvas Control",
      "body": "<p>The Canvas control contains any number of child controls, which are positioned absolutely via <code>top</code> and <code>left</code> attributes on such contained child controls. This kind of layout is very easy to abuse and care should be take to use it only when necessary and/or when you will be handling any flexible layout issues in code.</p>\r\n<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n</ul>\r\n<h3>Example:</h3>\r\n<pre><code>{ type: \"canvas\", contents: [\r\n    { type: \"text\", value: \"Somevalue\", top: 10, left: 25 },\r\n    { type: \"text\", value: \"Othervalue\", top: 20, left: 5 },\r\n] };\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/205268018-canvas-control/index.html"
    },
    {
      "id": 204793558,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/204793558-Edit-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/204793558-Edit-Control",
      "author_id": 858670498,
      "comments_disabled": true,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 5,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-04-15T07:02:07Z",
      "updated_at": "2016-05-19T23:00:07Z",
      "name": "Edit Control",
      "title": "Edit Control",
      "body": "<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>font</code> (<a href=\"/hc/en-us/articles/205325098\">font</a>)</li>\r\n<li><code>lines</code></li>\r\n<li><code>multiline</code></li>\r\n<li><code>placeholder</code></li>\r\n</ul>\r\n<h3>Bindings:</h3>\r\n<ul>\r\n<li><code>value</code></li>\r\n<li><code>sync</code> (value: \"change\")</li>\r\n</ul>\r\n<h3>Notes:</h3>\r\n<p><code>multiline</code> is a boolean value to indicate whether the edit control should allow multiple lines (and accept the return character). If set, you may also specify a numeric value in the <code>lines</code> attribute to indicate how tall the control should be in lines of text. If a <code>height</code> attribute is set, that will override the <code>lines</code> setting for height.</p>\r\n<p>If the <code>sync</code> attribute has the value \"change\", then any change to the edit control will by synchronized to the server. This is useful for things like autocompletion.</p>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"edit\", binding: \"username\", width: 200 },\r\n</code></pre>\r\n<pre><code>{ control: \"edit\", binding: { value: \"username\", sync: \"change\" }, placeholder: \"enter user name\", width: 200 },\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/204793558-edit-control/index.html"
    },
    {
      "id": 206058737,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/206058737-Image-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/206058737-Image-Control",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 6,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-11T17:50:58Z",
      "updated_at": "2016-05-19T23:02:13Z",
      "name": "Image Control",
      "title": "Image Control",
      "body": "<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>scale</code> - one of Stretch, [Fit], or Fill</li>\r\n<li><code>resource</code> - A URL reference to the image location</li>\r\n</ul>\r\n<p>If only one dimension of an image control specification is provided, the other dimension will be set based on the aspect ratio of the image at such time as the image is loaded, such that the resulting image control exactly contains the image.</p>\r\n<p>If both dimentions are set in the image control specification, then the <code>scale</code> will be used to determine how to fit the image into the defined shape.</p>\r\n<h3>Bindings:</h3>\r\n<ul>\r\n<li><code>onTap</code> (command + params)</li>\r\n</ul>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"image\", height: 300, width: 300, resource: \"{image}\" },\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/206058737-image-control/index.html"
    },
    {
      "id": 206058797,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/206058797-Listbox-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/206058797-Listbox-Control",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 7,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-11T17:52:50Z",
      "updated_at": "2016-05-19T23:43:01Z",
      "name": "Listbox Control",
      "title": "Listbox Control",
      "body": "<h3>Attributes</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>select</code> - None, [Single], Multiple</li>\r\n</ul>\r\n<h3>Binding</h3>\r\n<ul>\r\n<li><code>items</code> - the array of elements in the list.</li>\r\n<li><code>itemValue</code> (defaults to \"{$data}\") - a token string applied to each \"items\" element to construct the string to display in the list. For example: \"User: {firstName} {lastName}\".</li>\r\n<li><code>selection</code> - the location in the view model where the current selection is maintained. If select is Single, then the location referred to by selection should contain a single item. If select is Multiple, then the location referred to by selection should contain an array of zero or more items.</li>\r\n<li><code>selectionItem</code> (defaults to $data) - This is what is placed into \"selection\" (per item) and this is applied to each item in \"items\" for the purpose of matching items with selection items when setting selection state for the control. For example, if the selectionItem was \"{itemId}\", then the selection binding would be one or more elements of the \"{itemId}\" applied to the selected items. When resetting item selection, \"{itemId}\" will be applied to each list item, and the result will be compared with the value(s) in \"selection\" to see if the item should be selected. In the case of the default, the selection list will contain deep copies of the list view items, and the selection comparison will be a deep compare of those items with the list view items.</li>\r\n</ul>\r\n<p><br />Commands</p>\r\n<p>If select is <strong>None</strong>: <code>onItemClick</code> command - context is the item clicked</p>\r\n<p>If select is <strong>Single</strong>: <code>onSelectionChange</code> command - context is the item that is now selected</p>\r\n<p>If select is <strong>Multiple</strong>: <code>onSelectionChange</code> command - context is the listbox/listview context (not item-specific)</p>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"listbox\", width: \"*\", height: 300, select: \"Multiple\", binding: \"items\" }</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/206058797-listbox-control/index.html"
    },
    {
      "id": 205268118,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205268118-ListView-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205268118-ListView-Control",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 8,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-11T17:53:01Z",
      "updated_at": "2016-05-19T23:39:18Z",
      "name": "ListView Control",
      "title": "ListView Control",
      "body": "<h3>Attributes</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>select</code> - None, [Single], Multiple</li>\r\n</ul>\r\n<h3><a id=\"user-content-binding\" class=\"anchor\" href=\"https://github.com/SynchroLabs/Synchro/wiki/Controls#binding\"></a>Binding</h3>\r\n<ul>\r\n<li><code>items</code> - the array of elements in the list.</li>\r\n<li><code>itemTemplate</code> - layout specification for each item (must be a single element, though that element can be a container that contains other layout elements).</li>\r\n<li><code>selection</code> - the location in the view model where the current selection is maintained. If select is Single, then the location referred to by selection should contain a single item. If select is Multiple, then the location referred to by selection should contain an array of zero or more items.</li>\r\n<li><code>selectionItem</code> (defaults to $data) - This is what is placed into \"selection\" (per item) and this is applied to each item in \"items\" for the purpose of matching items with selection items when setting selection state for the control. For example, if the selectionItem was \"{itemId}\", then the selection binding would be one or more elements of the \"{itemId}\" applied to the selected items. When resetting item selection, \"{itemId}\" will be applied to each list item, and the result will be compared with the value(s) in \"selection\" to see if the item should be selected. In the case of the default, the selection list will contain deep copies of the list view items, and the selection comparison will be a deep compare of those items with the list view items.</li>\r\n</ul>\r\n<h4>Commands</h4>\r\n<p>If select is <strong>None</strong>: <code>onItemClick</code> command - context is the item clicked</p>\r\n<p>If select is <strong>Single</strong>: <code>onSelectionChange</code> command - context is the item that is now selected</p>\r\n<p>If select is <strong>Multiple</strong>: <code>onSelectionChange</code> command - context is the listbox/listview context (not item-specific)</p>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"listview\", select: \"Single\", width: \"*\", binding: \"people\", itemTemplate:\r\n    { control: \"stackpanel\", orientation: \"Horizontal\", width: \"*\", padding: 5, contents: [\r\n        { control: \"image\", resource: imgUser, height: 50, width: 50, verticalAlignment: \"Center\" },\r\n        { control: \"stackpanel\", orientation: \"Vertical\", contents: [\r\n            { control: \"text\", value: \"{first}\" },\r\n            { control: \"text\", value: \"{last}\" },\r\n        ] },\r\n    ] },\r\n}</code></pre>\r\n<pre><code>{ control: \"listview\", select: \"None\", width: \"*\", \r\n   binding: { items: \"people\", onItemClick: { command: \"onSelected\", person: \"{$data}\" } }, \r\n   itemTemplate:\r\n    { control: \"stackpanel\", orientation: \"Horizontal\", width: \"*\", padding: 5, contents: [\r\n        { control: \"image\", resource: imgUser, height: 50, width: 50, verticalAlignment: \"Center\" },\r\n        { control: \"stackpanel\", orientation: \"Vertical\", contents: [\r\n            { control: \"text\", value: \"{first}\" },\r\n            { control: \"text\", value: \"{last}\" },\r\n        ] },\r\n    ] },\r\n}</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/205268118-listview-control/index.html"
    },
    {
      "id": 205268428,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205268428-Location-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205268428-Location-Control",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 9,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-11T18:11:47Z",
      "updated_at": "2015-12-04T08:10:23Z",
      "name": "Location Control",
      "title": "Location Control",
      "body": "<p>The Location control is an invisible (non-layout) control, typically included at the top of a view definition. It accesses locations services and can update a bound value with location information, as well as invoke view model commands when the location is set or updated.</p>\r\n<h3>Attributes:</h3>\r\n<ul>\r\n<li><code>movementThreshold</code> (in meters, to trigger location update, default is 100)</li>\r\n</ul>\r\n<h3>Bindings:</h3>\r\n<ul>\r\n<li><code>value</code></li>\r\n<li><code>sync</code></li>\r\n<li><code>onUpdate</code> (command + params)</li>\r\n</ul>\r\n<h3>Bound value output</h3>\r\n<h4>Location Data</h4>\r\n<pre>{\r\n    available: true,\r\n    status: \"Active\",\r\n    coordinate:\r\n    {\r\n        latitude: 47.1234567,\r\n        longitude: -122.123456\r\n    },\r\n    accuracy: 5,       // in meters\r\n    heading: 45.1234,  // in degrees\r\n    speed: 1.23        // in meters/second\r\n}</pre>\r\n<h4><code>status</code>:</h4>\r\n<ul>\r\n<li><code>DeterminingAvailabily</code> - The system is determining the availability of location services</li>\r\n<li><code>Available</code> - Location services are available and a location update will be provided when available</li>\r\n<li><code>NotAvailable</code> - Location services are not available, and no user action can make them available</li>\r\n<li><code>PendingApproval</code> - Location service availability is pending response from the user for approval</li>\r\n<li><code>NotApproved</code> - Access to location service has not been approved by the user for this application</li>\r\n<li><code>Active</code> - A location has been provided, and future updates my occur based on<code>movementThreshold</code></li>\r\n<li><code>Failed</code> - Location support is available, but the more recent attempt to determine location failed</li>\r\n</ul>\r\n<h4><code>available</code>:</h4>\r\n<p>This value will be set to <code>true</code> if location services are available and approved, and your application should expect location updates. Typically this will mean that the status is one of <code>Available</code>, <code>Active</code>, or <code>Failed</code>. This member is provided as a convenience to avoid having to do more sophisticated analysis of <code>status</code>.</p>\r\n<h3>Examples:</h3>\r\n<p>Simple location control that updates local view model.</p>\r\n<pre>{ control: \"location\", binding: \"myLoc\", movementThreshold: 500 }</pre>\r\n<p>Location control that updates location in view model on server on every location change.</p>\r\n<pre>{ control: \"location\", binding: { value: \"myLoc\", sync: \"change\" } }</pre>\r\n<p>Location control that calls a command function on the server every time the location changes.</p>\r\n<pre>{ control: \"location\", binding: { value: \"myLoc\", onUpdate: { command: \"setPos\", pos: \"{myLoc.coordinate}\" } }</pre>\r\n<p>Location control and button that passes location via command when pressed. Button is shown only if location services are present, and enabled only if a location has been established.</p>\r\n<pre>{ control: \"location\", binding: \"myLoc\" },\r\n{ \r\n  control: \"button\", caption: \"Use location\", visibility: \"{myLoc.available}\", enabled: \"{myLoc.coordinate}\", \r\n  binding: { command: \"doLocationSearch\", location: \"{myLoc.coordinate}\" } \r\n}\r\n</pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/205268428-location-control/index.html"
    },
    {
      "id": 206058767,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/206058767-Password-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/206058767-Password-Control",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 10,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-11T17:51:45Z",
      "updated_at": "2016-05-19T23:10:55Z",
      "name": "Password Control",
      "title": "Password Control",
      "body": "<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>font</code> (<a href=\"/hc/en-us/articles/205325098\">font</a>)</li>\r\n<li><code>placeholder</code></li>\r\n</ul>\r\n<h3>Bindings:</h3>\r\n<ul>\r\n<li><code>value</code></li>\r\n</ul>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"password\", binding: \"userpass\", width: 200 },\r\n</code></pre>\r\n<pre><code>{ control: \"password\", binding: { value: \"userpass\" }, placeholder: \"enter password\", width: 200 },\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/206058767-password-control/index.html"
    },
    {
      "id": 205268128,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205268128-Picker-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205268128-Picker-Control",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 11,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-11T17:53:10Z",
      "updated_at": "2016-05-19T23:48:36Z",
      "name": "Picker Control",
      "title": "Picker Control",
      "body": "<h3>Binding</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>items</code> - the array of elements in the list.</li>\r\n<li><code>itemValue</code> (defaults to \"{$data}\") - a token string applied to each \"items\" element to construct the string to display in the list. For example: \"User: {firstName} {lastName}\".</li>\r\n<li><code>selection</code> - the location in the view model where the current selection is maintained. If select is Single, then the location referred to by selection should contain a single item. If select is Multiple, then the location referred to by selection should contain an array of zero or more items.</li>\r\n<li><code>selectionItem</code> (defaults to $data) - This is what is placed into \"selection\" (per item) and this is applied to each item in \"items\" for the purpose of matching items with selection items when setting selection state for the control. For example, if the selectionItem was \"{itemId}\", then the selection binding would be one or more elements of the \"{itemId}\" applied to the selected items. When resetting item selection, \"{itemId}\" will be applied to each list item, and the result will be compared with the value(s) in \"selection\" to see if the item should be selected. In the case of the default, the selection list will contain deep copies of the list view items, and the selection comparison will be a deep compare of those items with the list view items.</li>\r\n</ul>\r\n<p><strong>Commands</strong></p>\r\n<ul>\r\n<li><code>onSelectionChange</code> command - context is the item that is now selected</li>\r\n</ul>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"picker\", width: 150, binding: {\r\n    items: \"colors\", itemContent: \"Color: {name}\", selection: \"selectedColor\", selectionItem: \"value\", \r\n    onSelectionChange: { command: \"clicked\", colorName: \"{name}\" } \r\n    } \r\n}</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/205268128-picker-control/index.html"
    },
    {
      "id": 206063847,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/206063847-ProgressBar-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/206063847-ProgressBar-Control",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 12,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-12T01:43:37Z",
      "updated_at": "2016-05-19T23:05:01Z",
      "name": "ProgressBar Control",
      "title": "ProgressBar Control",
      "body": "<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>minimum</code> - Defaults to 0.0</li>\r\n<li><code>maximum</code> - Defaults to 1.0</li>\r\n</ul>\r\n<h3>Bindings:</h3>\r\n<ul>\r\n<li><code>value</code></li>\r\n</ul>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"progressbar\", minimum: 0, maximum: 100, binding: \"theValue\", width: 300 },\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/206063847-progressbar-control/index.html"
    },
    {
      "id": 205273898,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205273898-ProgressRing-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205273898-ProgressRing-Control",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 13,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-12T01:43:55Z",
      "updated_at": "2016-05-19T23:05:22Z",
      "name": "ProgressRing Control",
      "title": "ProgressRing Control",
      "body": "<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>value</code> - Progress animation on/off</li>\r\n</ul>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"progressring\", value: \"{shouldAnimate}\" },\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/205273898-progressring-control/index.html"
    },
    {
      "id": 206058747,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/206058747-Rectangle-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/206058747-Rectangle-Control",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 14,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-11T17:51:10Z",
      "updated_at": "2016-06-03T17:04:57Z",
      "name": "Rectangle Control",
      "title": "Rectangle Control",
      "body": "<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>border</code> (<a href=\"/hc/en-us/articles/205325048\">color</a>)</li>\r\n<li><code>borderThickness</code> (<a href=\"/hc/en-us/articles/205325108\">thickness</a>)</li>\r\n<li><code>cornerRadius</code></li>\r\n<li><font face=\"monospace, monospace\">color</font> (<a href=\"/hc/en-us/articles/205325048\">color</a>)</li>\r\n</ul>\r\n<h3>Bindings:</h3>\r\n<ul>\r\n<li><code>onTap</code> (command + params)</li>\r\n</ul>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"rectangle\", width: \"200\", height: \"200\", fill: \"Green\" },\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/206058747-rectangle-control/index.html"
    },
    {
      "id": 205268028,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205268028-ScrollView-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205268028-ScrollView-Control",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 15,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-11T17:50:23Z",
      "updated_at": "2016-05-19T23:06:21Z",
      "name": "ScrollView Control",
      "title": "ScrollView Control",
      "body": "<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>orientation</code> = [Vertical], Horizontal</li>\r\n<li><code>contents</code></li>\r\n</ul>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"scrollview\", orientation: \"Horizontal\", height: 150, width: 150, contents: [\r\n    { control: \"image\", height: 300, width: 300, resource: \"{image}\" },\r\n] },\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/205268028-scrollview-control/index.html"
    },
    {
      "id": 205268108,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205268108-Slider-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205268108-Slider-Control",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 16,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-11T17:52:23Z",
      "updated_at": "2016-05-19T23:06:42Z",
      "name": "Slider Control",
      "title": "Slider Control",
      "body": "<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>minimum</code></li>\r\n<li><code>maximum</code></li>\r\n</ul>\r\n<h3>Bindings:</h3>\r\n<ul>\r\n<li><code>value</code></li>\r\n</ul>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"slider\", minimum: 0, maximum: 20, binding: \"theValue\", width: 300 },\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/205268108-slider-control/index.html"
    },
    {
      "id": 205268038,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205268038-StackPanel-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205268038-StackPanel-Control",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 17,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-11T17:50:33Z",
      "updated_at": "2016-05-20T18:40:23Z",
      "name": "StackPanel Control",
      "title": "StackPanel Control",
      "body": "<h3>Overview:</h3>\r\n<p>The <code>stackpanel</code> control is a container control for organizing child controls in a linear layout on a single line. The <code>orientation</code> of that linear layout can be either horizontal or vertical.</p>\r\n<p>Child controls can align themselves perpendicular to the layout direction via their <code>horizontalAlignment</code> or <code>verticalAlignment</code> attributes. So, for example, in a vertical stackpanel, child controls can set the <code>horizontalAlignment</code> property to indicate how they should be aligned horizontally.</p>\r\n<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>orientation</code> = [Vertical], Horizontal</li>\r\n<li><code>padding</code> (<a class=\"internal present\" href=\"https://github.com/SynchroLabs/Synchro/wiki/Thickness-Specification\">thickness</a>)</li>\r\n<li><code>contents</code></li>\r\n</ul>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"stackpanel\", orientation: \"Horizontal\", margin: { top: 10 }, contents: [\r\n    { control: \"button\", caption: \"Login\", width: 125, binding: \"login\" },\r\n    { control: \"button\", caption: \"Cancel\", verticalAlignment: \"Top\", width: 125, binding: \"cancel\" },\r\n] },\r\n</code></pre>\r\n<h3>Notes:</h3>\r\n<h4>Flexible Space Allocation</h4>\r\n<p>Any space remaining in the layout direction will be divided between any \"star-sized\" children based on their specified weight.</p>\r\n<p>A dimension specified as \"*\" will have a weight of 1. If a quantity precedes the star size, then that quantity specifies the weight. For example, \"3*\" specifies a weight of 3. Each control gets a proportion of the space equal to the proportion of their specified weight to the total of all specified weights.</p>\r\n<p>In the example below, the text control width will be computed, then any remaining width available in the stackpanel with be divided between the edit control and the rectangle, with the edit control receiving 1/4 of that space, and the rectangle receiving 3/4.</p>\r\n<pre><code>{ control: \"stackpanel\", width: \"480\", height: \"*\", orientation: \"Horizontal\", contents: [\r\n    { control: \"text\", value: \"Caption\" },\r\n    { control: \"edit\", binding: \"userName\", width: \"*\" },\r\n    { control: \"rectangle\", fill: \"Green\", width: \"3*\", height: \"25\" }, <br />] }</code></pre>\r\n<h4>Alignment</h4>\r\n<p>Controls in a <code>stackpanel</code> will always be aligned with the start of the stackpanel in the orientation direction. That is to say that in a vertical stackpanel, child controls will start at the top, and in a horizontal stackpanel, child controls will start at the left. If you would like to add space before, between, or after the stackpanel contents, there are a couple of ways to do that.</p>\r\n<p>If you simply want to align the controls as a group, you can surround your stackpanel with a <code>border</code> control and then align the child stackpanel within the border. If you want more flexibility, you can instead add \"spacer\" elements around your stackpanel contents (such as <code>rectangle</code> controls with no <code>fill</code> color set) and you can even use star sizing on those controls to get flexible spacing.</p>\r\n<p>Items in a <code>stackpanel</code> may be aligned in the opposite dimension of the <code>stackpanel</code> orientation.  For example, in a vertical <code>stackpanel</code>, each item may be horizontally aligned Left, Center, or Right (via the <code>horizontalAlignment</code> attribute), or might have a <code>width</code> set to \"*\" to indicate that it should stretch to fill the panel horizontally.</p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/205268038-stackpanel-control/index.html"
    },
    {
      "id": 206058777,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/206058777-Text-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/206058777-Text-Control",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 18,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-11T17:52:07Z",
      "updated_at": "2016-06-03T17:06:11Z",
      "name": "Text Control",
      "title": "Text Control",
      "body": "<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>ellipsize</code> - boolean</li>\r\n<li><code>font</code> (<a href=\"/hc/en-us/articles/205325098\">font</a>)</li>\r\n<li><font face=\"monospace, monospace\">color</font> (<a href=\"/hc/en-us/articles/205325048\">color</a>)</li>\r\n<li><code>textAlignment</code> - one of [Left], Center, Right</li>\r\n<li><code>value</code> - text contents of control</li>\r\n</ul>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"text\", value: \"This is some text\", fontsize: 10, width: 140, color: \"Red\" }\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/206058777-text-control/index.html"
    },
    {
      "id": 220385867,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/220385867-Toggle-Button.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/220385867-Toggle-Button",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 19,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2016-06-03T17:01:59Z",
      "updated_at": "2016-06-03T17:03:56Z",
      "name": "Toggle Button",
      "title": "Toggle Button",
      "body": "<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>caption</code> - Button caption text</li>\r\n<li><code>checkedcaption</code> - Button caption text (when checked)</li>\r\n<li><code>uncheckedcaption</code> - Button caption text (when unchecked)</li>\r\n<li><code>icon</code> - Button icon name from <a href=\"https://design.google.com/icons/\">Material Design icons</a> set</li>\r\n<li><code>checkedicon</code> - Button icon name (when checked)</li>\r\n<li><code>uncheckedicon</code> - Button icon name (when unchecked)</li>\r\n<li><code>color</code> (<a href=\"/hc/en-us/articles/205325048\">color</a>) - Caption font color</li>\r\n<li><code>checkedcolor</code> (<a href=\"/hc/en-us/articles/205325048\">color</a>) - Caption font color (when checked)</li>\r\n<li><code>uncheckedcolor</code> (<a href=\"/hc/en-us/articles/205325048\">color</a>) - Caption font color (when unchecked)</li>\r\n<li><code>borderless</code> - boolean, if true, button will have no border or background (defaults to true)</li>\r\n</ul>\r\n<h3>Bindings:</h3>\r\n<ul>\r\n<li><code>value</code> - boolean - the \"checked\" state</li>\r\n<li><code>onToggle</code> (command + params)</li>\r\n</ul>\r\n<h3>Example:</h3>\r\n<pre>{ control: \"togglebutton\", icon: \"thump_up\", caption: \"Like\", borderless: true, binding: \"doesLike\" },<br /><br />{ control: <span class=\"hljs-string\">\"togglebutton\"</span>, checkedicon: \"thumb_up\", uncheckedicon: \"thumb_down\", caption: <span class=\"hljs-string\">\"Like\"</span>, binding: { <span class=\"hljs-keyword\">value</span>: <span class=\"hljs-string\">\"doesLike\"</span>, onToggle: <span class=\"hljs-string\">\"likeToggled\"</span> } }</pre>\r\n<h3>Notes</h3>\r\n<p>To reference an icon, use the name from the Material Design icons set (all lower case, with underscores between words, such as \"camera_alt\").</p>\r\n<p>You may specify a static caption, icon, or color (that doesn't change based on the checked state of the toggle button).  Alternatively, you may specify the checked AND unchecked values for any or all of these items, where the toggle button will update its visual state based on those values.</p>\r\n<p>Note that if you do not specify any checked/unchecked visual state attributes, the toggle button will be shown in the specified (or default) color when checked, or in gray with unchecked (modelled after the Facebook \"Like\" button).</p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/220385867-toggle-button/index.html"
    },
    {
      "id": 205268138,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205268138-Toggle-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205268138-Toggle-Control",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 20,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-11T17:53:24Z",
      "updated_at": "2016-05-19T23:07:49Z",
      "name": "Toggle Control",
      "title": "Toggle Control",
      "body": "<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>caption</code></li>\r\n<li><code>font</code> (<a href=\"/hc/en-us/articles/205325098\">font</a>)</li>\r\n<li><code>onLabel</code> (Windows/Android only)</li>\r\n<li><code>offLabel</code> (Windows/Android only)</li>\r\n</ul>\r\n<h3>Bindings:</h3>\r\n<ul>\r\n<li><code>value</code></li>\r\n<li><code>onToggle</code> (command + params)</li>\r\n</ul>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"toggle\", caption: \"Is On\", binding: \"isSwitchOn\" }\r\n</code></pre>\r\n<pre><code>{ control: \"toggle\", caption: \"Is On\", binding: { value: \"isSwitchOn\", onToggle: \"wasToggled\" } }\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/205268138-toggle-control/index.html"
    },
    {
      "id": 205268158,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205268158-WebView-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205268158-WebView-Control",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 21,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-11T17:53:40Z",
      "updated_at": "2016-05-19T23:08:41Z",
      "name": "WebView Control",
      "title": "WebView Control",
      "body": "<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n</ul>\r\n<p>One of:</p>\r\n<ul>\r\n<li><code>contents</code> (html string)</li>\r\n<li><code>url</code></li>\r\n</ul>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"webview\", width: 400, height: 200, contents: \"&lt;h1&gt;Local Content&lt;/h1&gt;&lt;p&gt;This is local content&lt;/p&gt;\" },\r\n</code></pre>\r\n<pre><code>{ control: \"webview\", width: 400, height: 200, url: \"http://www.google.com\" },\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/205268158-webview-control/index.html"
    },
    {
      "id": 206063937,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/206063937-WrapPanel-Control.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/206063937-WrapPanel-Control",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 22,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-12T01:44:24Z",
      "updated_at": "2016-05-19T23:09:08Z",
      "name": "WrapPanel Control",
      "title": "WrapPanel Control",
      "body": "<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>orientation</code> - [Horizontal], Vertical</li>\r\n<li><code>itemHeight</code> - optional</li>\r\n<li><code>itemWidth</code> - optional</li>\r\n</ul>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"wrappanel\", orientation: \"Horizontal\", contents: [\r\n    { control: \"button\", caption: \"Login\", width: 125, binding: \"login\" },\r\n    { control: \"button\", caption: \"Cancel\", width: 125, binding: \"cancel\" },\r\n] },\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/206063937-wrappanel-control/index.html"
    },
    {
      "id": 205273908,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/205273908-Android-ActionBar-Controls.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/205273908-Android-ActionBar-Controls",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 23,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-12T01:45:39Z",
      "updated_at": "2016-06-03T17:15:05Z",
      "name": "Android: ActionBar Controls",
      "title": "Android: ActionBar Controls",
      "body": "<h2>actionBar.item</h2>\r\n<h3>Overview:</h3>\r\n<p>The <code>actionBar.item</code> control represents an Android Action Bar item.</p>\r\n<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>text</code></li>\r\n<li><code>icon</code> - icon name from <a href=\"https://design.google.com/icons/\">Material Design icons</a> set</li>\r\n<li><code>showAsAction</code> - Always, IfRoom</li>\r\n<li><code>showActionAsText</code> - boolean</li>\r\n</ul>\r\n<h3>Bindings:</h3>\r\n<ul>\r\n<li><code>onClick</code> (command + params)</li>\r\n</ul>\r\n<p>  </p>\r\n<h2>actionBar.toggle</h2>\r\n<h3>Overview:</h3>\r\n<p>The actionBar<code>.toggle</code> control represents an Android Action Bar item that can be toggled on and off.</p>\r\n<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>text</code></li>\r\n<li><code>icon</code> - icon name from <a href=\"https://design.google.com/icons/\">Material Design icons</a> set</li>\r\n<li><code>uncheckedText</code></li>\r\n<li><code>uncheckedIcon</code></li>\r\n<li><code>checkedText</code></li>\r\n<li><code>checkedIcon</code></li>\r\n<li><code>showAsAction</code> - Always, IfRoom</li>\r\n<li><code>showActionAsText</code> - boolean</li>\r\n</ul>\r\n<h3>Bindings:</h3>\r\n<ul>\r\n<li><code>value</code></li>\r\n<li><code>onToggle</code> (command + params)</li>\r\n</ul>\r\n<h3>Notes:</h3>\r\n<p>If <code>text</code> and/or <code>icon</code> are used, the system will attempt to style those values to show the checked/unchecked state. Alternatively, if you specify pairs of values using <code>uncheckedtext</code> and <code>checkedtext</code> or <code>uncheckedicon</code> and <code>checkedicon</code> then the system will use those values to show the unchecked/checked state.</p>\r\n<div class=\"article-body markdown\">\r\n<p>To reference an icon, use the name from the Material Design icons set (all lower case, with underscores between words, such as \"camera_alt\").</p>\r\n</div>\r\n<div class=\"article-attachments\"> </div>\r\n<footer class=\"article-footer\"></footer>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/205273908-android-actionbar-controls/index.html"
    },
    {
      "id": 206063957,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/206063957-iOS-NavBar-and-ToolBar-Controls.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/206063957-iOS-NavBar-and-ToolBar-Controls",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 24,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-12T01:45:08Z",
      "updated_at": "2016-06-03T17:18:12Z",
      "name": "iOS: NavBar and ToolBar Controls",
      "title": "iOS: NavBar and ToolBar Controls",
      "body": "<p>For more information about iOS toolbars and navigation bars, see: <a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/Bars.html#//apple_ref/doc/uid/TP40006556-CH12-SW33\">iOS Human Interface Guidelines - Bars</a>.</p>\r\n<p>For a list of the icons bundled with Synchro (which can be used in the <code>icon</code> attribute of any controls below), see: <a href=\"https://design.google.com/icons/\">Material Design icons</a> set. To reference an icon, use the name from the Material Design icons set (all lower case, with underscores between words, such as \"camera_alt\").</p>\r\n<h2>navBar.button and toolBar.button</h2>\r\n<h3>Overview:</h3>\r\n<p>The <code>navBar.button</code> control represents an iOS NavBar button.  You will generally have at most one such button, which will be positioned at the right of the navigation bar.</p>\r\n<p>The <code>toolBar.button</code> control represents an iOS ToolBar button.</p>\r\n<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>systemItem</code></li>\r\n<li><code>text</code></li>\r\n<li><code>icon</code></li>\r\n</ul>\r\n<h3>Bindings:</h3>\r\n<ul>\r\n<li><code>onClick</code> (command + params)</li>\r\n</ul>\r\n<h3>Notes:</h3>\r\n<p>If <code>systemItem</code> is used, you may specify any of the system defined buttons, including: Action, Add, Bookmarks, Camera, Cancel, Compose, Done, Edit, FastForward, FixedSpace, FlexibleSpace, Organize, PageCurl, Pause, Play, Redo, Refresh, Reply, Rewind, Save, Search, Stop, Trash, and Undo.</p>\r\n<p>Alternatively, you may specify text and/or an icon to make a custom button.</p>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"navBar.button\", systemItem: \"Camera\", binding: \"doOnClick\" }\r\n</code></pre>\r\n<h2>navBar.toggle and toolBar.toggle</h2>\r\n<h3>Overview:</h3>\r\n<p>The <code>navBar.toggle</code> control represents an iOS NavBar toggle button.  You will generally have at most one such button, which will be positioned at the right of the navigation bar.</p>\r\n<p>The <code>toolBar.toggle</code> control represents an iOS ToolBar button.</p>\r\n<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>text</code></li>\r\n<li><code>icon</code></li>\r\n<li><code>uncheckedtext</code></li>\r\n<li><code>checkedtext</code></li>\r\n<li><code>uncheckedicon</code></li>\r\n<li><code>checkedicon</code></li>\r\n</ul>\r\n<h3>Bindings:</h3>\r\n<ul>\r\n<li><code>value</code></li>\r\n<li><code>onToggle</code> (command + params)</li>\r\n</ul>\r\n<h3>Notes:</h3>\r\n<p>If <code>text</code> and/or <code>icon</code> are used, the system will attempt to style those values to show the checked/unchecked state. Alternatively, if you specify pairs of values using <code>uncheckedtext</code> and <code>checkedtext</code> or <code>uncheckedicon</code> and <code>checkedicon</code> then the system will use those values to show the unchecked/checked state.</p>\r\n<h3>Example:</h3>\r\n<pre><code>{ control: \"navBar.toggle\", checkedicon: \"star-mini\", uncheckedicon: \"star-empty-mini\", \r\n  binding: { value: \"fav\", onToggle: \"favToggled\" } }\r\n</code></pre>\r\n<p> </p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/206063957-ios-navbar-and-toolbar-controls/index.html"
    },
    {
      "id": 206063947,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/206063947-Windows-CommandBar-Controls.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/206063947-Windows-CommandBar-Controls",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 25,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 200768748,
      "created_at": "2015-05-12T01:44:48Z",
      "updated_at": "2016-06-03T17:20:26Z",
      "name": "Windows: CommandBar Controls",
      "title": "Windows: CommandBar Controls",
      "body": "<h2>commandBar.button</h2>\r\n<h3>Overview:</h3>\r\n<p>The <code>commandBar.button</code> control represents a Windows CommandBar button.</p>\r\n<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>text</code></li>\r\n<li><code>winIcon</code> - from <a href=\"https://msdn.microsoft.com/en-us/windows/uwp/controls-and-patterns/segoe-ui-symbol-font\">Segoe UI Symbol Font</a></li>\r\n<li><code>icon</code> - Button icon name from <a href=\"https://design.google.com/icons/\">Material Design icons</a> set</li>\r\n<li><code>commandBar</code> - Top, [Bottom] (Top not supported on WinPhone)</li>\r\n<li><code>commandType</code> - [Primary], Secondary</li>\r\n</ul>\r\n<h3>Bindings:</h3>\r\n<ul>\r\n<li><code>onClick</code> (command + params)</li>\r\n</ul>\r\n<h3>Example:</h3>\r\n<pre><code class=\"hljs css\"><span class=\"hljs-rules\"><span class=\"hljs-rule\"><span class=\"hljs-value\">{ control<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>commandBar.button<span class=\"pl-pds\">\"</span></span>, text<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Add<span class=\"pl-pds\">\"</span></span>, icon<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Add<span class=\"pl-pds\">\"</span></span>, commandBar<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Bottom<span class=\"pl-pds\">\"</span></span>, commandType<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Secondary<span class=\"pl-pds\">\"</span></span>, binding<span class=\"pl-k\">:</span> { command<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>vary<span class=\"pl-pds\">\"</span></span>, amount<span class=\"pl-k\">:</span> <span class=\"pl-c1\">1</span> } }\r\n</span></span></span></code></pre>\r\n<p> </p>\r\n<h2>commandBar.toggle</h2>\r\n<h3>Overview:</h3>\r\n<p>The <code>commandBar.toggle</code> control represents a Windows CommandBar button that can be toggled on and off.</p>\r\n<h3>Attributes:</h3>\r\n<ul>\r\n<li><a href=\"/hc/en-us/articles/219657607\">Common Control Attributes</a></li>\r\n<li><code>text</code></li>\r\n<li><code>winIcon</code> - from <a href=\"https://msdn.microsoft.com/en-us/windows/uwp/controls-and-patterns/segoe-ui-symbol-font\">Segoe UI Symbol Font</a></li>\r\n<li><code>icon</code> - Button icon name from <a href=\"https://design.google.com/icons/\">Material Design icons</a> set</li>\r\n<li><code>commandType</code> - [Primary], Secondary</li>\r\n</ul>\r\n<h3>Bindings:</h3>\r\n<ul>\r\n<li><code>value</code></li>\r\n<li><code>onToggle</code> (command + params)</li>\r\n</ul>\r\n<h3>Example:</h3>\r\n<pre><code class=\"hljs css\"><span class=\"hljs-rules\"><span class=\"hljs-rule\"><span class=\"hljs-value\">{ control<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>commandBar.toggle<span class=\"pl-pds\">\"</span></span>, text<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Favorite<span class=\"pl-pds\">\"</span></span>, winIcon<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Favorite<span class=\"pl-pds\">\"</span></span>, binding<span class=\"pl-k\">:</span> { value<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>toggleState<span class=\"pl-pds\">\"</span></span>, onToggle<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>onToggle<span class=\"pl-pds\">\"</span></span> } }\r\n</span></span></span></code></pre>\r\n<p> </p>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/200768748-controls/206063947-windows-commandbar-controls/index.html"
    },
    {
      "id": 214642008,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/214642008-Hello-World.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/214642008-Hello-World",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 0,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 203447908,
      "created_at": "2015-12-05T09:28:34Z",
      "updated_at": "2015-12-05T09:42:01Z",
      "name": "Hello World",
      "title": "Hello World",
      "body": "<pre><code>// Hello page\r\n//\r\nexports.View =\r\n{\r\n    title: \"Hello World\",\r\n    elements:\r\n    [\r\n        { control: \"stackpanel\", orientation: \"Horizontal\", contents: [\r\n            { control: \"text\", value: \"First name:\", fontsize: 12, width: 200, \r\n              textAlignment: \"Right\", margin: { top: 10, right: 10 } },\r\n            { control: \"edit\", fontsize: 12, width: 200, binding: \"firstName\" },\r\n        ] },\r\n        { control: \"stackpanel\", orientation: \"Horizontal\", contents: [\r\n            { control: \"text\", value: \"Last name:\", fontsize: 12, width: 200, \r\n              textAlignment: \"Right\", margin: { top: 10, right: 10 } },\r\n            { control: \"edit\", fontsize: 12, width: 200, binding: \"lastName\" },\r\n        ] },\r\n\r\n        { control: \"text\", value: \"Hello {firstName} {lastName}\", fontsize: 12 },\r\n    ]\r\n}\r\n\r\nexports.InitializeViewModel = function(context, session)\r\n{\r\n    var viewModel =\r\n    {\r\n        firstName: \"Planet\",\r\n        lastName: \"Earth\",\r\n    }\r\n    return viewModel;\r\n}\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/203447908-samples/214642008-hello-world/index.html"
    },
    {
      "id": 215361167,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/215361167-Autocomplete.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/215361167-Autocomplete",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 1,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 203447908,
      "created_at": "2015-12-05T09:44:00Z",
      "updated_at": "2015-12-05T09:44:00Z",
      "name": "Autocomplete",
      "title": "Autocomplete",
      "body": "<pre><code>// Auto-complete\r\n//\r\nvar lodash = require(\"lodash\");\r\n\r\nvar states = \r\n[\r\n    \"Alabama\", \"Alaska\", \"Arizona\", \"Arkansas\", \"California\", \"Colorado\", \"Connecticut\", \"Delaware\", \"District of Columbia\", \"Florida\", \"Georgia\",\r\n    \"Hawaii\", \"Idaho\", \"Illinois\", \"Indiana\", \"Iowa\", \"Kansas\", \"Kentucky\", \"Louisiana\", \"Maine\", \"Maryland\", \"Massachusetts\", \"Michigan\", \r\n    \"Minnesota\", \"Mississippi\", \"Missouri\", \"Montana\", \"Nebraska\", \"Nevada\", \"New Hampshire\", \"New Jersey\", \"New Mexico\", \"New York\", \"North Carolina\",\r\n    \"North Dakota\", \"Ohio\", \"Oklahoma\", \"Oregon\", \"Pennsylvania\", \"Rhode Island\", \"South Carolina\", \"South Dakota\", \"Tennessee\", \"Texas\", \"Utah\",\r\n    \"Vermont\", \"Virginia\", \"Washington\", \"West Virginia\", \"Wisconsin\", \"Wyoming\"\r\n];\r\n\r\nexports.View =\r\n{\r\n    title: \"Auto-Complete\",\r\n    elements:\r\n    [\r\n        { control: \"text\", value: \"Enter a State\", fontsize: 12, margin: { bottom: 0 } },\r\n        { control: \"edit\", binding: { value: \"searchText\", sync: \"change\" }, placeholder: \"state name\", width: 200 },\r\n        { control: \"listbox\", width: 250, height: 300, select: \"None\", binding: { items: \"suggestions\",  onItemClick: { command: \"suggestionSelected\", suggestion: \"{$data}\" } }, visibility: \"{suggestions}\"},\r\n        { control: \"button\", caption: \"Check\", width: 125, binding: \"check\" },\r\n    ]\r\n}\r\n\r\nexports.InitializeViewModel = function(context, session)\r\n{\r\n    var viewModel =\r\n    {\r\n        searchText: \"\",\r\n        suggestions: [],\r\n    }\r\n    return viewModel;\r\n}\r\n\r\nexports.OnViewModelChange = function(context, session, viewModel, source, changes)\r\n{\r\n    // If the source of the change was the view and the thing that changed was searchText, then lets update suggestions...\r\n    //\r\n    if ((source == \"view\") &amp;&amp; lodash.find(changes, { path: 'searchText' }))\r\n    {\r\n        viewModel.suggestions = [];\r\n        if (viewModel.searchText)\r\n        {\r\n            var searchLower = viewModel.searchText.toLowerCase();\r\n            for (var i = 0; i &lt; states.length; i++)\r\n            {\r\n                if (states[i].toLowerCase().indexOf(searchLower) == 0)\r\n                {\r\n                    if (states[i].length == searchLower.length)\r\n                    {\r\n                        // If it's an exact match, we don't need suggestions\r\n                        break;\r\n                    }\r\n                    viewModel.suggestions.push(states[i]);\r\n                }\r\n            }        \r\n        }\r\n    }\r\n}\r\n\r\nexports.Commands = \r\n{\r\n    suggestionSelected: function(context, session, viewModel, params)\r\n    {\r\n        viewModel.searchText = params.suggestion;\r\n        viewModel.suggestions = [];\r\n\r\n    },\r\n    check: function(context, session, viewModel)\r\n    {\r\n        if ((viewModel.searchText == null) || (viewModel.searchText.length == 0))\r\n        {\r\n            return Synchro.showMessage(context, { message: \"Please enter a state!\" });\r\n        }\r\n        else if (lodash.indexOf(states, viewModel.searchText) != -1)\r\n        {\r\n            return Synchro.showMessage(context, { message: \"It looks like '{searchText}' is a state, congrats!\" });\r\n        }\r\n        else\r\n        {\r\n            return Synchro.showMessage(context, { message: \"It looks like '{searchText}' is a not state, sorry.\" });\r\n        }\r\n    },\r\n}\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/203447908-samples/215361167-autocomplete/index.html"
    },
    {
      "id": 215361147,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/215361147-Countdown.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/215361147-Countdown",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 2,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 203447908,
      "created_at": "2015-12-05T09:30:53Z",
      "updated_at": "2016-06-03T17:08:25Z",
      "name": "Countdown",
      "title": "Countdown",
      "body": "<pre><code>// Countdown page\r\n//\r\nexports.View =\r\n{\r\n    title: \"Countdown\",\r\n    elements: \r\n    [\r\n        { control: \"stackpanel\", orientation: \"Horizontal\", visibility: \"{isLoading}\", contents: [\r\n            { control: \"progressring\", height: 50, width: 50, value: \"{isLoading}\", verticalAlignment: \"Center\" },\r\n            { control: \"text\", value: \"Loading...\", color: \"Red\", fontsize: 24, verticalAlignment: \"Center\" },\r\n        ] },\r\n        { control: \"stackpanel\", orientation: \"Vertical\", visibility: \"{!isLoading}\", contents: [\r\n            { control: \"text\", value: \"Count: {count}\", color: \"Green\", font: { size: 24, bold: true } },\r\n            { control: \"progressbar\", value: \"{count}\", minimum: 0, maximum: 10, width: 300 },\r\n            { control: \"button\", caption: \"Start Countdown\", binding: \"start\", visibility: \"{!isCounting}\" },\r\n            { control: \"button\", caption: \"Pause Countdown\", binding: \"stop\", visibility: \"{isCounting}\" },\r\n        ] }\r\n    ]\r\n}\r\n\r\nexports.InitializeViewModel = function(context, session)\r\n{\r\n    var viewModel =\r\n    {\r\n        count: 0,\r\n        isLoading: true,\r\n        isCounting: false\r\n    }\r\n    return viewModel;\r\n}\r\n\r\nexports.LoadViewModel = function * (context, session, viewModel)\r\n{\r\n    yield Synchro.yieldAwaitable(context, function(cb){ waitInterval(4000, cb) });    \r\n    viewModel.count = 10;\r\n    viewModel.isLoading = false;\r\n}\r\n\r\nfunction waitInterval(intervalMillis, callback)\r\n{\r\n    setTimeout(function(){callback()}, intervalMillis);\r\n}\r\n\r\nexports.Commands = \r\n{\r\n    start: function * (context, session, viewModel, params)\r\n    {\r\n        viewModel.isCounting = true;\r\n\r\n        while (viewModel.isCounting &amp;&amp; (viewModel.count &gt; 0))\r\n        {\r\n            yield Synchro.yieldAwaitable(context, function(cb){ waitInterval(1000, cb) });\r\n            if (viewModel.isCounting)\r\n            {\r\n                viewModel.count--;            \r\n                yield Synchro.interimUpdateAwaitable(context);                \r\n            }\r\n        }\r\n\r\n        viewModel.isCounting = false;\r\n    },\r\n    stop: function(context, session, viewModel, params)\r\n    {\r\n        viewModel.isCounting = false;\r\n    },\r\n}\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/203447908-samples/215361147-countdown/index.html"
    },
    {
      "id": 215361157,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/215361157-Counter.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/215361157-Counter",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 3,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 203447908,
      "created_at": "2015-12-05T09:33:14Z",
      "updated_at": "2016-06-03T17:08:56Z",
      "name": "Counter",
      "title": "Counter",
      "body": "<pre><code>// Counter page\r\n//\r\nvar fontStyle = \r\n{\r\n    normal: { color: \"Green\", isBold: false },\r\n    highlighted: { color: \"Red\", isBold: true }\r\n}\r\n\r\nexports.View =\r\n{\r\n    title: \"Click Counter\",\r\n    elements: \r\n    [\r\n        { control: \"text\", value: \"Count: {count}\", color: \"{font.color}\", font: { size: 24, bold: \"{font.isBold}\" } },\r\n        { control: \"button\", caption: \"Increment\", binding: { command: \"vary\", amount: 1 } },\r\n        { control: \"button\", caption: \"Decrement\", binding: { command: \"vary\", amount: -1 }, enabled: \"{count}\" },\r\n        { control: \"button\", caption: \"Decrement\", binding: \"reset\", enabled: \"{count}\" },\r\n        },\r\n    ]\r\n}\r\n\r\nexports.InitializeViewModel = function(context, session)\r\n{\r\n    var viewModel =\r\n    {\r\n        count: session.count,\r\n        font: fontStyle.normal\r\n    }\r\n    return viewModel;\r\n}\r\n\r\nexports.OnViewModelChange = function(context, session, viewModel, source, changes)\r\n{\r\n    viewModel.font = (viewModel.count &lt; 10) ? fontStyle.normal : fontStyle.highlighted; \r\n}\r\n\r\nexports.Commands = \r\n{\r\n    vary: function(context, session, viewModel, params)\r\n    {\r\n        viewModel.count += params.amount;\r\n    },\r\n    reset: function(context, session, viewModel)\r\n    {\r\n        viewModel.count = 0;\r\n    },\r\n}\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/203447908-samples/215361157-counter/index.html"
    },
    {
      "id": 214642018,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/214642018-Font.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/214642018-Font",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 4,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 203447908,
      "created_at": "2015-12-05T09:43:00Z",
      "updated_at": "2015-12-05T09:43:00Z",
      "name": "Font",
      "title": "Font",
      "body": "<pre><code>// Font page\r\n//\r\nexports.View =\r\n{\r\n    title: \"Font\",\r\n    elements:\r\n    [\r\n        { control: \"stackpanel\", orientation: \"Horizontal\", contents: [\r\n            { control: \"button\", width: 150, caption: \"San Serif\", binding: { command: \"setFace\", face: \"SanSerif\" } },\r\n            { control: \"button\", width: 130, caption: \"Serif\", binding: { command: \"setFace\", face: \"Serif\" } },\r\n            { control: \"button\", width: 170, caption: \"Monospace\", binding: { command: \"setFace\", face: \"Monospace\" } },\r\n        ] },\r\n\r\n        { control: \"stackpanel\", orientation: \"Horizontal\", contents: [\r\n            { control: \"text\", value: \"Size\", fontsize: 10, width: 140 },\r\n            { control: \"slider\", minimum: 10, maximum: 50, binding: \"currFont.size\", width: 300 },\r\n        ] },\r\n\r\n        { control: \"stackpanel\", orientation: \"Horizontal\", contents: [\r\n            { control: \"text\", value: \"Bold\", fontsize: 10, width: 140 },\r\n            { control: \"toggle\", binding: \"currFont.bold\", fontsize: 12 },\r\n        ] },\r\n\r\n        { control: \"stackpanel\", orientation: \"Horizontal\", contents: [\r\n            { control: \"text\", value: \"Italic\", fontsize: 10, width: 140 },\r\n            { control: \"toggle\", binding: \"currFont.italic\", fontsize: 12 },\r\n        ] },\r\n\r\n        { control: \"text\", value: \"Testing {currFont.face}\", font: { face: \"{currFont.face}\", size: \"{currFont.size}\", bold: \"{currFont.bold}\", italic: \"{currFont.italic}\" } },\r\n    ]\r\n}\r\n\r\nexports.InitializeViewModel = function(context, session)\r\n{\r\n    var viewModel =\r\n    {\r\n        currFont: \r\n        {\r\n            face: \"Monospace\",\r\n            size: 24,\r\n            bold: false,\r\n            italic: false,\r\n        },\r\n    }\r\n    return viewModel;\r\n}\r\n\r\nexports.Commands =\r\n{\r\n    setFace: function(context, session, viewModel, params)\r\n    {\r\n        viewModel.currFont.face = params.face;\r\n    },\r\n}\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/203447908-samples/214642018-font/index.html"
    },
    {
      "id": 215361187,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/215361187-Image.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/215361187-Image",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 5,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 203447908,
      "created_at": "2015-12-05T09:51:48Z",
      "updated_at": "2015-12-05T09:51:48Z",
      "name": "Image",
      "title": "Image",
      "body": "<pre><code>// Image page\r\n//\r\nexports.View =\r\n{\r\n    title: \"Image\",\r\n    elements:\r\n    [\r\n        { control: \"stackpanel\", orientation: \"Horizontal\", contents: [\r\n            { control: \"text\", value: \"Size\", fontsize: 10, width: 140, verticalAlignment: \"Center\" },\r\n            { control: \"slider\", minimum: 10, maximum: 400, binding: \"size\", width: 300, verticalAlignment: \"Center\" },\r\n            ]\r\n        },\r\n        { control: \"image\", resource: \"http://blob.synchro.io/resources/user.png\", height: \"{size}\", width: \"{size}\" },\r\n    ]\r\n}\r\n\r\nexports.InitializeViewModel = function (context, session)\r\n{\r\n    var viewModel =\r\n    {\r\n        size: 100,\r\n    }\r\n    return viewModel;\r\n}\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/203447908-samples/215361187-image/index.html"
    },
    {
      "id": 215361197,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/215361197-Image-scale.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/215361197-Image-scale",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 6,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 203447908,
      "created_at": "2015-12-05T09:52:42Z",
      "updated_at": "2015-12-05T09:52:42Z",
      "name": "Image scale",
      "title": "Image scale",
      "body": "<pre><code>// Image scaling page\r\n//\r\nexports.View =\r\n{\r\n    title: \"Image Scale\",\r\n    elements:\r\n    [\r\n        { control: \"stackpanel\", orientation: \"Horizontal\", contents: [\r\n            { control: \"button\", width: 150, caption: \"Landscape\", binding: { command: \"setImage\", image: \"landscape\" } },\r\n            { control: \"button\", width: 150, caption: \"Square\", binding: { command: \"setImage\", image: \"square\" } },\r\n            { control: \"button\", width: 150, caption: \"Portrait\", binding: { command: \"setImage\", image: \"portrait\" } },\r\n        ] },\r\n\r\n        { control: \"stackpanel\", orientation: \"Horizontal\", contents: [\r\n            { control: \"button\", width: 150, caption: \"Stretch\", binding: { command: \"setScale\", scale: \"Stretch\" } },\r\n            { control: \"button\", width: 150, caption: \"Fit\", binding: { command: \"setScale\", scale: \"Fit\" } },\r\n            { control: \"button\", width: 150, caption: \"Fill\", binding: { command: \"setScale\", scale: \"Fill\" } },\r\n        ] },\r\n        { control: \"border\", border: \"Red\", borderThickness: \"5\", contents: [\r\n            { control: \"image\", resource: \"{img}\", scale: \"{scale}\", horizontalAlignment: \"{alignH}\", verticalAlignment: \"{alignV}\", margin: 0, height: \"100\", width: \"100\" },\r\n        ] },\r\n\r\n        { control: \"border\", border: \"Red\", borderThickness: \"5\", contents: [\r\n            { control: \"image\", resource: \"{img}\", scale: \"{scale}\", horizontalAlignment: \"{alignH}\", verticalAlignment: \"{alignV}\", margin: 0, width: \"100\" },\r\n        ] },\r\n\r\n        { control: \"border\", border: \"Red\", borderThickness: \"5\", contents: [\r\n            { control: \"image\", resource: \"{img}\", scale: \"{scale}\", horizontalAlignment: \"{alignH}\", verticalAlignment: \"{alignV}\", margin: 0, height: \"100\" },\r\n        ] }\r\n    ]\r\n}\r\n\r\nfunction imageUrl(img)\r\n{\r\n    return \"http://blob.synchro.io/resources/\" + img + \".jpg\";\r\n}\r\n\r\nexports.InitializeViewModel = function (context, session)\r\n{\r\n    var viewModel =\r\n    {\r\n        img: imageUrl(\"landscape\"),\r\n        scale: null,\r\n        alignH: \"Center\",\r\n        alignV: \"Center\",\r\n    }\r\n    return viewModel;\r\n}\r\n\r\nexports.Commands =\r\n{\r\n    setImage: function(context, session, viewModel, params)\r\n    {\r\n        viewModel.img = imageUrl(params.image);\r\n    },\r\n    setScale: function(context, session, viewModel, params)\r\n    {\r\n        viewModel.scale = params.scale;\r\n    },\r\n}\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/203447908-samples/215361197-image-scale/index.html"
    },
    {
      "id": 214642028,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/214642028-Launch-URL.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/214642028-Launch-URL",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 7,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 203447908,
      "created_at": "2015-12-05T09:47:05Z",
      "updated_at": "2015-12-05T09:47:05Z",
      "name": "Launch URL",
      "title": "Launch URL",
      "body": "<pre><code>// Launch URL\r\n//\r\nexports.View =\r\n{\r\n    title: \"Launch URL\",\r\n    elements:\r\n    [\r\n        { control: \"text\", value: \"Primary URL\", fontsize: 12, margin: { bottom: 0 } },\r\n        { control: \"edit\", binding: \"primary\", width: 320 },\r\n        { control: \"text\", value: \"Secondary URL\", fontsize: 12, margin: { bottom: 0 } },\r\n        { control: \"edit\", binding: \"secondary\", width: 320 },\r\n        { control: \"button\", caption: \"Launch\", width: 125, binding: \"launch\" },\r\n    ]\r\n}\r\n\r\nexports.InitializeViewModel = function (context, session)\r\n{\r\n    var viewModel =\r\n    {\r\n        primary: \"\",\r\n        secondary: \"\",\r\n    }\r\n    return viewModel;\r\n}\r\n\r\nexports.Commands = \r\n{\r\n    launch: function (context, session, viewModel)\r\n    {\r\n        return Synchro.launchUrl(context, viewModel.primary, viewModel.secondary);\r\n    },\r\n}</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/203447908-samples/214642028-launch-url/index.html"
    },
    {
      "id": 214642038,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/214642038-Listbox.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/214642038-Listbox",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 8,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 203447908,
      "created_at": "2015-12-05T09:53:49Z",
      "updated_at": "2015-12-05T09:53:49Z",
      "name": "Listbox",
      "title": "Listbox",
      "body": "<pre><code>// List page\r\n//\r\nexports.View =\r\n{\r\n    title: \"List example\",\r\n    elements:\r\n    [\r\n        { control: \"stackpanel\", orientation: \"Horizontal\", contents: [\r\n            { control: \"text\", value: \"New item:\", fontsize: 12 },\r\n            { control: \"edit\", binding: \"itemToAdd\" },\r\n        ] },\r\n        { control: \"button\", caption: \"Add\", binding: \"add\", enabled: \"{itemToAdd}\" },\r\n\r\n        { control: \"text\", value: \"Your items\", fontsize: 12 },\r\n        { control: \"listbox\", width: 250, height: 300, select: \"Multiple\", binding: { items: \"items\", selection: \"selectedItems\" } },\r\n\r\n        { control: \"stackpanel\", orientation: \"Horizontal\", contents: [\r\n            { control: \"button\", caption: \"Remove\", binding: \"remove\", enabled: \"{selectedItems}\" },\r\n            { control: \"button\", caption: \"Sort\", binding: \"sort\", enabled: \"{items}\" },\r\n        ] },\r\n    ]\r\n}\r\n\r\nexports.InitializeViewModel = function(context, session)\r\n{\r\n    var viewModel =\r\n    {\r\n        itemToAdd: \"\",\r\n        items: [ \"white\", \"black\", \"yellow\" ],\r\n        selectedItems: [ \"black\" ],\r\n    }\r\n    return viewModel;\r\n}\r\n\r\nexports.Commands = \r\n{\r\n    add: function(context, session, viewModel)\r\n    {\r\n        viewModel.items.push(viewModel.itemToAdd);\r\n        viewModel.itemToAdd = \"\";\r\n    },\r\n    sort: function(context, session, viewModel)\r\n    {\r\n        viewModel.items.sort();\r\n    },\r\n    remove: function(context, session, viewModel)\r\n    {\r\n        viewModel.items.remove(viewModel.selectedItems);\r\n        viewModel.selectedItems = [];\r\n    },\r\n}\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/203447908-samples/214642038-listbox/index.html"
    },
    {
      "id": 214642058,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/214642058-ListView.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/214642058-ListView",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 9,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 203447908,
      "created_at": "2015-12-05T09:55:38Z",
      "updated_at": "2015-12-05T09:56:26Z",
      "name": "ListView",
      "title": "ListView",
      "body": "<pre><code>// ListView with header and footer\r\n//\r\nexports.View =\r\n{\r\n    title: \"ListView Sample\",\r\n    elements:\r\n    [\r\n        { control: \"stackpanel\", orientation: \"Vertical\", height: \"*\", width: \"*\", contents: [\r\n            { control: \"listview\", select: \"Single\", height: \"*\", width: \"*\", binding: { items: \"presidents\", selection: \"selectedPresident\", onItemClick: { command: \"itemClicked\", president: \"{$data}\" } }, \r\n                header: { control: \"text\", value: \"US Presidents of America\", fontsize: 12 },\r\n                itemTemplate:\r\n                    { control: \"stackpanel\", orientation: \"Horizontal\", padding: 5, contents: [\r\n                        { control: \"image\", resource: \"http://blob.synchro.io/resources/user.png\", height: 50, width: 50 },\r\n                        { control: \"stackpanel\", orientation: \"Vertical\", contents: [\r\n                            { control: \"text\", value: \"{first}\" },\r\n                            { control: \"text\", value: \"{last}\" },\r\n                        ] },\r\n                    ] },\r\n                footer:\r\n                    { control: \"stackpanel\", orientation: \"Vertical\", width: \"*\", visibility: \"{showFooter}\", contents: [\r\n                        { control: \"text\", value: \"Displaying {presidents} presidents of the United States\", width: \"*\", fontsize: 12 },\r\n                        { control: \"button\", caption: \"Load more...\", binding: \"loadMore\" },\r\n                    ] }\r\n            },\r\n            { control: \"text\", value: \"Selected: Mr. {selectedPresident.last}\", visibility: \"{selectedPresident}\", fontsize: 12 },            \r\n        ] },\r\n    ]\r\n}\r\n\r\nexports.InitializeViewModel = function(context, session)\r\n{\r\n    var viewModel =\r\n    {\r\n        presidents: [\r\n            { first: \"George\", last: \"Washington\" }, \r\n            { first: \"Abraham\", last: \"Lincoln\" }, \r\n            { first: \"Andrew\", last: \"Jackson\" }, \r\n        ],\r\n        selectedPresident: { first: \"Abraham\", last: \"Lincoln\" },\r\n        showFooter: true\r\n    }\r\n    return viewModel;\r\n}\r\n\r\nexports.Commands = \r\n{\r\n    loadMore: function(context, session, viewModel)\r\n    {\r\n        viewModel.presidents.push({ first: \"Bill\", last: \"Clinton\" });\r\n        viewModel.presidents.push({ first: \"Jimmy\", last: \"Carter\" });\r\n        viewModel.presidents.push({ first: \"Gerald\", last: \"Ford\" });\r\n        viewModel.presidents.push({ first: \"Harry\", last: \"Truman\" });\r\n        viewModel.presidents.push({ first: \"Teddy\", last: \"Roosevelt\" });\r\n        viewModel.showFooter = false;\r\n    },\r\n    itemClicked: function(context, session, viewModel, params)\r\n    {\r\n        return Synchro.showMessage(context, { message: \"You chose: Mr. \" + params.president.last });\r\n    }\r\n}\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/203447908-samples/214642058-listview/index.html"
    },
    {
      "id": 214642048,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/214642048-List-Click.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/214642048-List-Click",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 10,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 203447908,
      "created_at": "2015-12-05T09:54:45Z",
      "updated_at": "2015-12-05T09:54:45Z",
      "name": "List Click",
      "title": "List Click",
      "body": "<pre><code>// List Click page\r\n//\r\nexports.View =\r\n{\r\n    title: \"List Click\",\r\n    elements:\r\n    [\r\n        { control: \"stackpanel\", orientation: \"Horizontal\", contents: [\r\n            { control: \"stackpanel\", orientation: \"Vertical\", contents: [\r\n\r\n                { control: \"text\", value: \"Click an item...\", fontsize: 16 },\r\n                { control: \"listview\", select: \"None\", height: 300, maxheight: 300, width: 350, binding: { items: \"items\", onItemClick: { command: \"itemClicked\", itemData: \"{data}\" } }, itemTemplate:\r\n                    { control: \"stackpanel\", orientation: \"Horizontal\", padding: 5, contents: [\r\n                        { control: \"image\", resource: \"http://blob.synchro.io/resources/user.png\", height: 50, width: 50 },\r\n                        { control: \"text\", value: \"{title}\" },\r\n                    ] },\r\n                },\r\n            ] },\r\n        ] },\r\n\r\n        { control: \"text\", value: \"Last item clicked: {lastClicked}\", fontsize: 12 },\r\n    ]\r\n}\r\n\r\nexports.InitializeViewModel = function(context, session)\r\n{\r\n    var viewModel =\r\n    {\r\n        items: [\r\n            { title: \"Item Number One\", data: \"one\" },\r\n            { title: \"Item Number Two\", data: \"two\" },\r\n            { title: \"Item Number Three\", data: \"three\" },\r\n            { title: \"Item Number Four\", data: \"four\" },\r\n        ],\r\n        lastClicked: \"none\",\r\n    }\r\n    return viewModel;\r\n}\r\n\r\nexports.Commands = \r\n{\r\n    itemClicked: function(context, session, viewModel, params)\r\n    {\r\n        viewModel.lastClicked = params.itemData;\r\n    },\r\n}</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/203447908-samples/214642048-list-click/index.html"
    },
    {
      "id": 215361177,
      "url": "https://synchro.zendesk.com/api/v2/help_center/en-us/articles/215361177-Location.json",
      "html_url": "https://support.synchro.io/hc/en-us/articles/215361177-Location",
      "author_id": 858670498,
      "comments_disabled": false,
      "label_names": [

      ],
      "draft": false,
      "promoted": false,
      "position": 11,
      "vote_sum": 0,
      "vote_count": 0,
      "section_id": 203447908,
      "created_at": "2015-12-05T09:49:23Z",
      "updated_at": "2015-12-05T09:49:24Z",
      "name": "Location",
      "title": "Location",
      "body": "<pre><code>// Location page\r\n//\r\nexports.View =\r\n{\r\n    title: \"Location\",\r\n    elements:\r\n    [\r\n        { control: \"location\", binding: { value: \"location\", onUpdate: { command: \"locationChange\", location: \"{location.coordinate}\" } } },\r\n        \r\n        { control: \"stackpanel\", orientation: \"Vertical\", contents: [\r\n            { control: \"text\", value: \"Status: {location.status}\", fontsize: 12 },\r\n            { control: \"text\", value: \"Available: {location.available}\", fontsize: 12 },\r\n            { control: \"text\", value: \"Lat: {location.coordinate.latitude}\", visibility: \"{location.coordinate}\", fontsize: 12 },\r\n            { control: \"text\", value: \"Long: {location.coordinate.longitude}\", visibility: \"{location.coordinate}\", fontsize: 12 },\r\n            { control: \"text\", value: \"Accuracy: {location.accuracy} meters\", visibility: \"{location.accuracy}\", fontsize: 12 },\r\n            { control: \"text\", value: \"Heading: {location.heading}\", visibility: \"{location.heading}\", fontsize: 12 },\r\n            { control: \"text\", value: \"Speed: {location.speed} meters/sec\", visibility: \"{location.speed}\", fontsize: 12 },\r\n        ] },\r\n    ]\r\n}\r\n\r\nexports.InitializeViewModel = function(context, session)\r\n{\r\n    var viewModel =\r\n    {\r\n        location: null,\r\n    }\r\n    return viewModel;\r\n}\r\n\r\nexports.Commands =\r\n{\r\n    locationChange: function(context, session, viewModel, params)\r\n    {\r\n        console.log(\"COMMAND: Location change, location: \" + params.location.latitude + \", \" + params.location.longitude);\r\n    },\r\n}\r\n</code></pre>",
      "source_locale": "en-us",
      "locale": "en-us",
      "outdated": false,
      "backup_path": "./200270167-api-documentation/203447908-samples/215361177-location/index.html"
    }
  ],
  "article_attachments": [
    {
      "id": 204334177,
      "url": "https://synchro.zendesk.com/api/v2/help_center/articles/attachments/204334177",
      "article_id": 205425607,
      "display_file_name": "synchro-mvvm.png",
      "file_name": "synchro-mvvm.png",
      "content_url": "https://synchro.zendesk.com/hc/article_attachments/204334177/synchro-mvvm.png",
      "relative_path": "/hc/article_attachments/204334177/synchro-mvvm.png",
      "content_type": "image/png",
      "size": 59112,
      "inline": true,
      "created_at": "2015-12-05T09:15:28Z",
      "updated_at": "2015-12-05T09:18:04Z"
    },
    {
      "id": 204323308,
      "url": "https://synchro.zendesk.com/api/v2/help_center/articles/attachments/204323308",
      "article_id": 205425607,
      "display_file_name": "users.png",
      "file_name": "users.png",
      "content_url": "https://synchro.zendesk.com/hc/article_attachments/204323308/users.png",
      "relative_path": "/hc/article_attachments/204323308/users.png",
      "content_type": "image/png",
      "size": 108942,
      "inline": true,
      "created_at": "2015-12-05T09:15:19Z",
      "updated_at": "2015-12-05T09:18:04Z"
    },
    {
      "id": 207397027,
      "url": "https://synchro.zendesk.com/api/v2/help_center/articles/attachments/207397027",
      "article_id": 219088908,
      "display_file_name": "Menu.png",
      "file_name": "Menu.png",
      "content_url": "https://synchro.zendesk.com/hc/article_attachments/207397027/Menu.png",
      "relative_path": "/hc/article_attachments/207397027/Menu.png",
      "content_type": "image/png",
      "size": 408682,
      "inline": true,
      "created_at": "2016-05-18T18:54:07Z",
      "updated_at": "2016-05-18T18:54:35Z"
    },
    {
      "id": 207362488,
      "url": "https://synchro.zendesk.com/api/v2/help_center/articles/attachments/207362488",
      "article_id": 219089668,
      "display_file_name": "Hello1.png",
      "file_name": "Hello1.png",
      "content_url": "https://synchro.zendesk.com/hc/article_attachments/207362488/Hello1.png",
      "relative_path": "/hc/article_attachments/207362488/Hello1.png",
      "content_type": "image/png",
      "size": 345273,
      "inline": true,
      "created_at": "2016-05-18T22:39:52Z",
      "updated_at": "2016-05-18T22:40:00Z"
    },
    {
      "id": 207362628,
      "url": "https://synchro.zendesk.com/api/v2/help_center/articles/attachments/207362628",
      "article_id": 219089688,
      "display_file_name": "Hello2.png",
      "file_name": "Hello2.png",
      "content_url": "https://synchro.zendesk.com/hc/article_attachments/207362628/Hello2.png",
      "relative_path": "/hc/article_attachments/207362628/Hello2.png",
      "content_type": "image/png",
      "size": 346071,
      "inline": true,
      "created_at": "2016-05-18T22:40:35Z",
      "updated_at": "2016-05-18T22:40:48Z"
    },
    {
      "id": 207407387,
      "url": "https://synchro.zendesk.com/api/v2/help_center/articles/attachments/207407387",
      "article_id": 219542347,
      "display_file_name": "Hello3.png",
      "file_name": "Hello3.png",
      "content_url": "https://synchro.zendesk.com/hc/article_attachments/207407387/Hello3.png",
      "relative_path": "/hc/article_attachments/207407387/Hello3.png",
      "content_type": "image/png",
      "size": 352796,
      "inline": true,
      "created_at": "2016-05-18T22:41:29Z",
      "updated_at": "2016-05-18T22:41:34Z"
    },
    {
      "id": 207362708,
      "url": "https://synchro.zendesk.com/api/v2/help_center/articles/attachments/207362708",
      "article_id": 219089748,
      "display_file_name": "Hello4a.png",
      "file_name": "Hello4a.png",
      "content_url": "https://synchro.zendesk.com/hc/article_attachments/207362708/Hello4a.png",
      "relative_path": "/hc/article_attachments/207362708/Hello4a.png",
      "content_type": "image/png",
      "size": 369552,
      "inline": true,
      "created_at": "2016-05-18T22:42:33Z",
      "updated_at": "2016-05-18T22:42:46Z"
    },
    {
      "id": 207407407,
      "url": "https://synchro.zendesk.com/api/v2/help_center/articles/attachments/207407407",
      "article_id": 219089748,
      "display_file_name": "Hello4.png",
      "file_name": "Hello4.png",
      "content_url": "https://synchro.zendesk.com/hc/article_attachments/207407407/Hello4.png",
      "relative_path": "/hc/article_attachments/207407407/Hello4.png",
      "content_type": "image/png",
      "size": 355693,
      "inline": true,
      "created_at": "2016-05-18T22:42:10Z",
      "updated_at": "2016-05-18T22:42:46Z"
    },
    {
      "id": 207362748,
      "url": "https://synchro.zendesk.com/api/v2/help_center/articles/attachments/207362748",
      "article_id": 219542847,
      "display_file_name": "Hello5.png",
      "file_name": "Hello5.png",
      "content_url": "https://synchro.zendesk.com/hc/article_attachments/207362748/Hello5.png",
      "relative_path": "/hc/article_attachments/207362748/Hello5.png",
      "content_type": "image/png",
      "size": 356725,
      "inline": true,
      "created_at": "2016-05-18T22:43:20Z",
      "updated_at": "2016-05-18T22:43:27Z"
    },
    {
      "id": 207407427,
      "url": "https://synchro.zendesk.com/api/v2/help_center/articles/attachments/207407427",
      "article_id": 219542867,
      "display_file_name": "Hello6.png",
      "file_name": "Hello6.png",
      "content_url": "https://synchro.zendesk.com/hc/article_attachments/207407427/Hello6.png",
      "relative_path": "/hc/article_attachments/207407427/Hello6.png",
      "content_type": "image/png",
      "size": 379114,
      "inline": true,
      "created_at": "2016-05-18T22:43:57Z",
      "updated_at": "2016-05-18T22:44:04Z"
    },
    {
      "id": 207362768,
      "url": "https://synchro.zendesk.com/api/v2/help_center/articles/attachments/207362768",
      "article_id": 219542947,
      "display_file_name": "Hello7.png",
      "file_name": "Hello7.png",
      "content_url": "https://synchro.zendesk.com/hc/article_attachments/207362768/Hello7.png",
      "relative_path": "/hc/article_attachments/207362768/Hello7.png",
      "content_type": "image/png",
      "size": 395222,
      "inline": true,
      "created_at": "2016-05-18T22:44:32Z",
      "updated_at": "2016-05-18T22:44:39Z"
    },
    {
      "id": 207362788,
      "url": "https://synchro.zendesk.com/api/v2/help_center/articles/attachments/207362788",
      "article_id": 219542967,
      "display_file_name": "List1.png",
      "file_name": "List1.png",
      "content_url": "https://synchro.zendesk.com/hc/article_attachments/207362788/List1.png",
      "relative_path": "/hc/article_attachments/207362788/List1.png",
      "content_type": "image/png",
      "size": 444340,
      "inline": true,
      "created_at": "2016-05-18T22:45:07Z",
      "updated_at": "2016-05-18T22:45:14Z"
    },
    {
      "id": 207407447,
      "url": "https://synchro.zendesk.com/api/v2/help_center/articles/attachments/207407447",
      "article_id": 219090468,
      "display_file_name": "List2a.png",
      "file_name": "List2a.png",
      "content_url": "https://synchro.zendesk.com/hc/article_attachments/207407447/List2a.png",
      "relative_path": "/hc/article_attachments/207407447/List2a.png",
      "content_type": "image/png",
      "size": 443934,
      "inline": true,
      "created_at": "2016-05-18T22:46:28Z",
      "updated_at": "2016-05-18T22:46:40Z"
    },
    {
      "id": 207362808,
      "url": "https://synchro.zendesk.com/api/v2/help_center/articles/attachments/207362808",
      "article_id": 219090468,
      "display_file_name": "List2.png",
      "file_name": "List2.png",
      "content_url": "https://synchro.zendesk.com/hc/article_attachments/207362808/List2.png",
      "relative_path": "/hc/article_attachments/207362808/List2.png",
      "content_type": "image/png",
      "size": 347105,
      "inline": true,
      "created_at": "2016-05-18T22:46:04Z",
      "updated_at": "2016-05-18T22:46:40Z"
    },
    {
      "id": 207362848,
      "url": "https://synchro.zendesk.com/api/v2/help_center/articles/attachments/207362848",
      "article_id": 219090528,
      "display_file_name": "Hello8.png",
      "file_name": "Hello8.png",
      "content_url": "https://synchro.zendesk.com/hc/article_attachments/207362848/Hello8.png",
      "relative_path": "/hc/article_attachments/207362848/Hello8.png",
      "content_type": "image/png",
      "size": 382051,
      "inline": true,
      "created_at": "2016-05-18T22:47:46Z",
      "updated_at": "2016-05-18T22:48:00Z"
    },
    {
      "id": 207362828,
      "url": "https://synchro.zendesk.com/api/v2/help_center/articles/attachments/207362828",
      "article_id": 219090528,
      "display_file_name": "List3.png",
      "file_name": "List3.png",
      "content_url": "https://synchro.zendesk.com/hc/article_attachments/207362828/List3.png",
      "relative_path": "/hc/article_attachments/207362828/List3.png",
      "content_type": "image/png",
      "size": 443400,
      "inline": true,
      "created_at": "2016-05-18T22:47:22Z",
      "updated_at": "2016-05-18T22:48:00Z"
    },
    {
      "id": 201551748,
      "url": "https://synchro.zendesk.com/api/v2/help_center/articles/attachments/201551748",
      "article_id": 204858178,
      "display_file_name": "win_counter.png",
      "file_name": "win_counter.png",
      "content_url": "https://synchro.zendesk.com/hc/article_attachments/201551748/win_counter.png",
      "relative_path": "/hc/article_attachments/201551748/win_counter.png",
      "content_type": "image/png",
      "size": 16695,
      "inline": true,
      "created_at": "2015-04-19T05:39:50Z",
      "updated_at": "2015-04-19T05:42:54Z"
    }
  ]
}
