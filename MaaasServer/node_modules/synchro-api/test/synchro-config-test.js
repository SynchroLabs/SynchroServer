require('./test');
var synchroConfig = require('../synchro-config');

var assert = require("assert");
var path = require("path");
var lodash = require("lodash");
var nconfLib = require("nconf");

describe("Synchro Config", function()
{
	beforeEach(function()
	{
		// We don't want any env vars to pollute our tests...
		process.env = {};
	});

    it("should get default port when not overridden", function() 
    {
    	var config = synchroConfig.getConfig();
		assert.objectsEqual(config.get("PORT"), 1337);
	});

    it("should get port from default config file when available", function() 
    {
    	var cwd = process.cwd();
    	process.chdir(path.resolve(__dirname, "testconfig"));

    	var config = synchroConfig.getConfig();
		assert.objectsEqual(config.get("PORT"), 1338);
		assert.objectsEqual(config.get("SOURCE"), "config.json");

		process.chdir(cwd);
	});

    it("should get port from specified config file", function() 
    {
    	var cwd = process.cwd();
    	process.chdir(path.resolve(__dirname, "testconfig"));

    	var config = synchroConfig.getConfig("altconfig.json");
		assert.objectsEqual(config.get("PORT"), 1339);
		assert.objectsEqual(config.get("SOURCE"), "altconfig.json");

		process.chdir(cwd);
	});

    it("should use env var instead of config var", function() 
    {
    	var cwd = process.cwd();
    	process.chdir(path.resolve(__dirname, "testconfig"));

    	process.env = { "SYNCHRO__PORT": 1340 };

    	var config = synchroConfig.getConfig();
		assert.objectsEqual(config.get("PORT"), 1340);

		process.chdir(cwd);
	});

    it("should use override instead of env var or config var", function() 
    {
    	var cwd = process.cwd();
    	process.chdir(path.resolve(__dirname, "testconfig"));

    	process.env =  { "SYNCHRO__PORT": 1340 };

    	var overrides = { "PORT": 1341 };

    	var config = synchroConfig.getConfig(null, overrides);
		assert.objectsEqual(config.get("PORT"), 1341);

		process.chdir(cwd);
	});

    it("should merge config object properties from different sources", function() 
    {
    	var cwd = process.cwd();
    	process.chdir(path.resolve(__dirname, "testconfig"));

    	process.env =  { "SYNCHRO__MODULESTORE__FOO": "BAR" };

    	var overrides = 
    	{ 
    		"MODULESTORE": 
    		{
    			"baz": true 
    		}
    	};

    	var config = synchroConfig.getConfig(null, overrides);

    	var expected = 
    	{ 
    		"directory": "synchro-apps", // default 
    		"SOURCE": "config.json",     // config.json
    		"FOO": "BAR",                // env var
    		"baz": true                  // overrides
    	};
        assert.deepEqual(config.get("MODULESTORE"), expected);

		process.chdir(cwd);
	});

    it("should coerce numeric env vars to numeric type", function() 
    {
    	var cwd = process.cwd();
    	process.chdir(path.resolve(__dirname, "testconfig"));

    	process.env =  { "SYNCHRO__FOO": "1234" };

    	var config = synchroConfig.getConfig();
		assert.objectsEqual(config.get("FOO"), 1234);

		process.chdir(cwd);
	});

    it("should coerce boolean env vars to boolean type", function() 
    {
    	var cwd = process.cwd();
    	process.chdir(path.resolve(__dirname, "testconfig"));

    	process.env =  
    	{ 
    		"SYNCHRO__FOO": "true",
    		"SYNCHRO__BAR": "false" 
    	};

    	var config = synchroConfig.getConfig();
		assert.objectsEqual(config.get("FOO"), true);
		assert.objectsEqual(config.get("BAR"), false);

		process.chdir(cwd);
	});

    it("should coerce null env vars to null", function() 
    {
    	var cwd = process.cwd();
    	process.chdir(path.resolve(__dirname, "testconfig"));

    	process.env =  { "SYNCHRO__FOO": "null" };

    	var config = synchroConfig.getConfig();
		assert.objectsEqual(config.get("FOO"), null);

		process.chdir(cwd);
	});

    it("should reflect null env var as override to default config value", function() 
    {
    	// This tests that we can turn off a default setting with an env var by nulling it out.
    	//
    	var cwd = process.cwd();
    	process.chdir(path.resolve(__dirname, "testconfig"));

    	process.env =  { "SYNCHRO__PORT": "null" };

    	var config = synchroConfig.getConfig();
		assert.objectsEqual(config.get("PORT"), null);

		process.chdir(cwd);
	});

    it("should reflect null env var as override config value from file", function() 
    {
    	// This tests that we can turn off a setting specified in a config file with an env var by nulling it out.
    	//
    	var cwd = process.cwd();
    	process.chdir(path.resolve(__dirname, "testconfig"));

    	process.env =  { "SYNCHRO__PORT": "null" };

    	var config = synchroConfig.getConfig();
		assert.objectsEqual(config.get("PORT"), null);

		process.chdir(cwd);
	});

    it("should return undefined value on get of undefined value", function() 
    {
    	var config = synchroConfig.getConfig();
		assert.objectsEqual(config.get("FOO"), undefined);
	});
});
