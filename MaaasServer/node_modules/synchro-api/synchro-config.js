var path = require('path');
var nconf = require('nconf');
var bcrypt = require('bcryptjs');

var logger = require('log4js').getLogger("synchro-config");

//
// Services config
//
// Module Store
//
//     "MODULESTORE_PACKAGE" // Package path (used in "require"), defaults to "synchro-api"
//     "MODULESTORE_SERVICE" // Name of the service to instantiate in createService method of the package referenced above
//     "MODULESTORE":        // Object that gets passed to createService as config for the module store being created
//     {
//         // Contents specific to module store being created
//     }
//
// Session Store
//
//     [same as above, except replace "MODULESTORE" with "SESSIONSTORE"]
//
// To set via env vars, prefix with "SYNCHRO__" and use the "__" separator for config member paths
//
//
// Config params for known services:
//
// synchro-api services:
// 
//    FileModuleStore
//        directory
//
//    MemorySessionStore
//        [no config]
//
//    FileSessionStore
//        sessionStateFile // !!! should default to sessions.json?
//
//    RedisSessionStore
//        host
//        port
//        password
//        pingInterval
//
// synchro-azure services:
//
//    AzureModuleStore
//        storageAccount
//        storageAccessKey
//        containerName (!!!obs?)
//
//    AzureSessionStore
//        storageAccount
//        storageAccessKey
//        tableName
//
// synchro-aws services:
// 
//    !!! TBD
//

function getExternalIPAddress()
{
    // Inspired by http://stackoverflow.com/questions/3653065/get-local-ip-address-in-node-js
    //
    var interfaces = require('os').networkInterfaces();
    for (var devName in interfaces) 
    {
        if (!/(loopback|vmware|internal)/gi.test(devName))
        {
            var iface = interfaces[devName];

            for (var i = 0; i < iface.length; i++) 
            {
                var alias = iface[i];
                
                // Ignore 127.0.0.0/8 (local loopback) and 169.254.0.0/16 (Link-local / APIPA) addresses
                //
                if (alias.family === 'IPv4' && alias.address.indexOf('169.254') != 0 && alias.address.indexOf('127.') != 0 && !alias.internal)
                {
                    return alias.address;                
                }
            }
        }
    }

    return null;
}

function addNonStandardPort(host, port)
{
    // This bit of port checking is to add a non-standard port spec if needed (particularly handy in local dev
    // environments).  When deploying to Azure, the port is actually a named pipe reference, which you don't want
    // to add to the endpoint - and presumably you'll be listening on a standard port on cloud deployments anyway.  
    // So we only add the port to the endpoint spec if it's an integer greater than 0 and not the default port (80).
    //
    if ((port === parseInt(port)) && (port > 0) && (port != 80))
    {
        host += ":" + port;
    }

    return host;
}

// Get config - precendence: command line (represented by "overrides" from caller), environment, JSON config file, defaults
//
exports.getConfig = function(configFile, overrides)
{
	var conf = new nconf.Provider();

	// 1) Overrides (from the command line)
	//
	if (overrides)
	{
		conf.overrides(overrides);
	}

	// 2) Environment vars
	//
	// nconf.env();
	//
	// Parse env vars that start with "SYNCHRO__", with segments separated by "__", remove the prefix, put the values
	// into a memory store, and make it read-only...
	//
	conf.use("memory");
	var memStore = conf.stores["memory"];
	Object.keys(process.env).filter(function (key)
	{
		// We're only going to take env variables that start with "SYNCHRO__"...
		//
		return key.indexOf("SYNCHRO__") == 0;
	}).forEach(function (key) 
	{
		// We're going to use "__" as the separator for the env variable name, and we're going to prune off
		// the "SYNCHRO" part, and then create a normal colon-separated path from the remaining parts...
		//
		var value = process.env[key];
		if (value == "true")
		{
			value = true;
		}
		else if (value == "false")
		{
			value = false;
		}
		else if (value == "null")
		{
			value = null;
		}

	    memStore.set(key.split("__").slice(1).join(":"), value);
	});
	memStore.readOnly = true;

	// 3) JSON config file
	//
	if (configFile)
	{
		conf.configDetails = "Using configuration file specified on command line: " + configFile;
		conf.file({ file: configFile });
	}
	else if (process.env['SYNCHRO_CONFIG'])
	{
		conf.configDetails = "Using configuration file specified in SYNCHRO_CONFIG: " + process.env['SYNCHRO_CONFIG'];
		conf.file({ file: process.env['SYNCHRO_CONFIG'] });		
	}
	else
	{
		conf.configDetails = "Using default configuration file: config.json";
		conf.file({ file: 'config.json' });
	}

	// 4) Default values
	//
	conf.defaults(
	{
	    'PORT': 1337,
	    'NOFORK': false,
	    'API_PATH_PREFIX': "/api",
	    'STUDIO_PATH_PREFIX': "/studio",
	    'STUDIO_NOAUTH': true,
	    'DEBUG_BASE_PORT': 6868,
	    'APP_RESOURCE_PATH': "synchro-apps/resources",
	    'APP_RESOURCE_PREFIX': 
	        "http://" + addNonStandardPort(getExternalIPAddress(), (conf.get("PORT") || 1337)) + 
	        (conf.get('API_PATH_PREFIX') || "/api") + 
	        "/resources/",
	    'LOG4JS_CONFIG': 
	    { 
	        // Redirect console.log to log4js, turn off color coding
	        appenders:
	        [ 
	            { type: "console", layout: { type: "basic" } } 
	        ],
	        replaceConsole: true,
	        levels: 
	        {
	            '[all]': 'INFO'
	        }
	    },
	    'SESSIONSTORE_PACKAGE': 'synchro-api',
	    'SESSIONSTORE_SERVICE': 'MemorySessionStore',
	    'MODULESTORE_PACKAGE': 'synchro-api',
	    'MODULESTORE_SERVICE': 'FileModuleStore',
	    'MODULESTORE': 
	    {
	    	'directory': 'synchro-apps'
	    },
	    "SYNCHRO_APPS": []
	});

	conf.hashPassword = function(password)
	{
		return bcrypt.hashSync(password);
	}

	conf.comparePassword = function(password, hash)
	{
		return bcrypt.compareSync(password, hash);
	}

	conf.addNonStandardPort = function(host)
	{
		return addNonStandardPort(host, this.get("PORT"));
	}

	return conf;
}
