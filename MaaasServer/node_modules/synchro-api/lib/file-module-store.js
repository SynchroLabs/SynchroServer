// This is the file-based module store. 
//
// Note: This requires write access to the local file system for putModuleSoure support (required if
//       using Studio with save/update).
//
var fs = require('fs-extra');
var path = require('path');
var wait = require('wait.for');
var util = require('./util');

var logger = require('log4js').getLogger("file-module-store");

module.exports = function(params)
{
    var modulesDir = params.directory;

    var moduleStore = 
    {
        getAppContainers: function()
        {
            // Get all subdirs that contain a synchro.json file...
            //
            var containers = [];

            var files = wait.for(fs.readdir, modulesDir);
            for (var n = 0; n < files.length; n++)
            {
                var directory = files[n];
                var stats = wait.for(fs.stat, path.resolve(modulesDir, directory));
                if (stats.isDirectory())
                {
                    if (fs.existsSync(path.resolve(modulesDir, directory, "synchro.json")))
                    {
                        containers.push(directory);
                    }                  
                }
            }

            return containers;
        },

        createAppContainer: function(container)
        {
            // Verify that directory does not exist, then create directory and populate with empty synchro.json file...
            //
            var appContainerPath = path.resolve(modulesDir, container);

            if (fs.existsSync(appContainerPath))
            {
                if (fs.existsSync(path.resolve(appContainerPath, "synchro.json")))
                {
                    // A Synchro app already exists in this directory...
                    //
                    throw new Error("A Synchro application already exists in the container: '" + container + "'");
                }
                else
                {
                    // The directory name is in use, but not by an existing Synchro app...
                    //
                    throw new Error("The container: '" + container + "' is already in use, but not by a Synchro application");
                }
            }
            else
            {
                // Create directory and empty synchro.json file...
                //
                wait.for(fs.mkdir, appContainerPath);
                wait.for(fs.writeFile, path.resolve(appContainerPath, "synchro.json"), "{}");
            }
        },

        deleteAppContainer: function(container)
        {
            // Verify that the directory exists and contains a synchro.json file, then delete directory and all contents...
            //
            var appContainerPath = path.resolve(modulesDir, container);

            if (fs.existsSync(appContainerPath))
            {
                if (fs.existsSync(path.resolve(appContainerPath, "synchro.json")))
                {
                    // An app exists in this directory, so we can delete it...
                    //
                    wait.for(fs.remove, appContainerPath);
                }
                else
                {
                    // The directory exists, but does not contain a Synchro app, so we can't delete it...
                    //
                    throw new Error("The container: '" + container + "' is in use, but not by a Synchro application, so it can't be deleted");

                }
            }
            else
            {
                // The directory doesn't exist...
                //
                throw new Error("The container: '" + container + "' does not exist");
            }
        },

        getAppModuleStore: function(container)
        {
            // Note: modulesDir is either relative to cwd or fully specified
            //
            var appContainerPath = path.resolve(modulesDir, container); 

            // Verify that the container exists and contains an app...
            //
            if (fs.existsSync(appContainerPath))
            {
                if (!fs.existsSync(path.resolve(appContainerPath, "synchro.json")))
                {
                    // The directory exists, but does not contain a Synchro app...
                    //
                    throw new Error("The container: '" + container + "' is in use, but not by a Synchro application");

                }
            }
            else
            {
                // The directory doesn't exist...
                //
                throw new Error("The container: '" + container + "' does not exist");
            }


            var app =
            {
                getAppDefinition: function()
                {
                    var appDefinitionPath = path.resolve(appContainerPath, "synchro.json");
                    var content = util.removeBOM(fs.readFileSync(appDefinitionPath, 'utf8'));
                    return JSON.parse(content);
                },
                listModules: function()
                {
                    var modules = [];

                    var files = fs.readdirSync(appContainerPath);
                    for (var i = 0; i < files.length; i++) 
                    {
                        if (path.extname(files[i]) === ".js") 
                        {
                            modules.push(files[i]);
                        }
                    }

                    return modules;
                },
                getModuleSource: function(moduleFilename)
                {
                    var moduleFilePath = path.resolve(appContainerPath, moduleFilename);
                    var content = util.removeBOM(fs.readFileSync(moduleFilePath, 'utf8'));
                    return content;
                },

                putModuleSource: function(moduleFilename, content)
                {
                    var moduleFilePath = path.resolve(appContainerPath, moduleFilename);
                    fs.writeFileSync(moduleFilePath, content, 'utf8');
                },

                removeModuleSource: function(moduleFilename)
                {
                    var moduleFilePath = path.resolve(appContainerPath, moduleFilename);
                    fs.unlinkSync(moduleFilePath);
                }
            }

            return app;
        }
    }

    return moduleStore;
}
