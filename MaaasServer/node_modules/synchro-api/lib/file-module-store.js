// This is the file-based module store. 
//
// Note: This requires write access to the local file system for putModuleSoure support (required if
//       using Studio with save/update).
//
var fs = require('fs');
var path = require('path');
var util = require('./util');

var logger = require('log4js').getLogger("file-module-store");

module.exports = function(params)
{
    var modulesDir = params.directory;

    var moduleStore = 
    {
        getAppModuleStore: function(container)
        {
            // !!! Assumes that modulesDir is either relative to cwd or fully specified - reasonable? 
            //     cwd will typically be the root of the Synchro app (where app.js lives).
            //     Maybe just document this.
            //
            var appDir = path.resolve(modulesDir, container); 

            var app =
            {
                getAppDefinition: function()
                {
                    var appDefinitionPath = path.resolve(appDir, "synchro.json");
                    var content = util.removeBOM(fs.readFileSync(appDefinitionPath, 'utf8'));
                    return JSON.parse(content);
                },
                listModules: function()
                {
                    var modules = [];

                    var files = fs.readdirSync(appDir);
                    for (var i = 0; i < files.length; i++) 
                    {
                        if (path.extname(files[i]) === ".js") 
                        {
                            modules.push(files[i]);
                        }
                    }

                    return modules;
                },
                getModuleSource: function(moduleFilename)
                {
                    var moduleFilePath = path.resolve(appDir, moduleFilename);
                    var content = util.removeBOM(fs.readFileSync(moduleFilePath, 'utf8'));
                    return content;
                },

                putModuleSource: function(moduleFilename, content)
                {
                    var moduleFilePath = path.resolve(appDir, moduleFilename);
                    fs.writeFileSync(moduleFilePath, content, 'utf8');
                },

                removeModuleSource: function(moduleFilename)
                {
                    var moduleFilePath = path.resolve(appDir, moduleFilename);
                    fs.unlinkSync(moduleFilePath);
                }
            }

            return app;
        }
    }

    return moduleStore;
}
