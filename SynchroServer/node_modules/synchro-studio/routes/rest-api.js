// REST API for apps/modules
//

var path = require('path');
var logger = require('log4js').getLogger("studio-rest-api");

//
// Application support
//

// POST / (create app)
//
exports.createApp = function * (synchroStudio, appName, req, res) // Generator
{
    var appPath;
    var appDescription;
    var appContainer; // !!! Required - default to appName?

    var apiProcessorManager = synchroStudio.getApiManager()
    var modulesStore = apiProcessorManager.createModuleStore();

    try
    {
        // This will error if the container already exsists...
        //
        yield modulesStore.createAppContainerAwaitable(appContainer);
    }
    catch (err)
    {
        // This isn't a problem per se (multiple app installs can point to the same container)
        //
        console.log("Error:", err.message);
    }

    var appModuleStore = yield modulesStore.getAppModuleStoreAwaitable(appContainer);

    // !!! Create package.json and main.js in module store

    // !!! Add app to config

}

// GET / (get app)
//
exports.getApp = function * (synchroStudio, appName, req, res) // Generator
{
    var apiProcessor = synchroStudio.getApiProcessor(appName);
    var moduleStore = yield synchroStudio.getAppModuleStoreForPathAwaitable(appName);

    logger.info("Create module");
    var result = { };

    result.app = yield moduleStore.getAppDefinitionAwaitable();
    result.modules = yield moduleStore.listModulesAwaitable();

    res.send(result);
}

//
// Module support
//

// POST /module (create)
//
exports.createModule = function * (synchroStudio, appName, req, res) // Generator
{
    var apiProcessor = synchroStudio.getApiProcessor(appName);
    var moduleStore = yield synchroStudio.getAppModuleStoreForPathAwaitable(appName);

    logger.info("Create module");
    var result = { };

    var moduleName = req.body["module"];
    var source = req.body["source"];

    if (!moduleName)
    {
        result.status = "Fail";
        result.message = "Module creation failed, module name not specified";
    }
    else
    {
        var modules = yield moduleStore.listModulesAwaitable();
        if (modules.indexOf(moduleName) != -1)
        {
            result.status = "Fail";
            result.message = "Module creation failed, module with name '" + moduleName + "' already exists";
        }
        else
        {
            logger.info("Putting module source");
            var putResult = yield moduleStore.putModuleSourceAwaitable(moduleName, source);

            logger.info("Reloading module");
            var reloadResult = yield apiProcessor.reloadModuleAwaitable(moduleName);
            logger.info("Done reloading module, result:", result);
            if (reloadResult["error"]) 
            {
                result.status = "Fail";
                result.message = "Unable to deploy new module, reason: " + reloadResult["error"];
            }
            else
            {
                result.status = "OK";
                result.message = "Module created and deployed";
            }
        }
    }

    res.send(result);
};

// GET /module (read)
//
exports.loadModule = function * (synchroStudio, appName, req, res) // Generator
{
    var moduleStore = yield synchroStudio.getAppModuleStoreForPathAwaitable(appName);
    var moduleName = req.query["module"];

    logger.info("Load module: " + moduleName);
    var result = { };

    if (moduleName)
    {
        result.status = "OK";
        result.message = "Module source found";
        result.source = yield moduleStore.getModuleSourceAwaitable(moduleName);
        if (result.source && Buffer.isBuffer(result.source))
        {
            result.source = result.source.toString();
        }
    }
    else
    {
        result.status = "Fail";
        result.message = "Module not loaded, no module name specified";
    }
    res.send(result);
};

// POST /module (update)
//
exports.saveModule = function * (synchroStudio, appName, req, res) // Generator
{
    var apiProcessor = synchroStudio.getApiProcessor(appName);
    var moduleStore = yield synchroStudio.getAppModuleStoreForPathAwaitable(appName);

    logger.info("Save module");
    var result = { };

    var moduleName = req.body["module"];
    var source = req.body["source"];

    if (moduleName)
    {

        logger.info("Putting module source");
        var putResult = yield moduleStore.putModuleSourceAwaitable(moduleName, source);

        logger.info("Reloading module");
        var reloadResult = yield apiProcessor.reloadModuleAwaitable(moduleName);
        logger.info("Done reloading module, result:", result);
        if (reloadResult["error"]) 
        {
            result.status = "Fail";
            result.message = "Unable to deploy module, reason: " + reloadResult["error"];
        }
        else
        {
            result.status = "OK";
            result.message = "Module updated and deployed";
        } 
    }
    else
    {
        result.status = "Fail";
        result.message = "Module source not saved, no module name specified";
    }

    res.send(result);
};

// DELETE /module (delete)
//
exports.deleteModule = function * (synchroStudio, appName, req, res) // Generator
{
    var apiProcessor = synchroStudio.getApiProcessor(appName);
    var moduleStore = yield synchroStudio.getAppModuleStoreForPathAwaitable(appName);

    logger.info("Delete module");
    var result = { };

    var moduleName = req.body["module"];

    if (moduleName)
    {

        logger.info("Deleting module:", moduleName);
        yield moduleStore.removeModuleSourceAwaitable(moduleName);
        yield apiProcessor.reloadModuleAwaitable();

        result.status = "OK";
        result.message = "Module deleted";
    }
    else
    {
        result.status = "Fail";
        result.message = "Module delete failed, no module name specified";
    }

    res.send(result);
};