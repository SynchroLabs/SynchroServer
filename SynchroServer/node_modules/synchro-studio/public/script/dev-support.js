// Dev Support
//
// ACE: https://ace.c9.io/
//
Range = require("ace/range").Range;

var editor;
var ignoreSelChange = false;

function initEditor()
{
    editor = ace.edit("editor");
    editor.setTheme("ace/theme/monokai");
    editor.getSession().setMode("ace/mode/javascript");

    editor.getSession().on('change', function(e) 
    {
        console.log("Change content - type: %s, data: %s", e.type, JSON.stringify(e.data));
    });

    editor.getSession().selection.on('changeCursor', function(e) 
    {
        var pos = editor.selection.getCursor();
        console.log("Change cursor pos - row: %s, col: %s", pos.row, pos.column);
        if (!ignoreSelChange)
        {
            updateProperties();
        }
    });

    editor.getSession().selection.on('changeSelection', function(e) 
    {
        console.log("Change selection");
    });

    // on "focus" and "blur"
}

var renderView; // (view, viewModel)

function SynchroInit(synchro)
{
    renderView = synchro.renderView;

    var synchroApp =
    {
        container: document.getElementById('synchro_container'), // required
        logConfig: {}, // optional, developer setting
    }

    return synchroApp;
}

function updateView()
{
    try
    {
        var parsed = esprima.parse(editor.getValue(), { loc: true, comment: true });

        var view;
        var viewModel;

        if (parsed.type === 'Program')
        {
            for (var i = 0; i < parsed.body.length; i++)
            {
                var exp = parsed.body[i];

                if ((exp.type === 'ExpressionStatement') && 
                    (exp.expression.type === 'AssignmentExpression') && 
                    (exp.expression.left.type === 'MemberExpression') &&
                    (exp.expression.left.object.name === 'exports') &&
                    (exp.expression.left.property.name === 'View'))
                {
                    var node = exp.expression.right;
                    console.log("Found View:", node);

                    var range = new Range(node.loc.start.line-1, node.loc.start.column, node.loc.end.line-1, node.loc.end.column);

                    // This is a little creepy.  The View defintion in a Synchro module is not required to be JSON encoded (it's a
                    // JavaScript object).  So, for example, keys do not need to be quoted, and there can even be code in the values
                    // being assigned (though we're not trying to support that).  For this reason, we need to parse the found View as
                    // a JavaScript object, not as JSON.  The only way to do that is with good old eval().
                    //
                    eval("view = " + editor.getSession().getTextRange(range));

                    var viewModel = {
                        firstName: "Bob",
                        lastName: "Dickinson"
                    };

                }

                if ((exp.type === 'VariableDeclaration') && (exp.declarations[0].id.name === 'designViewModel'))
                {
                    var node = exp.declarations[0].init;
                    console.log("Found designViewModel:", node);

                    var range = new Range(node.loc.start.line-1, node.loc.start.column, node.loc.end.line-1, node.loc.end.column);
                    eval("viewModel = " + editor.getSession().getTextRange(range));
                }
            }
        }

        if (view)
        {
            renderView(view, viewModel);
        }
    }
    catch (e)
    {
        console.log("Err:", e);
    }
}

function nodeContainsPos(node, row, col)
{
    return !((row < node.loc.start.line) ||
             (row > node.loc.end.line) ||
             ((row == node.loc.start.line) && (col < node.loc.start.column)) ||
             ((row == node.loc.end.line) && (col > node.loc.end.column)));
}

function findControl(node, row, col)
{
    //console.log("Inspecting node of type:", node.type);

    var qualifyingControl = null;
    var arrayToProcess = null;

    if (node.type === 'Program')
    {
        arrayToProcess = node.body;
    }
    else if (node.type === 'ExpressionStatement')
    {
        qualifyingControl = findControl(node.expression, row, col);
    }
    else if (node.type === 'AssignmentExpression')
    {
        // operator, left, right
        qualifyingControl = findControl(node.right, row, col);
    }
    else if (node.type === 'ObjectExpression')
    {
        for (var i = 0; i < node.properties.length; i++)
        {
            //console.log("Inspecting node property:", node.properties[i]);
            if ((node.properties[i].key.name === 'control') && nodeContainsPos(node, row, col))
            {
                //console.log("qualifying control");
                qualifyingControl = node;
            }
        }
        arrayToProcess = node.properties;
    }
    else if (node.type === 'ArrayExpression')
    {
        arrayToProcess = node.elements;
    }
    else if (node.type === 'Property')
    {
        qualifyingControl = findControl(node.value, row, col); 
    }
    else if (node.type === 'Literal')
    {
        // node.value is value 
    }

    if (arrayToProcess)
    {
        for (var i = 0; i < arrayToProcess.length; i++)
        {
            var result = findControl(arrayToProcess[i], row, col);
            if (result)
            {
                qualifyingControl = result;
                break;
            }
        }
    }

    return qualifyingControl;
}

function findControlInModule(row, col)
{
    var options = 
    {
        loc: true,
        comment: true
    }

    try
    {
        var parsed = esprima.parse(editor.getValue(), options);
        return findControl(parsed, row, col)
    }
    catch (e)
    {
        // We don't really care about parsing errors (these happen a lot as we're editing code)
    }
}

function selectNode(node)
{
    var range = new Range(node.loc.start.line-1, node.loc.start.column, node.loc.end.line-1, node.loc.end.column);
    editor.selection.setSelectionRange(range, false);
}

function replaceNode(node, value)
{
    var range = new Range(node.loc.start.line-1, node.loc.start.column, node.loc.end.line-1, node.loc.end.column);
    editor.getSession().replace(range, value);
}

function updateProperties()
{
    $('#height').val('');
    $('#width').val('');

    var pos = editor.selection.getCursor();
    controlNode = findControlInModule(pos.row + 1, pos.col);

    if (controlNode)
    {
        console.log("Found control:", controlNode);
        for (var i = 0; i < controlNode.properties.length; i++)
        {
            var prop = controlNode.properties[i];
            if (prop.key.name == 'height')
            {
                $('#height').val(prop.value.value);
            }
            if (prop.key.name == 'width')
            {
                $('#width').val(prop.value.value);
            }
        }
    }
}

function selectControl()
{
    var pos = editor.selection.getCursor();
    controlNode = findControlInModule(pos.row + 1, pos.col);

    if (controlNode)
    {
        selectNode(controlNode);
    }
}

function propChange(control, propName)
{
    // !!! Value name have to be converted to string/quoted (depending on type)
    //
    console.log("Property '%s' changed to: %s", propName, control.value);

    var pos = editor.selection.getCursor();
    controlNode = findControlInModule(pos.row + 1, pos.col);

    if (controlNode)
    {
        console.log("Found control:", controlNode);
        for (var i = 0; i < controlNode.properties.length; i++)
        {
            var prop = controlNode.properties[i];
            if (prop.key.name == propName)
            {
                ignoreSelChange = true;
                replaceNode(prop.value, control.value);
                ignoreSelChange = false;
                return;
            }
        }

        // !!! We found the control node, but not the property.  We need to add it.
        //
    }
}

function onLoadModule(moduleName)
{
    console.log("Load modules:", moduleName);

    $.getJSON("module", { module: moduleName }, function(data)
    {
        // Process JSON response
        console.log("loadModule " + moduleName + ": " + JSON.stringify(data));
        editor.session.setValue(data.source);

        // Highlight the new active module...
        //
        $("div#modules a.active").removeClass("active");
        $("div#modules a[module='" + moduleName + "']").addClass("active");
     })
    .fail(function() 
    {
        alert( "loadModule error" );
    });

    return false; // To prevent default click behavior
}

