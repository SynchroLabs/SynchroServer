/**
 * jQuery Editable Select
 * Indri Muska <indrimuska@gmail.com>
 *
 * Source on GitHub @ https://github.com/indrimuska/jquery-editable-select
 *
 * RDD: Below based on version from Aug 20, 2016, commit: 19ad19f87931b81815831fadb9b6901ced1afef0
 *      Significant bug fixes and some behavior modifications made
 */
+(function ($) {
    // jQuery Editable Select
    EditableSelect = function (select, options) {
        var that     = this;
        
        this.options = options;
        this.$select = $(select);
        this.$input  = $('<input type="text" autocomplete="off">');
        this.$list   = $('<ul class="es-list">');
        this.utility = new EditableSelectUtility(this);
        
        if (['default', 'fade', 'slide'].indexOf(this.options.effects) < 0) this.options.effects = 'default';
        if (isNaN(this.options.duration) || ['fast', 'slow'].indexOf(this.options.duration) < 0) this.options.duration = 'fast';
        
        // create text input
        this.$select.replaceWith(this.$input);
        this.$list.appendTo(this.options.appendTo || this.$input.parent());
        
        // initalization
        this.utility.initialize();
        this.utility.initializeList();
        this.utility.initializeInput();
        this.utility.trigger('created');
    }
    EditableSelect.DEFAULTS = { filter: true, effects: 'default', duration: 'fast' };
    EditableSelect.prototype.filter = function () {
        var hiddens = 0;
        var search  = this.$input.val().toLowerCase().trim();
        
        this.$list.find('li').addClass('es-visible').show();
        if (this.options.filter) {
            hiddens = this.$list.find('li').filter(function (i, li) { return $(li).text().toLowerCase().indexOf(search) < 0; }).hide().removeClass('es-visible').length;
            if (this.$list.find('li').length == hiddens) this.hide();
        }
    };
    EditableSelect.prototype.show = function () {
        this.$list.css({
            top:   this.$input.position().top + this.$input.outerHeight() - 1 + this.$input.offsetParent().scrollTop(),
            left:  this.$input.position().left + this.$input.offsetParent().scrollLeft(),
            width: this.$input.outerWidth()
        });
        
        if (!this.$list.is(':visible') && this.$list.find('li.es-visible').length > 0) {
            var fns = { default: 'show', fade: 'fadeIn', slide: 'slideDown' };
            var fn  = fns[this.options.effects];
            
            this.utility.trigger('show');
            this.$input.addClass('open');
            this.$list[fn](this.options.duration, $.proxy(this.utility.trigger, this.utility, 'shown'));
        }
    };
    EditableSelect.prototype.hide = function () {
        var fns = { default: 'hide', fade: 'fadeOut', slide: 'slideUp' };
        var fn  = fns[this.options.effects];
        
        console.log("Hiding, current focus is:", $(':focus'));

        this.utility.trigger('hide');
        this.$input.removeClass('open');
        this.$list[fn](this.options.duration, $.proxy(this.utility.trigger, this.utility, 'hidden'));
    };
    EditableSelect.prototype.select = function ($li) {
        if (!this.$list.has($li) || !$li.is('li.es-visible')) return;
        this.$input.val($li.text()).trigger('input');
        this.hide();
        this.filter();
        this.utility.trigger('select', $li);

        // The list may be in the process of getting the focus (if it was clicked on to trigger the select).
        // So in order to get the focus back on the input, we need to queue the focus() until after the rest
        // of any pending mouse events (including the input blur) have fired...
        //
        var that = this;
        setTimeout(function(){
            that.$input.focus();
        });
    };
    EditableSelect.prototype.add = function (text, index, attrs, data) {
        var $li     = $('<li>').html(text);
        var $option = $('<option>').text(text);
        var last    = this.$list.find('li').length;
        
        if (isNaN(index)) index = last;
        else index = Math.min(Math.max(0, index), last);
        if (index == 0) {
          this.$list.prepend($li);
          this.$select.prepend($option);
        } else {
          this.$list.find('li').eq(index - 1).after($li);
          this.$select.find('option').eq(index - 1).after($option);
        }
        this.utility.setAttributes($li, attrs, data);
        this.utility.setAttributes($option, attrs, data);
        this.filter();
    };
    EditableSelect.prototype.remove = function (index) {
        var last = this.$list.find('li').length;
        
        if (isNaN(index)) index = last;
        else index = Math.min(Math.max(0, index), last - 1);
        this.$list.find('li').eq(index).remove();
        this.$select.find('option').eq(index).remove();
        this.filter();
    };
    EditableSelect.prototype.destroy = function () {
        this.$list.off('mousemove mousedown mouseenter');
        this.$input.off('focus blur mousemove mousedown input keydown');
        this.$input.replaceWith(this.$select);
        this.$list.remove();
        this.$select.removeData('editable-select');
    };
    
    // Utility
    EditableSelectUtility = function (es) {
        this.es = es;
    }
    EditableSelectUtility.prototype.initialize = function () {
        var that = this;
        that.setAttributes(that.es.$input, that.es.$select[0].attributes, that.es.$select.data());
        that.es.$input.addClass('es-input').data('editable-select', that.es);
        that.es.$select.find('option').each(function (i, option) {
            var $option = $(option).remove();
            that.es.add($option.text(), i, option.attributes, $option.data());
            if ($option.attr('selected')) that.es.$input.val($option.text());
        });
        that.es.filter();
    };
    EditableSelectUtility.prototype.initializeList = function () {
        var that = this;
        that.es.$list
            .on('mousemove', 'li', function () {
                that.es.$list.find('.selected').removeClass('selected');
                $(this).addClass('selected');
                $(this).css('cursor', 'default');
            })
            .on('mousedown', 'li', function () {
                that.es.select($(this));
            })
            .on('mouseenter', function () {
                that.es.$list.find('li.selected').removeClass('selected');
            });
    };
    EditableSelectUtility.prototype.isOverDisclosureArrow = function (event) {
        var rightPadding = parseInt(this.es.$input.css('padding-right'));
        var rightBorder = parseInt(this.es.$input.css('border-right-width'));
        return (event.offsetX > (this.es.$input.outerWidth() - (rightPadding + rightBorder)));
    };
    EditableSelectUtility.prototype.initializeInput = function () {
        var that = this;
        that.es.$input
            .on('focus', function (e) {
                console.log("input got focus");
                if (!that.es.$input.val()) {
                    that.es.show();
                }
            })
            .on('blur', function (e) {
                console.log("input lost focus");
                that.es.hide();
            })
            .on('mousemove', function (e) {
                if (that.isOverDisclosureArrow(e)) {
                    that.es.$input.css('cursor', 'default');
                } else {
                    that.es.$input.css('cursor', 'auto');
                }
            })
            .on('mousedown', function (e) {
                if (that.isOverDisclosureArrow(e)) {
                    if (that.es.$input.hasClass('open')) {
                        that.es.hide();
                    } else {
                        that.es.show();
                    }
                }
            })
            .on('input keydown', function (e) {
                switch (e.keyCode) {
                    case 38: // Up
                        var visibles = that.es.$list.find('li.es-visible');
                        var selected = visibles.index(visibles.filter('li.selected')) || 0;
                        that.highlight(selected - 1);
                        e.preventDefault();
                        break;
                    case 40: // Down
                        var visibles = that.es.$list.find('li.es-visible');
                        var selected = visibles.index(visibles.filter('li.selected')) || 0;
                        that.highlight(selected + 1);
                        e.preventDefault();
                        break;
                    case 13: // Enter
                        if (that.es.$list.is(':visible')) {
                            that.es.select(that.es.$list.find('li.selected'));
                            e.preventDefault();
                        }
                    case 9:  // Tab
                    case 27: // Esc
                        that.es.hide();
                        break;
                    default:
                        that.es.filter();
                        that.highlight(0);
                        break;
                }
            });
    };
    EditableSelectUtility.prototype.highlight = function (index) {
        var that = this;
        that.es.show();
        setTimeout(function () {
            var visibles         = that.es.$list.find('li.es-visible');
            var oldSelected      = that.es.$list.find('li.selected').removeClass('selected');
            var oldSelectedIndex = visibles.index(oldSelected);
            
            if (visibles.length > 0) {
                var selectedIndex = (visibles.length + index) % visibles.length;
                var selected      = visibles.eq(selectedIndex);
                var top           = selected.position().top;
                
                selected.addClass('selected');
                if (selectedIndex < oldSelectedIndex && top < 0)
                    that.es.$list.scrollTop(that.es.$list.scrollTop() + top);
                if (selectedIndex > oldSelectedIndex && top + selected.outerHeight() > that.es.$list.outerHeight())
                    that.es.$list.scrollTop(that.es.$list.scrollTop() + selected.outerHeight() + 2 * (top - that.es.$list.outerHeight()));
            }
        });
    };
    EditableSelectUtility.prototype.setAttributes = function ($element, attrs, data) {
        $.each(attrs || {}, function (i, attr) { $element.attr(attr.name, attr.value); });
        $element.data(data);
    };
    EditableSelectUtility.prototype.trigger = function (event) {
        var params = Array.prototype.slice.call(arguments, 1);
        var args   = [event + '.editable-select'];
        args.push(params);
        this.es.$select.trigger.apply(this.es.$select, args);
        this.es.$input.trigger.apply(this.es.$input, args);
    };
    
    // Plugin
    Plugin = function (option) {
        var args = Array.prototype.slice.call(arguments, 1);
        return this.each(function () {
            var $this   = $(this);
            var data    = $this.data('editable-select');
            var options = $.extend({}, EditableSelect.DEFAULTS, $this.data(), typeof option == 'object' && option);
            
            if (!data) data = new EditableSelect(this, options);
            if (typeof option == 'string') data[option].apply(data, args);
        });
    }
    $.fn.editableSelect             = Plugin;
    $.fn.editableSelect.Constructor = EditableSelect;
    
})(jQuery);