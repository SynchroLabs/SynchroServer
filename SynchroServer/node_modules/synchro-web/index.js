// SynchroWebClient server
//
var path = require('path');
var express = require('express');
var logger = require('log4js').getLogger("synchro-web-client");

var hbs = require('express-hbs');

var render = hbs.create().express3({
    partialsDir: __dirname + '/views/partials',
    contentHelperName: 'content'
});

// You must either call this with a valid config object, or with a fully-specified apiPath.  If you don't pass
// a config object (that is a Synchro API config object instance) or a fully-specified apiPath, then the resolution
// of the apiPath is going to fail.
//
var SynchroWeb = function(config, basePath, apiPath)
{
    this.config = config;
    this.basePath = basePath; // Where this service is served (not including trailing slash)
    this.apiPath = apiPath;   // Where apps are served (not including trailing slash)

    this.endpointPath = null;
    if (apiPath.match(/^https?:\/\/.*/))
    {
        // If the apiPath is fully specified, winner! (this will be the case when launched locally from app.js)
        this.endpointPath = apiPath;
    }
};

// Called before the Express router or any routes are added to the app.  This is a good time to add any
// static middleware.
//
SynchroWeb.prototype.addMiddleware = function(expressApp)
{
    // We need this to serve synchro.css, bundle.js (the main script bundle), and possibly other resources later.
    //
    logger.debug("Adding static path from basePath: " + this.basePath);
    logger.debug("Static path is: " + path.join(__dirname, 'public'));
    expressApp.use(this.basePath, express.static(path.join(__dirname, 'public')));
}

SynchroWeb.prototype.addRoutes = function(expressApp, config)
{
    var self = this;
    expressApp.get(this.basePath + '/:appName', function(req,res)
    {
        if (self.endpointPath == null)
        {
            // If the apiPath was relative, then we create the endpoint using current request info.  
            //
            // To form the endpoint path, we first compute the scheme based on serveral cues (whether the current 
            // request came in via SSL or whether we were proxied from a secure/SSL connection).
            //
            var secure = req.protocol == "https" || req.secure || (req.get && req.get('x-arr-ssl')); // For Azure, need to check x-arr-ssl, since it terminates SSL for us
            var scheme = secure ? "https" : "http";

            // Next we build the endpoint path using the scheme computed above, plus the host/port (we use the host from 
            // this request, and we add the configured port, as needed).  And of course we tack on the relative apiPath.
            //
            self.endpointPath = scheme + "://" + self.config.addNonStandardPort(req.host) + self.apiPath;
        }

        var locals = { endpoint:  self.endpointPath + '/' + req.params.appName };
        locals.settings = { views: path.join(__dirname, '/views') };

        logger.info("Locals:", JSON.stringify(locals, null, 4));

        render(locals.settings.views + '/index.hbs', locals, function(err, html) 
        {
            if (err)
            {
                logger.error("Error:", err);
            }
            else
            {
                res.send(html);
            }
        });
    });
}

module.exports = SynchroWeb
