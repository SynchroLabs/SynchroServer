require('./test');

var assert = require("assert")
require("./assert-helper");

var Transport = require('../client/core/transport');

function getTestHost()
{
    return "https://api.synchro.io";
}

function getSamplesTestEndpoint()
{
    return getTestHost() + "/api/samples";
}

describe.skip("Transport", function () 
{
    it("should return correct app name and description", function(done)
    {
        var expected = {
            "name": "synchro-samples",
            "version": "1.3.3",
            "description": "Synchro API Samples",
            "main": "menu",
            "author": "Bob Dickinson <bob@synchro.io> (http://synchro.io/)",
            "private": true,
            "engines":
            {
                "synchro": ">= 1.3.3"
            },
            "synchro": 
            {
               "clientVersion": ">=1.2.3"
            },
            "synchroArchiveUrl": "https://github.com/SynchroLabs/SynchroSamples/archive/master.zip"
        };

        var transport = new Transport(getSamplesTestEndpoint());

        transport.getAppDefinition( function(actual)
        {
            assert.objectsEqual(actual, expected);
            done();
        });
    });

    it("should get first page", function(done)
    {
        var transport = new Transport(getSamplesTestEndpoint());
        transport.sendMessage(
            null, 
            {
                "Mode": "Page",
                "Path": "menu",
                "TransactionId": 1,
                "DeviceMetrics": { "clientVersion": "1.2.3" }
            },
            function (response)
            {
                assert.equal("menu", response["Path"]);
                assert(!response.Error, "Unepected error: " + JSON.stringify(response.Error));
                done();
            },
            function (request, error)
            {
                assert(false, "Unexpected error from sendMessage");
            }
        );
    });

    it ("should navigate to page via command", function(done)
    {
        var transport = new Transport(getSamplesTestEndpoint());
        transport.sendMessage(
            null,
            {
                "Mode": "Page",
                "Path": "menu",
                "TransactionId": 1,
                "DeviceMetrics": { "clientVersion": "1.2.3" }
            },
            function (response)
            {
                assert.equal("menu", response["Path"]);

                var sessionId = response["NewSessionId"];
                var instanceId = response["InstanceId"];
                var instanceVersion = response["InstanceVersion"];

                transport.sendMessage(
                    sessionId,
                    {
                        "Mode": "Command",
                        "Path": "menu",
                        "TransactionId": 2,
                        "InstanceId": instanceId,
                        "InstanceVersion": instanceVersion,
                        "Command": "goToView",
                        "Parameters": { "view": "hello" }
                    },
                    function (response2)
                    {
                        assert.equal("hello", response2["Path"]);
                        done();
                    },
                    function (request, error)
                    {
                        assert(false, "Unexpected error from sendMessage");
                    }
                );
            },
            function (request, error)
            {
                assert(false, "Unexpected error from sendMessage");
            }
        );
    });

    it('should handle 404 failure', function(done)
    {
        var transport = new Transport(getTestHost());
        transport.sendMessage(
            null,
            {
                "Mode": "Page",
                "Path": "menu",
                "TransactionId": 1
            },
            function (response)
            {
                assert(false, "Unexpected success from sendMessage");
            },
            function (request, error)
            {
                assert.equal(404, error.statusCode);
                done();
            }
        );
    });

    it('should handle network failure', function(done)
    {
        var transport = new Transport("http://nohostcanbefoundhere");
        transport.sendMessage(
            null,
            {
                "Mode": "Page",
                "Path": "menu",
                "TransactionId": 1
            },
            function (response)
            {
                assert(false, "Unexpected success from sendMessage");
            },
            function (request, error)
            {
                assert.equal('ENOTFOUND', error.code);
                done();
            }
        );
    });

    it('should get uri from host string', function()
    {
        assert.equal(Transport.uriFromHostString("foo/app"), "http://foo/app");
        assert.equal(Transport.uriFromHostString("http://foo/app"), "http://foo/app");
        assert.equal(Transport.uriFromHostString("https://foo/app"), "https://foo/app");
    });
});
