var assert = require('assert');

var SynchroApp = require('../client/core/synchro-app');
var DeviceMetrics = require('../client/core/device-metrics');
var StateManager = require('../client/core/state-manager');
var SynchroApp = require('../client/core/synchro-app');
var Transport = require('../client/core/transport');

describe("StateManager", function () 
{
    it("should get app definition, start app, navigate to new page", function(done)
    {
        var deviceMetrics = new DeviceMetrics();

        // var endpoint = "https://api.synchro.io/api/samples";
        var endpoint = "http://localhost:1337/api/samples";

        var appManager = null; // !!! ?
        var app = new SynchroApp(endpoint, { name: 'test', description: 'Test app'});
        var transport = new Transport(endpoint);

        var stateManager = new StateManager(appManager, app, transport, deviceMetrics);

        var responseNumber = 0;
        var thePageView = null;
    
        function processPageView(pageView)
        {
            responseNumber++;
            thePageView = pageView;

            if (responseNumber == 1)
            {
                assert.equal("Synchro Samples", thePageView["title"]);
                stateManager.sendCommandRequestAsync("goToView", {"view": "hello"});
            }
            else if (responseNumber == 2)
            {
                assert.equal("Hello World", thePageView["title"]);
                done();
            }
        };

        function processMessageBox(messageBox, commandHandler)
        {
           console.log("Unexpected messageBox:", messageBox);
           assert(false, "Unexpected message box call in test");
        };

        function processLaunchUrl(primaryUrl, secondaryUrl)
        {
            console.log("Unexpected launchUrl:", primaryUrl);
            assert(false, "Unexpected processLaunchUrl call in test");
        };

        stateManager.setProcessingHandlers(processPageView, processMessageBox, processLaunchUrl);
        stateManager.startApplicationAsync();
    });
});