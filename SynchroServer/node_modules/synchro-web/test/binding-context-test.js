require('./test');

var assert = require("assert")
require("./assert-helper");

var bindingContext = require('../client/core/binding-context');
var JToken = require('../client/core/json');

var viewModelData =
{
    "serial": 0,
    "title": "Colors",
    "colors":
    [
        { "name": "Red", "color": "red", "value": "0xff0000" },
        { "name": "Green", "color": "green", "value": "0x00ff00" },
        { "name": "Blue", "color": "blue", "value": "0x0000ff" }
    ],
    "board":
    [
        [
            { "name": "s00" },
            { "name": "s01" }
        ],
        [
            { "name": "s10" },
            { "name": "s11" }
        ]
    ]
}

var viewModel = new JToken(viewModelData);

describe("BindingContext", function () 
{
    it("should select child", function()
    {
        var bindingCtx = new bindingContext.createRootBindingContext(viewModel);

        var titleCtx = bindingCtx.select("title");
        assert.equal(viewModelData["title"], titleCtx.getValue().getValue()); // gets token, gets value from token
    });

    it("should select children", function ()
    {
        var bindingCtx = new bindingContext.createRootBindingContext(viewModel);

        var colorsCtx = bindingCtx.select("colors");
        var colors = colorsCtx.selectEach("");
        assert.equal(3, colors.length);
    });

    it("should select child with path", function()
    {
        var bindingCtx = new bindingContext.createRootBindingContext(viewModel);
    
        assert.equal("Green", bindingCtx.select("colors[1].name").getValue().getValue());
    });

    it("should select data element", function ()
    {
        var bindingCtx = new bindingContext.createRootBindingContext(viewModel);
    
        assert.equal("Green", bindingCtx.select("colors[1].name").select("$data").getValue().getValue());
    });

    it("should select data element with double array indexes", function ()
    {
        var bindingCtx = new bindingContext.createRootBindingContext(viewModel);
    
        assert.equal("s01", bindingCtx.select("board[0][1].name").getValue().getValue());
    });

    it("should select parent element", function ()
    {
        var bindingCtx = new bindingContext.createRootBindingContext(viewModel);

        assert.equal("Green", bindingCtx.select("colors[1].name").select("$parent.name").getValue().getValue());
        assert.equal("Red", bindingCtx.select("colors[1].name").select("$parent.$parent[0].name").getValue().getValue());
        assert.equal("Colors", bindingCtx.select("colors[1].name").select("$parent.$parent.$parent.title").getValue().getValue());
        assert.equal(null, bindingCtx.select("colors[1].name").select("$parent.$parent.$parent.$parent").getValue()); // !!! No double getValue with null (not found)
    });

    it("should select parent element in array of array", function ()
    {
        var bindingCtx = new bindingContext.createRootBindingContext(viewModel);

        assert.equal(1, bindingCtx.select("board[1][0]").select("$parent.$index").getValue()); // !!! No double getValue with $index (?)
    });

    it("should select root element", function ()
    {
        var bindingCtx = new bindingContext.createRootBindingContext(viewModel);
    
        assert.equal("Colors", bindingCtx.select("colors[1].name").select("$root.title").getValue().getValue());
    });

    it("should index element on array item", function ()
    {
        var bindingCtx = new bindingContext.createRootBindingContext(viewModel);
    
        assert.equal(1, bindingCtx.select("colors[1]").select("$index").getValue()); // !!! No double getValue with $index (?)
    });

    it("should index element inside array item", function ()
    {
        var bindingCtx = new bindingContext.createRootBindingContext(viewModel);
    
        assert.equal(1, bindingCtx.select("colors[1].name").select("$index").getValue()); // !!! No double getValue with $index (?)
    });

    it("should set value", function ()
    {
        var testViewModel = viewModel.deepClone();
        assert(testViewModel.selectToken("colors.1").replace(new JToken({"name": "Greenish", "color": "green", "value": "0x00ff00" })));
        assert(!testViewModel.deepEquals(viewModel));
    
        var bindingCtx = new bindingContext.createRootBindingContext(testViewModel);
        var colorNameCtx = bindingCtx.select("colors[1].name");
        colorNameCtx.setValue(new JToken("Green"));
        assert(testViewModel.deepEquals(viewModel));
    });

    it("should rebind", function()
    {
        var testViewModel = viewModel.deepClone();

        var bindingCtx = bindingContext.createRootBindingContext(testViewModel);
        var colorNameCtx = bindingCtx.select("colors[1].name");
    
        assert(testViewModel.selectToken("colors.1").replace(new JToken({"name": "Purple", "color": "purp", "value": "0x696969" })));

        assert.equal("Green", colorNameCtx.getValue().getValue());
        colorNameCtx.rebind();
        assert.equal("Purple", colorNameCtx.getValue().getValue());
    });

    it("should handle undefined value", function()
    {
        var testViewModel = new JToken({foo: undefined});

        var bindingCtx = bindingContext.createRootBindingContext(testViewModel);
        var fooCtx = bindingCtx.select("foo");

        assert.equal(undefined, fooCtx.getValue().getValue());
    });
});
