require('./test');

var assert = require("assert")
require("./assert-helper");

var ViewModel = require('../client/core/view-model');
var JToken = require('../client/core/json');

describe("ViewModel", function () 
{
    var viewModelObj;

    beforeEach(function ()
    {
        viewModelObj = new JToken(
        {
            "serial": 1,
            "title": "Colors",
            "colors":
            [
                { "name": "Red",   "color": "red",   "value": "0xff0000" },
                { "name": "Green", "color": "green", "value": "0x00ff00" },
                { "name": "Blue",  "color": "blue",  "value": "0x0000ff" }
            ]
        });
    });

    it("should update view", function()
    {
        // Create a binding of each type, initialize them from the view model, verify that their values were set properly
        //
        var viewModel = new ViewModel();
    
        viewModel.initializeViewModelData(viewModelObj);
  
        var serialString = "";
        var propBinding = viewModel.createAndRegisterPropertyBinding(viewModel.getRootBindingContext(), "Serial: {serial}", function (valueToken)
        {
            serialString = valueToken.getValue(); 
        });

        var serialValue = -1;
        var valBinding = viewModel.createAndRegisterValueBinding(viewModel.getRootBindingContext().select("serial"),
            function ()
            {
                return new JToken(serialValue);
            },
            function (valueToken)
            {
                serialValue = valueToken.getValue();
            }
        );

        propBinding.updateViewFromViewModel();
        valBinding.updateViewFromViewModel();
    
        assert.equal("Serial: 1", serialString);
        assert.equal(1, serialValue);
    });

    it("should update view from value binding", function()
    {
        var viewModel = new ViewModel();
    
        viewModel.initializeViewModelData(viewModelObj);
    
        var bindingsInitialized = false;
    
        var serialString = "";
        var propBinding = viewModel.createAndRegisterPropertyBinding(viewModel.getRootBindingContext(), "Serial: {serial}", function (valueToken)
        {
            serialString = valueToken.getValue();
        });

        var titleString = "";
        var propBindingTitle = viewModel.createAndRegisterPropertyBinding(viewModel.getRootBindingContext(), "Title: {title}", function (valueToken)
        {
            titleString = valueToken.getValue();
            if (bindingsInitialized)
            {
                assert.Fail("Property binding setter for title should not be called after initialization (since its token wasn't impacted by the value binding change)");
            }
        });

        var serialValue = -1;
        var valBinding = viewModel.createAndRegisterValueBinding(viewModel.getRootBindingContext().select("serial"),
            function ()
            {
                return new JToken(serialValue);
            },
            function (valueToken)
            {
                serialValue = valueToken.getValue();
                if (bindingsInitialized)
                {
                    assert.Fail("Value binding setter should not be called after initialization (its change shouldn't update itself)");
                }
            }
        );
    
        propBinding.updateViewFromViewModel();
        propBindingTitle.updateViewFromViewModel();
        valBinding.updateViewFromViewModel();

        bindingsInitialized = true;

        assert.equal("Serial: 1", serialString);
        assert.equal("Title: Colors", titleString);
        assert.equal(1, serialValue);
    
        // When the value binding updates the view model, the propBinding (that has a token bound to the same context/path) will automatically
        // update (its setter will be called), but the value binding that triggered the update will not have its setter called.
        //
        serialValue = 2;
        valBinding.updateViewModelFromView();

        assert.equal("Serial: 2", serialString);
    
        // Now let's go collect the changes caused by value binding updates and verify them...
        //
        var changes = viewModel.collectChangedValues();

        assert.equal(1, Object.keys(changes).length);
        assert.equal(2, changes["serial"].getValue());
    
        // Collecting the changes (above) should have cleared the dirty indicators, so there shouldn't be any changes now...
        //
        assert.equal(0, Object.keys(viewModel.collectChangedValues()).length);
    });

    it("should update view from viewModel deltas", function()
    {
        var viewModel = new ViewModel();
    
        viewModel.initializeViewModelData(viewModelObj);
    
        var bindingsInitialized = false;
    
        var serialString = "";
        var propBinding = viewModel.createAndRegisterPropertyBinding(viewModel.getRootBindingContext(), "Serial: {serial}", function (valueToken)
        {
            serialString = valueToken.getValue();
        });
    
        var titleString = "";
        var propBindingTitle = viewModel.createAndRegisterPropertyBinding(viewModel.getRootBindingContext(), "Title: {title}", function (valueToken)
        {
            titleString = valueToken.getValue();
            if (bindingsInitialized)
            {
                Assert.Fail("Property binding setter for title should not be called after initialization (since its token wasn't impacted by the deltas)");
            }
        });
    
        var serialValue = -1;
        var valBinding = viewModel.createAndRegisterValueBinding(viewModel.getRootBindingContext().select("serial"),
            function () 
            {
                return new JToken(serialValue);
            },
            function (valueToken) 
            {
                serialValue = valueToken.getValue();
            }
        );
    
        propBinding.updateViewFromViewModel();
        propBindingTitle.updateViewFromViewModel();
        valBinding.updateViewFromViewModel();
    
        bindingsInitialized = true;
    
        assert.equal("Serial: 1", serialString);
        assert.equal("Title: Colors", titleString);
        assert.equal(1, serialValue);
    
        // We're going to apply some deltas to the view model and verify that the correct dependant bindings got updated,
        // and that no non-dependant bindings got updated
        //
        var deltas = new JToken(
        [
            {"path": "serial", "change": "update", "value": 2 }
        ]);
        viewModel.updateViewModelData(deltas, true);

        assert.equal("Serial: 2", serialString);
        assert.equal(2, serialValue);
    });

});
