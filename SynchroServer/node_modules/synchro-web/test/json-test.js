require('./test');

var assert = require("assert")
require("./assert-helper");

var JToken = require('../client/core/json');

describe("JSON", function () 
{
    it("should get object value", function()
    {
        var stuff = new JToken({});
        stuff.set("foo", 7);
        assert.equal(7, stuff.get("foo").getValue());
    });

    it("should get string value", function()
    {
        var stuff = new JToken({});
        stuff.set("bar", new JToken("kitty"));
        assert.equal("kitty", stuff.get("bar").getValue());
    });

    it("should get array values", function()
    {
        var stuff = new JToken({});
        stuff.set("baz", new JToken([8, "dog"]));
        assert.equal(8, stuff.get("baz").get(0).getValue());
        assert.equal("dog", stuff.get("baz").get(1).getValue());
    });

    it("should output json", function()
    {
        var stuff = new JToken(
        {
            "a": 
            { 
                "b": 
                { 
                    "c": true
                }
            },
            "e":
            [
                { "f": 3 },
                "h"
            ]
        });

        var expected = '{ "a": { "b": { "c": true } }, "e": [ { "f": 3 }, "h" ] }';
        assert.equal(expected, stuff.toJson());
    });

    it("should deep clone", function()
    {
        var stuff = new JToken(
        {
            "a": 
            { 
                "b": 
                { 
                    "c": true
                }
            },
            "e":
            [
                { "f": 3 },
                "h"
            ]
        });

        var duplicateStuff = new JToken(
        {
            "a": 
            { 
                "b": 
                { 
                    "c": true
                }
            },
            "e":
            [
                { "f": 3 },
                "h"
            ]
        });

        var cloneStuff = stuff.deepClone();

        assert(stuff.deepEquals(duplicateStuff));
        assert(stuff.deepEquals(cloneStuff));

        stuff.set("foo", "bar");

        assert(!stuff.deepEquals(duplicateStuff));
        assert(!stuff.deepEquals(cloneStuff));

        duplicateStuff.set("foo", "bar");

        assert(stuff.deepEquals(duplicateStuff));
        assert(!stuff.deepEquals(cloneStuff));
    });

    it("should get token via selectToken", function()
    {
        var stuff = new JToken(
        {
            "a": 
            { 
                "b": 
                { 
                    "c": true
                }
            },
            "e":
            [
                { "f": 3 },
                "h"
            ]
        });

        assert.equal(3, stuff.selectToken("e[0].f").getValue());
    });

    it("should produce path", function()
    {
        var stuff = new JToken(
        {
            "a": 
            { 
                "b": 
                { 
                    "c": true
                }
            },
            "e":
            [
                { "f": 3 },
                "h"
            ]
        });

        assert.equal("e[0].f", stuff.selectToken("e[0].f").getPath());
    });

    it("should remove by value", function()
    {
        // Note that it removes all matching values
        //
        var red = new JToken("Red");
        var green1 = new JToken("Green");
        var green2 = new JToken("Green");

        var arr = new JToken([]);
        arr.append(red);
        arr.append(green1);
        arr.append(green2)

        arr.removeItem("Green");

        assert.equal(1, arr.getCount());
        assert(red === arr.get(0));
    });

    it("should remove by object", function()
    {
        var red = new JToken("Red");
        var green1 = new JToken("Green");
        var green2 = new JToken("Green");

        var arr = new JToken([]);
        arr.append(red);
        arr.append(green1);
        arr.append(green2)

        arr.removeItem(green2);

        assert.equal(2, arr.getCount());
        assert(red === arr.get(0));
        assert(green1 === arr.get(1));
    });

    it("should update properly", function()
    {
        var stuff = new JToken({});

        stuff.set("a", null);
        stuff.set("b", null);

        var vmItemValue = stuff.selectToken("a");
        var rebindRequired = JToken.updateTokenValue(vmItemValue, new JToken({ "baz": "Fraz" }));

        var expected = new JToken(
        {
            "a": { "baz": "Fraz" },
            "b": null
        });

        assert(rebindRequired);
        assert(expected.deepEquals(stuff));
    });
});
