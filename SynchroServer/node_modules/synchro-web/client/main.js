var log4js = require('log4js');

var pageView = null;

// Worlds worst UInt8ClampedArray polyfill.  We don't actually use this type anywhere, but somewhere
// in the bowels of the dependency chain of node request someone references it, which causes IE 10/11
// to blow up (notably, that's the browser on WinPhone 8.x).  So we just define it if not already
// defined to get past that.
//
if ('window' in global) {
    if (!('Uint8ClampedArray' in window)) {
        window.Uint8ClampedArray = function(input,arg1,arg2) { };
    }
}

var synchroClientServices = {
    goBack: function()
    {
        if (pageView)
        {
            pageView.goBack();
        }
    },
    renderView: function(view, viewModel)
    {
        renderView(view, viewModel);
    }
}

var synchroApp = SynchroInit(synchroClientServices);

var defaultLogConfig =
{ 
    // Redirect console.log to log4js, turn off color coding
    appenders:
    [ 
        { type: "console", layout: { type: "basic" } } 
    ],
    replaceConsole: true,
    levels: 
    {
        '[all]': 'WARN'
    }
};

log4js.configure(synchroApp.logConfig || defaultLogConfig);

var logger = require('log4js').getLogger("main");

logger.info("Client script is running, endpoint:", synchroApp.endpoint);

var SynchroApp = require('./core/synchro-app');
var DeviceMetrics = require('./core/device-metrics');
var StateManager = require('./core/state-manager');
var SynchroApp = require('./core/synchro-app');
var Transport = require('./core/transport');
var WebPageView = require('./core/web-page-view');
var JToken = require('./core/json');

var deviceMetrics = new DeviceMetrics();

var page = document;

if (synchroApp.endpoint)
{
    var app = new SynchroApp(synchroApp.endpoint, { name: 'test', description: 'Test app'}); // !!! ???
    var transport = new Transport(synchroApp.endpoint);

    var stateManager = new StateManager(null, app, transport, deviceMetrics);

    var backToMenu = null;

    var pageView = new WebPageView(stateManager, stateManager.getViewModel(), page, synchroApp.container, synchroApp.onMessageBox);

    if (synchroApp.onSetPageTitle)
    {
        pageView.setOnPageTitleCallback(synchroApp.onSetPageTitle);
    }

    if (synchroApp.onSetBackEnabled)
    {
        pageView.setOnBackEnabledCallback(synchroApp.onSetBackEnabled);
    }

    stateManager.setProcessingHandlers(pageView.processPageView.bind(pageView), pageView.processMessageBox.bind(pageView), pageView.processLaunchUrl.bind(pageView));
    stateManager.startApplicationAsync();
}

function renderView(view, viewModelData)
{
    var stateManager = new StateManager(null, null, null, deviceMetrics);
    stateManager.getViewModel().initializeViewModelData(new JToken(viewModelData));

    // !!! There is probably a better, more orderly, way to do this (to make sure any existing controls get unregistered, etc).
    //
    synchroApp.container.innerHTML = '';

    var pageView = new WebPageView(stateManager, stateManager.getViewModel(), page, synchroApp.container, synchroApp.onMessageBox);

    if (synchroApp.onSetPageTitle)
    {
        pageView.setOnPageTitleCallback(synchroApp.onSetPageTitle);
    }

    pageView.processPageView(view);

    logger.info("renderView");
}
