var log4js = require('log4js');

var pageView = null;

var synchroClientServices = {
    goBack: function()
    {
        if (pageView)
        {
            pageView.goBack();
        }
    }
}
var synchroApp = SynchroInit(synchroClientServices);

var defaultLogConfig =
{ 
    // Redirect console.log to log4js, turn off color coding
    appenders:
    [ 
        { type: "console", layout: { type: "basic" } } 
    ],
    replaceConsole: true,
    levels: 
    {
        '[all]': 'WARN'
    }
};

log4js.configure(synchroApp.logConfig || defaultLogConfig);

var logger = require('log4js').getLogger("main");

logger.info("Client script is running, endpoint:", synchroApp.endpoint);

var SynchroApp = require('./core/synchro-app');
var DeviceMetrics = require('./core/device-metrics');
var StateManager = require('./core/state-manager');
var SynchroApp = require('./core/synchro-app');
var Transport = require('./core/transport');
var WebPageView = require('./core/web-page-view');

var deviceMetrics = new DeviceMetrics();

var app = new SynchroApp(synchroApp.endpoint, { name: 'test', description: 'Test app'}); // !!! ???
var transport = new Transport(synchroApp.endpoint);

var stateManager = new StateManager(null, app, transport, deviceMetrics);

var page = document;
var backToMenu = null;

var pageView = new WebPageView(stateManager, stateManager.getViewModel(), page, synchroApp.container, synchroApp.onMessageBox);

if (synchroApp.onSetPageTitle)
{
    pageView.setOnPageTitleCallback(synchroApp.onSetPageTitle);
}

if (synchroApp.onSetBackEnabled)
{
    pageView.setOnBackEnabledCallback(synchroApp.onSetBackEnabled);
}

stateManager.setProcessingHandlers(pageView.processPageView.bind(pageView), pageView.processMessageBox.bind(pageView), pageView.processLaunchUrl.bind(pageView));
stateManager.startApplicationAsync();
