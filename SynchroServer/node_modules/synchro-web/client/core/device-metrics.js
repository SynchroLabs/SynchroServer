var logger = require('log4js').getLogger("device-metrics");

var DeviceMetrics = function()
{
    this._clientName = "Synchro Web"
    this._clientVersion = "1.2.3";
    this._deviceClass = DeviceMetrics.DeviceClass.Tablet;

    this._os = "Web";
    this._osName = "Web";
    this._deviceName = "Web Browser";

    this._naturalOrientation = DeviceMetrics.Orientation.Landscape;

    this._scalingFactor = 1.0;
    this._deviceScalingFactor = 1.0;

    // !!! ???
    _widthDeviceUnits = null;
    _heightDeviceUnits = null;
    _widthInches = null;
    _heightInches = null;
}

DeviceMetrics.DeviceClass =
{
    Phone:      "Phone",      // 3.5"-5" phones
    Phablet:    "Phablet",    // 5"-6" big phones (Nokia 1520)
    MiniTablet: "MiniTablet", // 7"-8" mini tablets (iPad Min, Nexus 7, etc)
    Tablet:     "Tablet"      // 9"+ tablets (iPad, Surface, etc)
}

DeviceMetrics.DeviceType =
{
    Phone:  DeviceMetrics.DeviceClass.Phone,
    Tablet: DeviceMetrics.DeviceClass.Tablet
}

DeviceMetrics.Orientation = 
{
    Portrait:  "Portrait",
    Landscape: "Landscape",
}

// Client details
//
DeviceMetrics.prototype.getClientName = function()
{ 
    return this._clientName; 
}
DeviceMetrics.prototype.getClientVersion = function()
{ 
    return this._clientVersion; 
}

// Device details
//
DeviceMetrics.prototype.getOS = function()
{ 
    return this._os; 
}
DeviceMetrics.prototype.getOSName = function()
{ 
    return this._osName; 
}
DeviceMetrics.prototype.getDeviceName = function()
{ 
    return this._deviceName; 
}

// Device type
//
DeviceMetrics.prototype.getDeviceClass = function()
{ 
    return this._deviceClass; 
}
DeviceMetrics.prototype.getDeviceType = function()
{
    return ((this._deviceClass == DeviceMetrics.DeviceClass.Phone) || (this._deviceClass == DeviceMetrics.DeviceClass.Phablet)) ? DeviceMetrics.DeviceType.Phone : DeviceMetrics.DeviceType.Tablet;
}

DeviceMetrics.prototype.getNaturalOrientation = function()
{ 
    return this._naturalOrientation;
}

DeviceMetrics.prototype.getCurrentOrientation = function()
{
    return DeviceMetrics.Orientation.Landscape;
}

// Physical dimensions of device
//
DeviceMetrics.prototype.getWidthInches = function()
{ 
    return this._widthInches; 
}
DeviceMetrics.prototype.getHeightInches = function()
{ 
    return this._heightInches; 
}

// Logical dimensions of device
//
// "Device Units" is a general term to describe whatever units are used to position and size objects in the target environment.
// In iOS this unit is the "point" (a term Apple uses, not to be confused with a typographic point).  In Android, this unit is
// actually the physical pixel value.  In WinPhone this is the "view pixels" value (a virtual coordinate space).
//
DeviceMetrics.prototype.getWidthDeviceUnits = function()
{ 
    return this._widthDeviceUnits;
}
DeviceMetrics.prototype.getHeightDeviceUnits = function()
{ 
    return this._heightDeviceUnits; 
}

// Device scaling factor is the ratio of device units to physical pixels.  This can be used to determine an appropriately sized 
// image resource, for example.
//
DeviceMetrics.prototype.getDeviceScalingFactor = function()
{ 
    return this._deviceScalingFactor; 
}

// Dimensions of device
//
DeviceMetrics.prototype.getWidthUnits = function()
{ 
    return this._widthDeviceUnits / this._scalingFactor; 
}
DeviceMetrics.prototype.getHeightUnits = function()
{ 
    return this._heightDeviceUnits / this._scalingFactor;
}

// Scaling factor is the ratio of logic units to device units.
//
DeviceMetrics.prototype.getScalingFactor = function()
{ 
    this._scalingFactor; 
}

DeviceMetrics.prototype.SynchroUnitsToDeviceUnits = function(synchroUnits)
{
    return synchroUnits * this._scalingFactor;
}

// Font scaling - to convert font points (typographic points) to Maaas units, we need to normalize for all "phone" types
// using a theoritical model phone with "average" dimensions.  The idea is that on all phone devices, fonts of a given 
// size should take up about the same relative amount of screen real estate (so that layouts will scale).
//
//     Model phone
//     ===============================
//     Screen size: 4.25"
//     Aspect: 480x800 units (assume these are Maaas units)
//     Diagnonal units (932.95) / Screen size in inches (4.25") = 219.52 units/inch
//
//     Since 72 (typographic points per inch) times 3 = 216, which is very close to the computed value above,
//     we're just going to use a factor of 3x to convert from typographic points to Maaas units (this will also
//     make it easy for Maaas UX designers to understand the relationship of typographic points to Maaas units).
//
DeviceMetrics.prototype.getTypographicPointsToMaaasUnits = function(points)
{
    // Convert typographic point values (72pt/inch) to Maaas units (219.52units/inch on model phone)
    //
    return points * 3;
}


module.exports = DeviceMetrics;
