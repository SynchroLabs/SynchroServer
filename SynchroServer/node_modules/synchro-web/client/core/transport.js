// 'request' should work in the browser - per: https://github.com/request/request/issues/455
//
var request = require('request');

var logger = require('log4js').getLogger("transport");

var Transport = function(uri)
{
    this.uri = uri;
    this.sessionId;
    this.responseHandler;
    this.requestFailureHandler;
}

Transport.uriFromHostString = function(host, scheme)
{
    if (!scheme)
    {
        scheme = 'http';
    }
    var uri = host;
    if (!host.match(/^https?:\/\/.*/))
    {
        uri = scheme + "://" + host;
    }
    return uri;
}

Transport.prototype.setDefaultHandlers = function(responseHandler, requestFailureHandler)
{
    this.responseHandler = responseHandler;
    this.requestFailureHandler = requestFailureHandler;
}

Transport.prototype.sendMessage = function(sessionId, requestObject, responseHandler, requestFailureHandler)
{
    logger.info("Request:", requestObject);

    if (sessionId != null)
    {
        this.sessionId = sessionId;
    }

    if (responseHandler == null)
    {
        responseHandler = this.responseHandler;
    }
    if (requestFailureHandler == null)
    {
        requestFailureHandler = this.requestFailureHandler;
    }

    var options =
    { 
        url: this.uri,
        method: 'POST',
        json: requestObject,
        headers: {
          'synchro-api-session-id': this.sessionId
        },
        timeout: 5000
    };

    request(options, function (err, response, body)
    {
        if (response && ((response.statusCode < 200) || (response.statusCode >= 300)))
        {
            err = new Error("Non-success status received on response: " + response.statusCode);
            err.statusCode = response.statusCode; // !!! err.Data[statusCode] ?
        }

        if (err)
        {
            requestFailureHandler(requestObject, err);
        }
        else
        {
            responseHandler(body);
        }
    });
}

Transport.prototype.getAppDefinition = function(callback)
{
    var requestObject = 
    {
        "Mode": "AppDefinition",
        "TransactionId": 0
    }

    this.sendMessage(
        null,
        requestObject,
        function (response)
        {
            callback(response.App);
        },
        function (err)
        { 
            callback(null);
        }
    );
}

module.exports = Transport;
