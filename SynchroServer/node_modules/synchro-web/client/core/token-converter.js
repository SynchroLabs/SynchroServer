var logger = require('log4js').getLogger("token-converter");

var JToken = require('./json');

// The TokenConverter is typically used by controls that require a value of a specific type when binding to a token, and 
// have a promise that they will coerce other types to the required type.  These supported conversions will be documented
// and supported for use by end-user developers.
//
//  Note: The point is not necessarily to convert "literally" (where, say, you would interpret the string "true" as the
//        boolean true), but to convert logically, at least in the realm of how we use tokens in Synchro. See below...
//
// An example of how token conversion works:  Suppose you have an edit control to enter search text, which has a two-way
// (value) binding to a token.  Suppose you have a search button that you only want to be enabled when there is text in
// the edit control.  By binding the "enabled" attribute of the button to the same token (which contains a string value),
// the token conversion means that the button will be disabled if the string is empty and enabled if not.
//
// Another example would be a in display a list of items.  Say you had a stackpanel containing a list caption, a list view,
// and some buttons that operated on the list contents.  The list contents themselves come from a token containing an array.
// By binding the "visibility" attribute of the containing stackpanel to the token containing the list, the entire group
// will be hidden if the list is empty, and it will be shown if the list is not empty.
//
// Finally, lets say in the example above, you wanted to display the number of items in the list.  You could use a property
// binding containing the binding token that references the list token, that when rendered as a string would get converted
// to the number of items in the list (in the underlying array).
//

function toString(token, defaultValue)
{
    var result = defaultValue || "";

    if (token != null)
    {
        if (JToken.isArray(token))
        {
            result = String(token.getCount());
        }
        else if (JToken.isNull(token))
        {
            result = "";
        }
        else if (!JToken.isObject(token))
        {
            result = String(token.getValue());
        }
    }

    return result;
}

function toBoolean(token, defaultValue)
{
    var result = defaultValue || false;

    if (token != null)
    {
        if (JToken.isArray(token))
        {
            result = token.getCount() > 0;
        }
        else if (JToken.isObject(token))
        {
            result = true;
        }
        else
        {
            var value = token.getValue();
            if (typeof value === 'boolean')
            {
                result = value;
            }
            else if (typeof value === 'string')
            {
                result = value.length > 0;
            }
            else if (typeof value === 'number')
            {
                result = value != 0;
            }
        }
    }

    return result;
}
    
function toDouble(token, defaultValue)
{
    var result = defaultValue;

    if (token != null)
    {
        if (JToken.isArray(token))
        {
            result = token.getCount();
        }
        else
        {
            var value = token.getValue();
            if (typeof value === 'number')
            {
                result = value;
            }
            else if (typeof value === 'string')
            {
                result = Number(value);
                if (isNaN(result))
                {
                    result = null;
                }
            }
        }
    }

    return result;
}

exports.toString = toString;
exports.toBoolean = toBoolean;
exports.toDouble = toDouble;