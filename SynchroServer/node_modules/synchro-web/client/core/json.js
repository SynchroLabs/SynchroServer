var logger = require('log4js').getLogger("json");

// Assume we are populated with a JavaScript primitive value
//
var JToken = function(value, parent)
{
    this._parent = parent ? parent : null;

    if (isArray(value))
    {
        this._value = [];
        for (var i = 0; i < value.length; i++)
        {
            if (isToken(value[i]))
            {
                value[i]._parent = this;
                this._value.push(value[i]);
            }
            else
            {
                this._value.push(new JToken(value[i], this));
            }
        }
    }
    else if (isObject(value))
    {
        this._value = {};
        var keys = Object.keys(value);
        for (var i = 0; i < keys.length; i++) 
        {
            if (isToken(value[keys[i]]))
            {
                value[keys[i]]._parent = this;
                this._value[keys[i]] = value[keys[i]];
            }
            else
            {
                this._value[keys[i]] = new JToken(value[keys[i]], this);
            }
        }
    }
    else
    {
        if (value === undefined)
        {
            value = null;
        }
        this._value = value;
    }
}

function isArray(obj)
{
    return Array.isArray(obj);
}
JToken.isArray = function(token) {return isArray(token._value)};

function isObject(obj)
{
    return (obj != null) && (typeof obj === 'object') && (!Array.isArray(obj));
}
JToken.isObject = function(token) {return isObject(token._value)};

function isPrimitive(obj)
{
    return typeof obj !== 'object';
}
JToken.isPrimitive = function(token) {return isPrimitive(token._value)};

function isString(obj)
{
    return typeof obj === 'string';
}
JToken.isString = function(token) {return isString(token._value)};

function isNumber(obj)
{
    return typeof obj === 'number';
}
JToken.isNumber = function(token) {return isNumber(token._value)};

function isBoolean(obj)
{
    return typeof obj === 'boolean';
}
JToken.isBoolean = function(token) {return isBoolean(token._value)};

function isNull(obj)
{
    return obj === null;
}
JToken.isNull = function(token) {return isNull(token._value)};

function isToken(obj)
{
    return JToken.prototype.isPrototypeOf(obj);
}
JToken.isToken = function(obj) {return isToken(obj)};

function indexOfValue(arr, value)
{
    if (isToken(value))
    {
        return arr.indexOf(value);
    }
    else
    {
        for (var i = 0; i < arr.length; i++)
        {
            if (arr[i]._value === value)
            {
                return i;
            }
        }
        return -1;
    }
}

function objectKeyForValue(obj, value)
{
    for (var key in obj) 
    {
        if (obj.hasOwnProperty(key)) 
        {
            if (isToken(value))
            {
                if (obj[key] === value)
                {
                    return key;
                }
            }
            else
            {
                if (obj[key]._value === value)
                {
                    return key;
                }
            }
        }
    }

    return null;
}

JToken.prototype.getParent = function()
{
    return this._parent;
}

JToken.prototype.setParent = function(parent)
{
    this._parent = parent;
}

JToken.prototype.getValue = function()
{ 
    return this._value;
}

JToken.prototype.setValue = function(value)
{
    this._value = value;
}

JToken.prototype.getRoot = function()
{
    if (this._parent)
    {
        return this._parent.getRoot();
    }
    else
    {
        return this;
    }
}

JToken.prototype.getType = function()
{
    if (isArray(this._value))
    {
        return 'array'
    }
    else
    {
        return typeof this._value;
    }
}

JToken.prototype.getKeys = function(keyOrIndex)
{
    if (isObject(this._value))
    {
        return Object.keys(this._value);
    }

    return null; // Err
}

JToken.prototype.get = function(keyOrIndex)
{
    if (isArray(this._value) || isObject(this._value))
    {
        return this._value[keyOrIndex];
    }

    return null; // Err
}

JToken.prototype.set = function(keyOrIndex, value)
{
    if (isArray(this._value) || isObject(this._value))
    {
        if (isToken(value))
        {
            value._parent = this;
            this._value[keyOrIndex] = value;
        }
        else
        {
            this._value[keyOrIndex] = new JToken(value, this);
        }

        return this._value[keyOrIndex];
    }

    return null; // Err
}

JToken.prototype.getCount = function(keyOrIndex)
{
    if (isArray(this._value))
    {
        return this._value.length;
    }

    return null; // Err
}

JToken.prototype.append = function(value)
{
    if (isArray(this._value))
    {
        if (isToken(value))
        {
            value._parent = this;
            this._value.push(value);
        }
        else
        {
            this._value.push(new JToken(value, this));
        }

        return this._value[this._value.length-1];
    }

    return null; // Err
}

JToken.prototype.removeItem = function(value)
{
    var removedItem = null;

    if (isArray(this._value))
    {
        var index = indexOfValue(this._value, value);
        if (index >= 0)
        {
            this._value[index].parent = null;
            removedItem = this._value[index];
            this._value.splice(index);
        }
    }
    else if (isObject(this._value))
    {
        var key = objectKeyForValue(this._value, value);
        if (key)
        {
            this._value[key].parent = null;
            removedItem = this._value[key];
            delete this._value[key];
        }
    }
    else
    {
        // Err
    }

    return removedItem;
}

JToken.prototype.getPath = function()
{
    var useDotNotation = false;

    var path = "";
    
    if (this._parent != null)
    {
        path += this._parent.getPath();
    
        if (isArray(this._parent._value))
        {
            var pos = this._parent._value.indexOf(this);
            if (pos >= 0)
            {
                if (useDotNotation)
                {
                    if (path.length != 0)
                    {
                        path += ".";
                    }
                    path += pos;
                }
                else
                {
                    path += "[" + pos + "]";
                }
            }
        }
        else if (isObject(this._parent._value))
        {
            var key = objectKeyForValue(this._parent._value, this);
            if (key)
            {
                if (path.length != 0)
                {
                    path += ".";
                }
                path += key;

            }
        }
    }
    
    return path;
}

var pathRegex = /\[(\d+)\]/g;

JToken.prototype.selectToken = function(path, errorWhenNoMatch)
{
    var pathElements = path.replace(pathRegex, ".$1").split(".");
    var currentToken = this;
    for (var i = 0; i < pathElements.length; i++)
    {
        if (isArray(currentToken._value))
        {
            currentToken = currentToken._value[parseInt(pathElements[i])];
            if (currentToken === undefined)
            {
                // Path element (index) did not exist in array
                break;
            }
        }
        else if (isObject(currentToken._value))
        {
            currentToken = currentToken._value[pathElements[i]];
            if (currentToken === undefined)
            {
                // Path element (key) did not exist in object
                break;
            }
        }
        else
        {
            // There was a path element, but not object or array to look in
            currentToken = undefined;
            break;
        }
    }

    if (currentToken === undefined)
    {
        currentToken = null;
        if (errorWhenNoMatch)
        {
            // If you try to go into anything other than an object or array looking for a 
            // child element, you are barking up the wrong tree...
            //
            throw new Error("The provided path did not resolve to a token");
        }
    }

    return currentToken;
}

JToken.prototype.remove = function()
{
    var bRemoved = false;

    if (this._parent != null)
    {
        if (isArray(this._parent._value))
        {
            var pos = this._parent._value.indexOf(this);
            if (pos >= 0)
            {
                this._parent._value.splice(pos, 1);
                bRemoved = true;
            }
        }
        else if (isObject(this._parent._value))
        {
            var key = objectKeyForValue(this._parent._value, this);
            if (key)
            {
                delete this._parent._value[key];
                bRemoved = true;
            }
        }
    }

    if (bRemoved)
    {
        this._parent = null;
    }

    return bRemoved;
}

JToken.prototype.replace = function(token)
{
    var bReplaced = false;

    if (this._parent != null)
    {
        if (isArray(this._parent._value))
        {
            var pos = this._parent._value.indexOf(this);
            if (pos >= 0)
            {
                this._parent._value[pos] = token;
                bReplaced = true;
            }
        }
        else if (isObject(this._parent._value))
        {
            var key = objectKeyForValue(this._parent._value, this);
            if (key)
            {
                this._parent._value[key] = token;
                bReplaced = true;
            }
        }
    }

    if (bReplaced)
    {
        token._parent = this._parent;
        this._parent = null;
    }

    return bReplaced;
}

// If returns true, update your reference to currentToken to newToken
//
JToken.updateTokenValue = function(currentToken, newToken)
{
    if (currentToken !== newToken)
    {
        if (isPrimitive(currentToken._value) && isPrimitive(newToken._value))
        {
            // If the current token and the new token are both primitive values, then we just do a
            // value assignment...
            //
            currentToken._value = newToken._value;
        }
        else
        {
            // Otherwise we have to replace the current token with the new token in the current token's parent...
            //
            if (currentToken.replace(newToken))
            {
                return true; // Token change
            }
        }
    }
    return false; // Value-only change, or no change
}

JToken.prototype.deepEquals = function(token)
{
    if (token === null)
    {
        return false;
    }
    else if (this === token)
    {
        // Same object
        return true;
    }
    if (isArray(this._value) && isArray(token._value))
    {
        if (this._value.length != token._value.length)
        {
            return false;
        }

        for (var i = 0; i < this._value.length; i++)
        {
            if (!this._value[i].deepEquals(token._value[i]))
            {
                return false;
            }
        }
        return true;
    }
    else if (isObject(this._value) && isObject(token._value))
    {
        var keys = Object.keys(this._value);
        var tokenKeys = Object.keys(token._value);
        if (keys.length != tokenKeys.length)
        {
            return false;
        }

        for (var i = 0; i < keys.length; i++) 
        {
            if (!this._value[keys[i]].deepEquals(token._value[keys[i]]))
            {
                return false;
            }
        }
        return true;
    }
    else if ((typeof this._value) == (typeof token._value))
    {
        return this._value == token._value;
    }

    // Not the same types
    return false;
}

JToken.prototype.deepClone = function()
{
    var clone = new JToken()

    if (isArray(this._value))
    {
        clone._value = [];
        for (var i = 0; i < this._value.length; i++)
        {
            var newValue = this._value[i].deepClone();
            newValue._parent = clone;
            clone._value.push(newValue);
        }
    }
    else if (isObject(this._value))
    {
        clone._value = {};
        var keys = Object.keys(this._value);
        for (var i = 0; i < keys.length; i++) 
        {
            var newValue = this._value[keys[i]].deepClone();
            newValue._parent = clone;
            clone._value[keys[i]] = newValue;
        }
    }
    else
    {
        clone._value = this._value;
    }

    return clone;
}

JToken.prototype.toJson = function()
{
    var json = "";

    if (isArray(this._value))
    {
        json += "[ ";
        for (var i = 0; i < this._value.length; i++)
        {
            json += this._value[i].toJson();
            if (i < this._value.length-1)
            {
                json += ", "
            }
        }
        json += " ]"
    }
    else if (isObject(this._value))
    {
        json += "{ "
        var keys = Object.keys(this._value);
        for (var i = 0; i < keys.length; i++) 
        {
            json += '"' + keys[i] + '": ' + this._value[keys[i]].toJson();
            if (i < keys.length-1)
            {
                json += ", "
            }
        }
        json += " }"
    }
    else if (this._value === null)
    {
        json += "null";
    }
    else
    {
        json += JSON.stringify(this._value);
    }

    return json;
}

module.exports = JToken;
