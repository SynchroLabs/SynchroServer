var logger = require('log4js').getLogger("web-page-view");

var PageView = require('./page-view');
var WebControlWrapper = require('../controls/web-control-wrapper');

var WebPageView = function(stateManager, viewModel, page, contentControl, doBackMenuCallback) //  page is "document" and contentControl is div container for app
{
    this.base = PageView;
    this.base(stateManager, viewModel, doBackMenuCallback);

    this._rootControlWrapper = new WebControlWrapper(this, this._stateManager, this._viewModel, this._viewModel.getRootBindingContext(), contentControl);
}
WebPageView.prototype = Object.create(PageView.prototype);

// From the original code - these abstract functions will be implemented by the derived class
//
/*
public abstract ControlWrapper CreateRootContainerControl(JObject controlSpec);
public abstract void ClearContent();
public abstract void SetContent(ControlWrapper content);
*/

WebPageView.prototype.createRootContainerControl = function(controlSpec)
{
    return WebControlWrapper.createControl(this._rootControlWrapper, this._viewModel.getRootBindingContext(), controlSpec);
}

WebPageView.prototype.clearContent = function()
{
    logger.info("Clear content");
    var contentControl = this._rootControlWrapper._control; // <div>
    contentControl.innerHTML = '';
    /*
    _rootControlWrapper.ChildControls.Clear();
    */
}

WebPageView.prototype.setContent = function(content) // content is ControlWrapper
{
    logger.info("Set content");
    var contentControl = this._rootControlWrapper._control; // <div>

    if (content != null)
    {
        contentControl.appendChild(content._control);
    }
    /*
    _rootControlWrapper.ChildControls.Add(content);
    */
}

//
// MessageBox stuff...
//

WebPageView.prototype.processMessageBox = function(messageBox, onCommand) // onCommand is CommandHandler
{
    logger.info("MessageBox:", JSON.stringify(messageBox, null, 4));
    /*
    string message = PropertyValue.ExpandAsString((string)messageBox["message"], _viewModel.RootBindingContext);

    var messageDialog = new MessageDialog(message);

    if (messageBox["title"] != null)
    {
        messageDialog.Title = PropertyValue.ExpandAsString((string)messageBox["title"], _viewModel.RootBindingContext);
    }

    UICommandInvokedHandler handler = new UICommandInvokedHandler(delegate(IUICommand command)
    {
        logger.Debug("MessageBox Command invoked: {0}", command.Label);
        if (command.Id != null)
        {
            logger.Debug("MessageBox command: {0}", (string)command.Id);
            onCommand((string)command.Id);
        }
    });

    if (messageBox["options"] != null)
    {
        JArray options = (JArray)messageBox["options"];
        foreach (JObject option in options)
        {
            if ((string)option["command"] != null)
            {
                messageDialog.Commands.Add(
                    new UICommand(
                        PropertyValue.ExpandAsString((string)option["label"], _viewModel.RootBindingContext),
                        handler,
                        PropertyValue.ExpandAsString((string)option["command"], _viewModel.RootBindingContext)
                    )
                );
            }
            else
            {
                messageDialog.Commands.Add(
                    new UICommand(
                        PropertyValue.ExpandAsString((string)option["label"], _viewModel.RootBindingContext),
                        handler
                    )
                );
            }
        }
    }

    await messageDialog.ShowAsync();
    */
}

WebPageView.prototype.processLaunchUrl = function(primaryUrl, secondaryUrl)
{
    logger.info("Launch URL:", primaryUrl);
    /*
    var uri = new Uri(primaryUrl, UriKind.Absolute);
    var options = new Windows.System.LauncherOptions();
    if ((secondaryUrl != null) && (secondaryUrl.Length > 0))
    {
        options.FallbackUri = new Uri(secondaryUrl);
    }
    await Windows.System.Launcher.LaunchUriAsync(uri, options);
    */
}

module.exports = WebPageView;
