var logger = require('log4js').getLogger("page-view");

var JToken = require('./json');

// There is some debate as to whether this code should just be merged with the platform-specific implementation.
// To maintain consistency with the other ports - we will keep this class as it is (where the platform-generic code lives).
//
var PageView = function(stateManager, viewModel, doBackToMenu)
{
    this._stateManager = stateManager;
    this._viewModel = viewModel;
    this._doBackToMenu = doBackToMenu;

    // In the code we ported from there are public getters and setters for these, but they're only called by the
    // derived class, so we're just going to let the derived class set these members directly.
    //
    this._onPageTitleCallback = null;   // callback(string)  - Required - set by subclass
    this._onBackEnabledCallback = null; // callback(boolean) - Optional - set by subclass (if it cares about back enablement)

    // This is the top level container of controls for a page.  If the page specifies a single top level
    // element, then this represents that element.  If not, then this is a container control that we 
    // created to wrap those elements (currently a vertical stackpanel).
    //
    // Derived classes have a similarly named _rootControlWrapper which represents the actual topmost
    // visual element, typically a scroll container, that is re-populated as page contents change, and
    // which has a single child, the _rootContainerControlWrapper (which will change as the active page
    // changes).
    //
    this._rootContainerControlWrapper = null;

    // For Web
    //
    this.pageTitle = null;
}

PageView.prototype.setOnPageTitleCallback = function(callback)
{
    this._onPageTitleCallback = callback;
}

PageView.prototype.setOnBackEnabledCallback = function(callback)
{
    this._onBackEnabledCallback = callback;
}

// From the original code - these abstract functions will be implemented by the derived class
//
/*
public abstract ControlWrapper CreateRootContainerControl(JObject controlSpec);
public abstract void ClearContent();
public abstract void SetContent(ControlWrapper content);
*/

PageView.prototype.hasBackCommand = function() 
{ 
    if (this._stateManager.isBackSupported())
    {
        // Page-specified back command...
        //
        return true;
    }
    else if ((this._doBackToMenu != null) && this._stateManager.isOnMainPath())
    {
        // No page-specified back command, launched from menu, and is main (top-level) page...
        //
        return true;
    }

    return false; 
}

PageView.prototype.goBack = function()
{
    if (this._stateManager.isBackSupported())
    {
        logger.debug("Back navigation");
        this._stateManager.sendBackRequestAsync();
        return true;
    }
    else if ((this._doBackToMenu != null) && this._stateManager.isOnMainPath())
    {
        logger.debug("Back navigation - returning to menu");
        if (this._rootContainerControlWrapper != null)
        {
            this._rootContainerControlWrapper.unregister();
        }
        this._doBackToMenu();
        return true;
    }
    else
    {
        logger.warn("goBack called with no back command, ignoring");
        return false; // Not handled
    }
}

PageView.prototype.processPageView = function(pageView)
{
    logger.info("processPageView:", JSON.stringify(pageView, null, 4));
    if (this._rootContainerControlWrapper != null)
    {
        this._rootContainerControlWrapper.unregister();
        this.clearContent();
        this._rootContainerControlWrapper = null;
    }

    if (this._onBackEnabledCallback != null)
    {
        this._onBackEnabledCallback(this.hasBackCommand());
    }

    this._pageTitle = pageView["title"];
    if (this._pageTitle != null)
    {
        this._onPageTitleCallback(this._pageTitle);
    }

    var elements = pageView["elements"];
    if (elements.length == 1)
    {
        // The only element is the container of all page elements, so make it the root element, and populate it...
        //
        this._rootContainerControlWrapper = this.createRootContainerControl(elements[0]);
    }
    else if (elements.length > 1)
    {
        // There is a collection of page elements, create a default container (vertical stackpanel), make it the root, and populate it...
        //
        var controlSpec = 
        {
            "control": "stackpanel",
            "orientation": "vertical",
            "height": "*",
            "width": "*",
            "contents": elements // Element is JavaScript array
        }

        this._rootContainerControlWrapper = this.createRootContainerControl(controlSpec);
    }

    this.setContent(this._rootContainerControlWrapper);
}

module.exports = PageView;
