var logger = require('log4js').getLogger("web-wrap-panel-wrapper");

var WebControlWrapper = require('./web-control-wrapper');
var Orientation = require('../core/control-wrapper').Orientation;

var binding = require('../core/binding');
var CommandInstance = require('../core/command-instance');

var WebWrapPanelWrapper = function(parent, bindingContext, controlSpec)
{
    var self = this;

    this.base = WebControlWrapper;
    this.base(parent, bindingContext, controlSpec);
    logger.info("WrapPanel control created");

    this._control = document.createElement("div");
    this._control.classList.add("synchro-wrappanel");

    // With "wrap", if the items wrap onto more than one rows/cols, then alignContent will control how those rows/cols
    // are aligned (always flex-start, so top/left).  However, if there is only one row, then it will ignore alignContent
    // and fall back to the item alignSelf. On the plus side, it works exactly like a non-wrapping flexbox when there
    // is not wrapping.  On the minue side, it's a pretty jarring difference between a single line versus multiple lines.
    // Nothing we can really do about it.
    //
    this._control.style.display = "flex"; // !!! inline-flex?
    this._control.style.flexDirection = "column"; // default, if "orientation" specified, will be set below
    this._control.style.alignItems = "flex-start";
    this._control.style.alignContent = "flex-start"; // Perpendicular to orientation (top for row, left for col)
    this._control.style.flexWrap = "wrap";

    this.processThicknessProperty(controlSpec, "padding", "padding", this._control);

    if (controlSpec["contents"] != null)
    {
        this.createControls(controlSpec["contents"], function(childControlSpec, childControlWrapper)
        {
            logger.info("Created child control");
            self._control.appendChild(childControlWrapper._control);
        });
    }

    this.processElementProperty(controlSpec, "orientation", function(value) 
    {
        var orientation = self.toOrientation(value, Orientation.Vertical);
        self._control.style.flexDirection =  orientation == Orientation.Horizontal ? "row" : "column";
        for (var i = 0; i < self._childControls.length; i++)
        {
            var child = self._childControls[i];
            child._control.style.alignSelf = ((self._control.style.flexDirection == "row") ? child._vAlign : child._hAlign);
        }
    });
}

WebWrapPanelWrapper.prototype = Object.create(WebControlWrapper.prototype);

module.exports = WebWrapPanelWrapper;
