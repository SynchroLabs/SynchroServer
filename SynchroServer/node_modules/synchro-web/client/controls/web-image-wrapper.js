var logger = require('log4js').getLogger("web-image-wrapper");

var WebControlWrapper = require('./web-control-wrapper');

var binding = require('../core/binding');
var CommandInstance = require('../core/command-instance');

var WebImageWrapper = function(parent, bindingContext, controlSpec)
{
    var self = this;

    this.base = WebControlWrapper;
    this.base(parent, bindingContext, controlSpec);
    logger.info("Image control created");

    var image =  document.createElement("img");

    this._control = image;

    var self = this;
    var value = this.processElementProperty(controlSpec, "resource", function(value) 
    { 
        image.src = self.toString(value);
    });

    // !!! image "scale" support

    var bindingSpec = binding.getCanonicalBindingSpec(controlSpec, CommandInstance.commandNames.OnTap, WebImageWrapper.commands);
    this.processCommands(bindingSpec, WebImageWrapper.commands);

    if (this.getCommand(CommandInstance.commandNames.OnTap) != null)
    {
        // Attach a handler
        logger.info("Adding image onTap handler");
        image.addEventListener("click", this.OnTap.bind(this), false);
    }
}

WebImageWrapper.prototype = Object.create(WebControlWrapper.prototype);

WebImageWrapper.commands = [ CommandInstance.commandNames.OnTap ];

WebImageWrapper.prototype.OnTap = function()
{
    logger.info("Image tapped");
    var command = this.getCommand(CommandInstance.commandNames.OnTap);
    if (command != null)
    {
        logger.info("Image tapped with command: %s", command.getCommand());
        this._stateManager.sendCommandRequestAsync(command.getCommand(), command.getResolvedParameters(this._bindingContext));
    }
}

module.exports = WebImageWrapper;