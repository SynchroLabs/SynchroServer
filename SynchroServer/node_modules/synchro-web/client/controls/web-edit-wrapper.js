var logger = require('log4js').getLogger("web-edit-wrapper");

var WebControlWrapper = require('./web-control-wrapper');

var binding = require('../core/binding');
var CommandInstance = require('../core/command-instance');
var JToken = require('../core/json');

var WebEditWrapper = function(parent, bindingContext, controlSpec)
{
    var self = this;

    this.base = WebControlWrapper;
    this.base(parent, bindingContext, controlSpec);
    logger.info("Edit control created");

    this._updateOnChange = false;

    var edit = document.createElement("input");
    edit.classList.add("synchro-edit");
    if (controlSpec["control"] === "password")
    {
        edit.type = "password";
    }

    this._control = edit;

    var bindingSpec = binding.getCanonicalBindingSpec(controlSpec, "value");
    if (!this.processElementBoundValue("value", bindingSpec["value"], function() { return new JToken(edit.value) }, function(text) { edit.value = self.toString(text) }))
    {
        this.processElementProperty(controlSpec, "value", function(text) { edit.value = self.toString(text) });
    }

    if (bindingSpec["sync"] === "change")
    {
        this._updateOnChange = true;
    }

    this.processElementProperty(controlSpec, "placeholder", function(text) { edit.placeholder = self.toString(text) });

    edit.addEventListener("input", this.TextChanged.bind(this), false);
}
WebEditWrapper.prototype = Object.create(WebControlWrapper.prototype);

WebEditWrapper.prototype.TextChanged = function()
{
    logger.info("Edit text changed");
    this.updateValueBindingForAttribute("value");

    if (this._updateOnChange)
    {
        this._stateManager.sendUpdateRequestAsync();
    }
}

module.exports = WebEditWrapper;