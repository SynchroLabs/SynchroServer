var logger = require('log4js').getLogger("web-toggle-wrapper");

var WebControlWrapper = require('./web-control-wrapper');

var binding = require('../core/binding');
var CommandInstance = require('../core/command-instance');
var JToken = require('../core/json');

var lodash = require('lodash');

var WebToggleWrapper = function(parent, bindingContext, controlSpec)
{
    var self = this;

    this.base = WebControlWrapper;
    this.base(parent, bindingContext, controlSpec);
    logger.debug("Toggle control created");

    // This layout creates a clickable label (without needing a control ID on the checkbox):
    //
    //     <label><input type="checkbox"> This is the first checkbox</label><br>
    //
    var label = document.createElement("label");
    label.classList.add("synchro-toggle");

    var toggle = document.createElement("input");
    toggle.type = "checkbox";

    label.appendChild(toggle);

    this._control = label;

    var bindingSpec = binding.getCanonicalBindingSpec(controlSpec, "value", WebToggleWrapper.commands);

    this.processCommands(bindingSpec, WebToggleWrapper.commands);

    if (!this.processElementBoundValue("value", bindingSpec["value"], function() { return new JToken(toggle.checked) }, function(value) { toggle.checked = self.toBoolean(value) }))
    {
        this.processElementProperty(controlSpec, "value", function(value) { toggle.checked = self.toBoolean(value) });
    }

    this.processElementProperty(controlSpec, "caption", function(value) 
    {
        if (label.childNodes.length < 2)
        {
            label.appendChild(document.createTextNode(" " + self.toString(value)));
        } 
        else
        {
            label.childNodes[1].innerHTML = " " + lodash.escape(self.toString(value)) 
        }
    });

    toggle.addEventListener("change", this.OnToggle.bind(this), false);
}
WebToggleWrapper.prototype = Object.create(WebControlWrapper.prototype);

WebToggleWrapper.commands = [ CommandInstance.commandNames.OnToggle ];

WebToggleWrapper.prototype.OnToggle = function()
{
    logger.info("Toggle state changed");

    this.updateValueBindingForAttribute("value");

    var command = this.getCommand(CommandInstance.commandNames.OnToggle);
    if (command != null)
    {
        logger.info("Toggle state with command: %s", command.getCommand());
        this._stateManager.sendCommandRequestAsync(command.getCommand(), command.getResolvedParameters(this._bindingContext));
    }
}

module.exports = WebToggleWrapper;
