var logger = require('log4js').getLogger("web-control-wrapper");

var ControlWrapper = require('../core/control-wrapper');
var FontFaceType = ControlWrapper.FontFaceType;

var WebFontSetter = function(element)
{
    this._element = element;
}

WebFontSetter.prototype.setFaceType = function(faceType)
{
    // !!! If we just set a class on the element, then we could apply the font-family via CSS (instead of building the
    //     font families for each face type into this code as below).
    //
    faceType = faceType || FontFaceType.FONT_DEFAULT;
    var fontFamily = null;
    switch (faceType)
    {
        case FontFaceType.FONT_DEFAULT:
        case FontFaceType.FONT_SANSERIF:
            fontFamily = 'Arial, Helvetica, sans-serif';
            break;
        case FontFaceType.FONT_SERIF:
            fontFamily = '"Times New Roman", Times, serif';
            break;
        case FontFaceType.FONT_MONOSPACE:
            fontFamily = '"Courier New", Courier, monospace';
            break;
    }

    if (fontFamily)
    {
        this._element.style.fontFamily = fontFamily;
    }

}

WebFontSetter.prototype.setSize = function(size)
{
    this._element.style.fontSize = size + "pt";
}

WebFontSetter.prototype.setBold = function(bold)
{
    this._element.style.fontWeight = bold ? "bold" : "normal";
}

WebFontSetter.prototype.setItalic = function(italic)
{
    this._element.style.fontStyle = italic ? "italic" : "normal";
}


var WebControlWrapper = function(pageView, stateManager, viewModel, bindingContext, control)
{
    var controlSpec = null;

    // Since we can't have two constructors with different param lists, we just figure out whether the caller called
    // with the constructor signature above (5 params), or the one below (3 params).
    //
    // WebControlWrapper = function(parent, bindingContext, controlSpec)
    //
    if (arguments.length == 3)
    {
        // Shift params
        var parent = pageView;
        bindingContext = stateManager;
        controlSpec = viewModel;

        // Store parent
        this._parent = parent;

        // Populate other parems from parent
        pageView = parent._pageView;
        stateManager = parent._stateManager;
        viewModel = parent._viewModel;
        control = null;
    }

    this.base = ControlWrapper;
    this.base(stateManager, viewModel, bindingContext);

    this._pageView = pageView;
    this._control = control;

    this._hAlign = "flex-start"; // Left
    this._vAlign = "flex-start"; // Top

    // This will have only been set on the 3-param constructor
    //
    if (controlSpec)
    {
        this._styles = ControlWrapper.processStyles(controlSpec);
    }

    this._heightSpecified = false;
    this._widthSpecified = false;
}
WebControlWrapper.prototype = Object.create(ControlWrapper.prototype);

WebControlWrapper.prototype.getPageView = function()
{
    return this._pageView;
}

WebControlWrapper.prototype.getControl = function()
{
    return this._control;
}

WebControlWrapper.prototype.toOrientation = function(value, defaultOrientation)
{
    var orientation = defaultOrientation || ControlWrapper.Orientation.Horizontal;
    var orientationValue = this.toString(value);
    if (orientationValue === "Horizontal")
    {
        orientation = ControlWrapper.Orientation.Horizontal;
    }
    else if (orientationValue === "Vertical")
    {
        orientation = ControlWrapper.Orientation.Vertical;
    }
    return orientation;
}

WebControlWrapper.prototype.toHorizontalAlignment = function(value, defaultAlignment)
{
    var alignment = defaultAlignment || "flex-start";
    var alignmentValue = this.toString(value);
    if (alignmentValue == "Left")
    {
        alignment = "flex-start";
    }
    else if (alignmentValue == "Right")
    {
        alignment = "flex-end";
    }
    else if (alignmentValue == "Center")
    {
        alignment = "center";
    }
    else if (alignmentValue == "Stretch")
    {
        alignment = "stretch";
    }
    return alignment;
}

WebControlWrapper.prototype.toVerticalAlignment = function(value, defaultAlignment)
{
    var alignment = defaultAlignment || "flex-start";
    var alignmentValue = this.toString(value);
    if (alignmentValue == "Top")
    {
        alignment = "flex-start";
    }
    else if (alignmentValue == "Bottom")
    {
        alignment = "flex-end";
    }
    else if (alignmentValue == "Center")
    {
        alignment = "center";
    }
    else if (alignmentValue == "Stretch")
    {
        alignment = "stretch";
    }
    return alignment;
}

WebControlWrapper.prototype.toColor = function(value)
{
    return ControlWrapper.getColorString(this.toString(value));
}

WebControlWrapper.prototype.processThicknessProperty = function(controlSpec, attributeName, property, control, setValue)
{
    var self = this;

    setValue = setValue || function(property, value) { control.style[property] = self.toDouble(value) + "px" };

    this.processElementProperty(controlSpec, attributeName + ".left", attributeName, function(value)
    {
        setValue(property + "Left", value);
    });
    this.processElementProperty(controlSpec, attributeName + ".top", attributeName, function(value)
    {
        setValue(property + "Top", value);
    });
    this.processElementProperty(controlSpec, attributeName + ".right", attributeName, function(value)
    {
        setValue(property + "Right", value);
    });
    this.processElementProperty(controlSpec, attributeName + ".bottom", attributeName, function(value)
    {
        setValue(property + "Bottom", value);
    });
}

/* !!!
// static Thickness defaultThickness = new Thickness(0, 0, 10, 10);

protected void applyFrameworkElementDefaults(FrameworkElement element, bool applyMargins = true)
{
    if (applyMargins)
    {
        element.Margin = new Thickness(0, 0, ToDeviceUnits(10), ToDeviceUnits(10));
    }
    element.HorizontalAlignment = HorizontalAlignment.Left;
    element.VerticalAlignment = VerticalAlignment.Top;
}
*/

WebControlWrapper.prototype.setHeight = function(control, value)
{
    var heightString = this.toString(value);
    if (heightString.indexOf("*") >= 0)
    {
        logger.debug("Got star height string:", value);
        // !!! control.VerticalAlignment = VerticalAlignment.Stretch;
    }
    else
    {
        control.style.height = heightString + "px"; // ToDeviceUnits(value);
    }
    this._heightSpecified = true;
}

WebControlWrapper.prototype.setWidth = function(control, value)
{
    var widthString = this.toString(value);
    if (widthString.indexOf("*") >= 0)
    {
        logger.debug("Got star width string:", value);
        // !!! control.HorizontalAlignment = HorizontalAlignment.Stretch;
    }
    else
    {
        control.style.width = widthString + "px"; // ToDeviceUnits(value);
    }
    this._widthSpecified = true;
}

WebControlWrapper.prototype.processCommonFrameworkElementProperies = function(controlSpec)
{
    var self = this;
    logger.debug("Processing framework element properties");

    // For web - we will propogate any id attribute in the controlSpec to the element id attribute
    this.processElementProperty(controlSpec, "id", function(value) { self._control.id = self.toString(value) });

    this.processElementProperty(controlSpec, "horizontalAlignment", function(value) 
    {
        self._hAlign = self.toHorizontalAlignment(value);
        if (self._parent && (self._parent._control.style.flexDirection == "column"))
        {
            self._control.style.alignSelf = self._hAlign;
        }
    });
    this.processElementProperty(controlSpec, "verticalAlignment", function(value) 
    {
        self._vAlign = self.toVerticalAlignment(value);
        if (self._parent && (self._parent._control.style.flexDirection == "row"))
        {
            self._control.style.alignSelf = self._vAlign;
        }
    });

    this.processElementProperty(controlSpec, "height", function(value) { self.setHeight(self._control, value) });
    this.processElementProperty(controlSpec, "width", function(value) { self.setWidth(self._control, value) });

    /*
    processElementProperty(controlSpec, "minheight", value => this.Control.MinHeight = ToDeviceUnits(value));
    processElementProperty(controlSpec, "minwidth", value => this.Control.MinWidth = ToDeviceUnits(value));
    processElementProperty(controlSpec, "maxheight", value => this.Control.MaxHeight = ToDeviceUnits(value));
    processElementProperty(controlSpec, "maxwidth", value => this.Control.MaxWidth = ToDeviceUnits(value));
    */

    this.processElementProperty(controlSpec, "opacity", function(value) { self._control.style.opacity = self.toDouble(value) });

    this.processElementProperty(controlSpec, "visibility", function(value)
    {
        self._control.style.display = self.toBoolean(value) ? 'block' : 'none';
    });

    this.processThicknessProperty(controlSpec, "margin", "margin", this._control);
    this.processFontAttribute(controlSpec, new WebFontSetter(this._control));

    this.processElementProperty(controlSpec, "enabled", function(value) 
    {
        // Not all html elements have a "disabled" property
        //
        if (self._control && ("disabled" in self._control))
        {
            self._control.disabled = !self.toBoolean(value);
        }
    });

    this.processElementProperty(controlSpec, "foreground", function(value) 
    { 
        if (self._control && ("color" in self._control.style))
        {
            self._control.style.color = self.toColor(value);
        } 
    });

    this.processElementProperty(controlSpec, "background", function(value) 
    { 
        if (self._control && ("background" in self._control.style))
        {
            self._control.style.background = self.toColor(value);
        }
    });
}

WebControlWrapper.prototype.getChildControlWrapper = function(control)
{
    // Find the child control wrapper whose control matches the supplied value...
    for (var i = 0; i < this._childControls.length; i++)
    {
        if (this._childControls[i]._control === control)
        {
            return this._childControls[i];
        }
    }

    return null;
}

WebControlWrapper.createControl = function(parent, bindingContext, controlSpec)
{
    logger.info("Creating control:", controlSpec["control"]);
    var controlWrapper = null;

    switch (controlSpec["control"])
    {
        case "border":
            var WebBorderWrapper = require('./web-border-wrapper');
            controlWrapper = new WebBorderWrapper(parent, bindingContext, controlSpec);
            break;
        case "button":
            var WebButtonWrapper = require('./web-button-wrapper');
            controlWrapper = new WebButtonWrapper(parent, bindingContext, controlSpec);
            break;
        case "canvas":
            var WebCanvasWrapper = require('./web-canvas-wrapper');
            controlWrapper = new WebCanvasWrapper(parent, bindingContext, controlSpec);
            break;
        case "password":
        case "edit":
            var WebEditWrapper = require('./web-edit-wrapper');
            controlWrapper = new WebEditWrapper(parent, bindingContext, controlSpec);
            break;
        case "gridview":
            var WebGridViewWrapper = require('./web-gridview-wrapper');
            controlWrapper = new WedGridViewWrapper(parent, bindingContext, controlSpec);
            break;
        case "image":
            var WebImageWrapper = require('./web-image-wrapper');
            controlWrapper = new WebImageWrapper(parent, bindingContext, controlSpec);
            break;
        case "picker":
        case "listbox":
            var WebListBoxWrapper = require('./web-listbox-wrapper');
            controlWrapper = new WebListBoxWrapper(parent, bindingContext, controlSpec);
            break;
        case "listview":
            var WebListViewWrapper = require('./web-listview-wrapper');
            controlWrapper = new WebListViewWrapper(parent, bindingContext, controlSpec);
            break;
        case "location":
            var WebLocationWrapper = require('./web-location-wrapper');
            controlWrapper = new WebLocationWrapper(parent, bindingContext, controlSpec);
            break;
        case "progressbar":
            var WebProgressBarWrapper = require('./web-progress-bar-wrapper');
            controlWrapper = new WebProgressBarWrapper(parent, bindingContext, controlSpec);
            break;
        case "progressring":
            var WebProgressRingWrapper = require('./web-progress-ring-wrapper');
            controlWrapper = new WebProgressRingWrapper(parent, bindingContext, controlSpec);
            break;
        case "rectangle":
            var WebRectangleWrapper = require('./web-rectangle-wrapper');
            controlWrapper = new WebRectangleWrapper(parent, bindingContext, controlSpec);
            break;
        case "scrollview":
            var WebScrollViewWrapper = require('./web-scrollview-wrapper');
            controlWrapper = new WebScrollViewWrapper(parent, bindingContext, controlSpec);
            break;
        case "slider":
            var WebSliderWrapper = require('./web-slider-wrapper');
            controlWrapper = new WebSliderWrapper(parent, bindingContext, controlSpec);
            break;
        case "stackpanel":
            var WebStackPanelWrapper = require('./web-stack-panel-wrapper');
            controlWrapper = new WebStackPanelWrapper(parent, bindingContext, controlSpec);
            break;
        case "text":
            var WebTextWrapper = require('./web-text-wrapper');
            controlWrapper = new WebTextWrapper(parent, bindingContext, controlSpec);
            break;
        case "toggle":
            var WebToggleWrapper = require('./web-toggle-wrapper');
            controlWrapper = new WebToggleWrapper(parent, bindingContext, controlSpec);
            break;
        case "webview":
            var WebWebViewWrapper = require('./web-webview-wrapper');
            controlWrapper = new WebWebViewWrapper(parent, bindingContext, controlSpec);
            break;
        case "wrappanel":
            var WebWrapPanelWrapper = require('./web-wrap-panel-wrapper');
            controlWrapper = new WebWrapPanelWrapper(parent, bindingContext, controlSpec);
            break;
    }

    if (controlWrapper != null)
    {
        controlWrapper.processCommonFrameworkElementProperies(controlSpec);
        parent._childControls.push(controlWrapper);
    }

    return controlWrapper;
}

WebControlWrapper.prototype.createControls = function(controlList, onCreateControl)
{
    var self = this;

    ControlWrapper.prototype.createControls.call(this, this._bindingContext, controlList, function (controlContext, controlSpec) 
    {
        var controlWrapper = WebControlWrapper.createControl(self, controlContext, controlSpec);
        if (controlWrapper == null)
        {
            logger.warn("WARNING: Unable to create control of type: %s", controlSpec["control"]);
        }
        else if (onCreateControl)
        {
            if (controlWrapper.isVisualElement())
            {
                onCreateControl(controlSpec, controlWrapper);
            }
        }
    });
}

module.exports = WebControlWrapper;
