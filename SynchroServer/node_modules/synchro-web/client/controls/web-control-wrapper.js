var logger = require('log4js').getLogger("web-control-wrapper");

var ControlWrapper = require('../core/control-wrapper');

var WebControlWrapper = function(pageView, stateManager, viewModel, bindingContext, control)
{
    var controlSpec = null;

    // Since we can't have two constructors with different param lists, we just figure out whether the caller called
    // with the constructor signature above (5 params), or the one below (3 params).
    //
    // WebControlWrapper = function(parent, bindingContext, controlSpec)
    //
    if (arguments.length == 3)
    {
        var parent = pageView;
        bindingContext = stateManager;
        controlSpec = viewModel;

        pageView = parent._pageView;
        stateManager = parent._stateManager;
        viewModel = parent._viewModel;
        control = null;
    }

    this.base = ControlWrapper;
    this.base(stateManager, viewModel, bindingContext);

    this._pageView = pageView;
    this._control = control;

    // This will have only been set on the 3-param constructor
    //
    if (controlSpec)
    {
        this._styles = ControlWrapper.processStyles(controlSpec);
    }

    this._heightSpecified = false;
    this._widthSpecified = false;
}
WebControlWrapper.prototype = Object.create(ControlWrapper.prototype);

WebControlWrapper.prototype.getPageView = function()
{
    return this._pageView;
}

WebControlWrapper.prototype.getControl = function()
{
    return this._control;
}

/*
public Orientation ToOrientation(JToken value, Orientation defaultOrientation = Orientation.Horizontal)
{
    Orientation orientation = defaultOrientation;
    string orientationValue = ToString(value);
    if (orientationValue == "Horizontal")
    {
        orientation = Orientation.Horizontal;
    }
    else if (orientationValue == "Vertical")
    {
        orientation = Orientation.Vertical;
    }
    return orientation;
}

public HorizontalAlignment ToHorizontalAlignment(JToken value, HorizontalAlignment defaultAlignment = HorizontalAlignment.Left)
{
    HorizontalAlignment alignment = defaultAlignment;
    string alignmentValue = ToString(value);
    if (alignmentValue == "Left")
    {
        alignment = HorizontalAlignment.Left;
    }
    else if (alignmentValue == "Right")
    {
        alignment = HorizontalAlignment.Right;
    }
    else if (alignmentValue == "Center")
    {
        alignment = HorizontalAlignment.Center;
    }
    else if (alignmentValue == "Stretch")
    {
        alignment = HorizontalAlignment.Stretch;
    }
    return alignment;
}

public VerticalAlignment ToVerticalAlignment(JToken value, VerticalAlignment defaultAlignment = VerticalAlignment.Top)
{
    VerticalAlignment alignment = defaultAlignment;
    string alignmentValue = ToString(value);
    if (alignmentValue == "Top")
    {
        alignment = VerticalAlignment.Top;
    }
    else if (alignmentValue == "Bottom")
    {
        alignment = VerticalAlignment.Bottom;
    }
    else if (alignmentValue == "Center")
    {
        alignment = VerticalAlignment.Center;
    }
    else if (alignmentValue == "Stretch")
    {
        alignment = VerticalAlignment.Stretch;
    }
    return alignment;
}

public SolidColorBrush ToBrush(JToken value)
{
    ColorARGB color = ControlWrapper.getColor(ToString(value));
    if (color != null)
    {
        return new SolidColorBrush(ColorHelper.FromArgb(color.a, color.r, color.g, color.b));
    }
    else
    {
        return null;
    }
}

public FontWeight ToFontWeight(JToken value)
{
    String weight = ToString(value);

    var property = typeof(FontWeights).GetRuntimeProperty(weight);
    if (property != null)
    {
        return (FontWeight)property.GetValue(null);
    }
    return FontWeights.Normal;
}

public delegate void SetViewThickness(Thickness thickness);
public delegate Thickness GetViewThickness();

public void processThicknessProperty(JObject controlSpec, String attributeName, GetViewThickness getThickness, SetViewThickness setThickness)
{
    processElementProperty(controlSpec, attributeName + ".left", attributeName, value =>
    {
        Thickness thickness = (Thickness)getThickness();
        thickness.Left = this.ToDeviceUnits(ToDouble(value));
        setThickness(thickness);
    });
    processElementProperty(controlSpec, attributeName + ".top", attributeName, value =>
    {
        Thickness thickness = (Thickness)getThickness();
        thickness.Top = this.ToDeviceUnits(ToDouble(value));
        setThickness(thickness);
    });
    processElementProperty(controlSpec, attributeName + ".right", attributeName, value =>
    {
        Thickness thickness = (Thickness)getThickness();
        thickness.Right = this.ToDeviceUnits(ToDouble(value));
        setThickness(thickness);
    });
    processElementProperty(controlSpec, attributeName + ".bottom", attributeName, value =>
    {
        Thickness thickness = (Thickness)getThickness();
        thickness.Bottom = this.ToDeviceUnits(ToDouble(value));
        setThickness(thickness);
    });
}

// static Thickness defaultThickness = new Thickness(0, 0, 10, 10);

protected void applyFrameworkElementDefaults(FrameworkElement element, bool applyMargins = true)
{
    if (applyMargins)
    {
        element.Margin = new Thickness(0, 0, ToDeviceUnits(10), ToDeviceUnits(10));
    }
    element.HorizontalAlignment = HorizontalAlignment.Left;
    element.VerticalAlignment = VerticalAlignment.Top;
}

protected void setHeight(FrameworkElement control, JToken value)
{
    string heightString = ToString(value);
    if (heightString.IndexOf("*") >= 0)
    {
        logger.Debug("Got star height string: {0}", value);
        control.VerticalAlignment = VerticalAlignment.Stretch;
    }
    else
    {
        control.Height = ToDeviceUnits(value);
    }
    _heightSpecified = true;
}

protected void setWidth(FrameworkElement control, JToken value)
{
    string widthString = ToString(value);
    if (widthString.IndexOf("*") >= 0)
    {
        logger.Debug("Got star width string: {0}", value);
        control.HorizontalAlignment = HorizontalAlignment.Stretch;
    }
    else
    {
        control.Width = ToDeviceUnits(value);
    }
    _widthSpecified = true;
}
*/

WebControlWrapper.prototype.processCommonFrameworkElementProperies = function(controlSpec)
{
    var self = this;
    logger.debug("Processing framework element properties");
    /*
    // !!! For web - seems like we want ID and class to be settable via controlSpec attributes
    processElementProperty(controlSpec, "name", value => this.Control.Name = ToString(value)); // !!! What is this?

    processElementProperty(controlSpec, "horizontalAlignment", value => this.Control.HorizontalAlignment = ToHorizontalAlignment(value));
    processElementProperty(controlSpec, "verticalAlignment", value => this.Control.VerticalAlignment = ToVerticalAlignment(value));

    processElementProperty(controlSpec, "height", value => setHeight(this.Control, value));
    processElementProperty(controlSpec, "width", value => setWidth(this.Control, value));
    processElementProperty(controlSpec, "minheight", value => this.Control.MinHeight = ToDeviceUnits(value));
    processElementProperty(controlSpec, "minwidth", value => this.Control.MinWidth = ToDeviceUnits(value));
    processElementProperty(controlSpec, "maxheight", value => this.Control.MaxHeight = ToDeviceUnits(value));
    processElementProperty(controlSpec, "maxwidth", value => this.Control.MaxWidth = ToDeviceUnits(value));

    // CSS opacity: https://developer.mozilla.org/en-US/docs/Web/CSS/opacity
    processElementProperty(controlSpec, "opacity", value => this.Control.Opacity = ToDouble(value));
    */

    this.processElementProperty(controlSpec, "visibility", function(value)
    {
        self._control.style.display = self.toBoolean(value) ? 'block' : 'none';
    });

    /*
    processThicknessProperty(controlSpec, "margin", () => this.Control.Margin, value => this.Control.Margin = (Thickness)value);
    processFontAttribute(controlSpec, new WinFontSetter(this.Control));
    */

    this.processElementProperty(controlSpec, "enabled", function(value) 
    {
        // Not all html elements have a "disabled" property
        //
        if (self._control && ("disabled" in self._control))
        {
            self._control.disabled = !self.toBoolean(value);
        }
    });

    /*
    processElementPropertyIfPresent(controlSpec, "background", "Background", value => ToBrush(value));
    processElementPropertyIfPresent(controlSpec, "foreground", "Foreground", value => ToBrush(value));
    */
}

WebControlWrapper.prototype.getChildControlWrapper = function(control)
{
    // Find the child control wrapper whose control matches the supplied value...
    for (var i = 0; i < this._childControls.length; i++)
    {
        if (this._childControls[i]._control === control)
        {
            return this._childControls[i];
        }
    }

    return null;
}

WebControlWrapper.createControl = function(parent, bindingContext, controlSpec)
{
    logger.info("Creating control:", controlSpec["control"]);
    var controlWrapper = null;

    switch (controlSpec["control"])
    {
        case "border":
            var WebBorderWrapper = require('./web-border-wrapper');
            controlWrapper = new WebBorderWrapper(parent, bindingContext, controlSpec);
            break;
        case "button":
            var WebButtonWrapper = require('./web-button-wrapper');
            controlWrapper = new WebButtonWrapper(parent, bindingContext, controlSpec);
            break;
        /*
        case "canvas":
            controlWrapper = new WinCanvasWrapper(parent, bindingContext, controlSpec);
            break;
        case "commandBar.button":
            controlWrapper = new WinCommandWrapper(parent, bindingContext, controlSpec);
            break;
        case "commandBar.toggle":
            controlWrapper = new WinToggleWrapper(parent, bindingContext, controlSpec);
            break;
        */
        case "password":
        case "edit":
            var WebEditWrapper = require('./web-edit-wrapper');
            controlWrapper = new WebEditWrapper(parent, bindingContext, controlSpec);
            break;
        /*
        case "gridview":
            controlWrapper = new WinGridViewWrapper(parent, bindingContext, controlSpec);
            break;
        */
        case "image":
            var WebImageWrapper = require('./web-image-wrapper');
            controlWrapper = new WebImageWrapper(parent, bindingContext, controlSpec);
            break;
        case "picker":
        case "listbox":
            var WebListBoxWrapper = require('./web-listbox-wrapper');
            controlWrapper = new WebListBoxWrapper(parent, bindingContext, controlSpec);
            break;
        /*
        case "listview":
            controlWrapper = new WinListViewWrapper(parent, bindingContext, controlSpec);
            break;
        */
        case "location":
            var WebLocationWrapper = require('./web-location-wrapper');
            controlWrapper = new WebLocationWrapper(parent, bindingContext, controlSpec);
            break;
        /*
        case "progressbar":
            controlWrapper = new WinSliderWrapper(parent, bindingContext, controlSpec);
            break;
        case "progressring":
            controlWrapper = new WinProgressRingWrapper(parent, bindingContext, controlSpec);
            break;
        case "rectangle":
            controlWrapper = new WinRectangleWrapper(parent, bindingContext, controlSpec);
            break;
        case "scrollview":
            controlWrapper = new WinScrollWrapper(parent, bindingContext, controlSpec);
            break;
        */
        case "slider":
            var WebSliderWrapper = require('./web-slider-wrapper');
            controlWrapper = new WebSliderWrapper(parent, bindingContext, controlSpec);
            break;
        case "stackpanel":
            var WebStackPanelWrapper = require('./web-stack-panel-wrapper');
            controlWrapper = new WebStackPanelWrapper(parent, bindingContext, controlSpec);
            break;
        case "text":
            var WebTextWrapper = require('./web-text-wrapper');
            controlWrapper = new WebTextWrapper(parent, bindingContext, controlSpec);
            break;
        case "toggle":
            var WebToggleWrapper = require('./web-toggle-wrapper');
            controlWrapper = new WebToggleWrapper(parent, bindingContext, controlSpec);
            break;
        /*
        case "webview":
            controlWrapper = new WinWebViewWrapper(parent, bindingContext, controlSpec);
            break;
        case "wrappanel":
            controlWrapper = new WinWrapPanelWrapper(parent, bindingContext, controlSpec);
            break;
        */
    }

    if (controlWrapper != null)
    {
        controlWrapper.processCommonFrameworkElementProperies(controlSpec);
        parent._childControls.push(controlWrapper);
    }

    return controlWrapper;
}

WebControlWrapper.prototype.createControls = function(controlList, onCreateControl)
{
    var self = this;

    ControlWrapper.prototype.createControls.call(this, this._bindingContext, controlList, function (controlContext, controlSpec) 
    {
        var controlWrapper = WebControlWrapper.createControl(self, controlContext, controlSpec);
        if (controlWrapper == null)
        {
            logger.warn("WARNING: Unable to create control of type: %s", controlSpec["control"]);
        }
        else if (onCreateControl)
        {
            if (controlWrapper.isVisualElement())
            {
                onCreateControl(controlSpec, controlWrapper);
            }
        }
    });
}

module.exports = WebControlWrapper;
