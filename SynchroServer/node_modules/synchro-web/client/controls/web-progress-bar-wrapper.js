var logger = require('log4js').getLogger("web-progress-bar-wrapper");

var WebControlWrapper = require('./web-control-wrapper');

var binding = require('../core/binding');
var CommandInstance = require('../core/command-instance');

var WebProgressBarWrapper = function(parent, bindingContext, controlSpec)
{
    var self = this;

    this.base = WebControlWrapper;
    this.base(parent, bindingContext, controlSpec);
    logger.info("ProgressBar control created");

    var progressBar = document.createElement("progress");
    progressBar.classList.add("synchro-progressbar");

    this._control = progressBar;

    this._min = 0;
    this._max = 1;
    this._value = 0;

    var bindingSpec = binding.getCanonicalBindingSpec(controlSpec, "value");

    if (!this.processElementBoundValue("value", bindingSpec["value"], function() { return new JToken(self._value) }, function(value) { self._value = self.toDouble(value); self.update(); }))
    {
        this.processElementProperty(controlSpec, "value", function(value) { self._value = self.toDouble(value); self.update() });
    }

    this.processElementProperty(controlSpec, "minimum", function(value) { self._min = self.toDouble(value); self.update(); });
    this.processElementProperty(controlSpec, "maximum", function(value) { self._max = self.toDouble(value); self.update(); });
}
WebProgressBarWrapper.prototype = Object.create(WebControlWrapper.prototype);

WebProgressBarWrapper.prototype.update = function()
{
    // <progress> doesn't support min, so we adjust for it (setting "max" to range, and range-adjusted value)
    //
    this._control.value = this._value - this._min;
    this._control.max = this._max - this._min;
}


module.exports = WebProgressBarWrapper;
