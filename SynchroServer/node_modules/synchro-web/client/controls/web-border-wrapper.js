var logger = require('log4js').getLogger("web-border-wrapper");

var WebControlWrapper = require('./web-control-wrapper');

var binding = require('../core/binding');
var CommandInstance = require('../core/command-instance');

var WebBorderWrapper = function(parent, bindingContext, controlSpec)
{
    this.base = WebControlWrapper;
    this.base(parent, bindingContext, controlSpec);
    logger.info("Border control created");

    this._control = document.createElement("div");
    this._control.classList.add("synchro-border");

    var self = this;

    this._control.style.display = "inline-block";
    this.processElementProperty(controlSpec, "border", function(value) { self._control.style.borderColor = self.toColor(value) });
    this.processElementProperty(controlSpec, "borderThickness", function(value) 
    { 
        self._control.style.borderStyle = "solid";
        self._control.style.borderWidth = self.toDouble(value) + "px"; // !!! device units
    });
    this.processElementProperty(controlSpec, "cornerRadius", function(value) { self._control.style.borderRadius = self.toDouble(value) + "px" }); // !!! device units
    this.processElementProperty(controlSpec, "padding", function(value) { self._control.style.padding = self.toDouble(value) + "px" }); // !!! device units

    // !!! padding

    var bindingSpec = binding.getCanonicalBindingSpec(controlSpec, CommandInstance.commandNames.OnTap, WebBorderWrapper.commands);
    this.processCommands(bindingSpec, WebBorderWrapper.commands);

    if (controlSpec["contents"] != null)
    {
        this.createControls(controlSpec["contents"], function(childControlSpec, childControlWrapper)
        {
            logger.info("Created child control");
            self._control.appendChild(childControlWrapper._control);
        });
    }

    if (this.getCommand(CommandInstance.commandNames.OnTap) != null)
    {
        // Attach a handler
        logger.info("Adding border onTap handler");
        this._control.addEventListener("click", this.OnTap.bind(this), false);
    }
}

WebBorderWrapper.prototype = Object.create(WebControlWrapper.prototype);

WebBorderWrapper.commands = [ CommandInstance.commandNames.OnTap ];

WebBorderWrapper.prototype.OnTap = function()
{
    logger.info("Border tapped");
    var command = this.getCommand(CommandInstance.commandNames.OnTap);
    if (command != null)
    {
        logger.info("Border tapped with command: %s", command.getCommand());
        this._stateManager.sendCommandRequestAsync(command.getCommand(), command.getResolvedParameters(this._bindingContext));
    }
}

module.exports = WebBorderWrapper;
