var logger = require('log4js').getLogger("web-stack-panel-wrapper");

var WebControlWrapper = require('./web-control-wrapper');
var Orientation = require('../core/control-wrapper').Orientation;

var WebStackPanelWrapper = function(parent, bindingContext, controlSpec)
{
    var self = this;

    this.base = WebControlWrapper;
    this.base(parent, bindingContext, controlSpec);
    logger.debug("StackPanel control created");

    this._control = document.createElement("div");
    this._control.classList.add("synchro-stackpanel");

    this._control.style.display = "inline-flex";
    this._control.style.flexDirection = "column"; // default, if "orientation" specified, will be set below
    this._control.style.alignItems = "flex-start";
    this._control.style.flexWrap = "nowrap"; // "wrap" for WrapPanel

    this.processThicknessProperty(controlSpec, "padding", "padding", this._control);

    // We need to set the child item alignSelf and/or flex attributes if there was star sizing on the item, and we need to clear
    // and height/width setting that conflicts with those attribtues (when a child is not contained in a flexbox, a star size will
    // translate to a height/width of "100%").
    //
    function setChildDimsBasedOnOrientation(child)
    {
        if (child._control) // Can be null for non-visual elements, like Location
        {
            child._control.style.alignSelf = ((self._control.style.flexDirection == "row") ? child._vAlign : child._hAlign);

            if (self._control.style.flexDirection == "row")
            {
                // Perpendicular to layout direction

                if (child._starHeight)
                {
                    child._control.style.height = null;
                    child._control.style.alignSelf = "stretch"; 
                }

                // In layout direction

                if (child._starWidth)
                {
                    child._control.style.width = null;
                    child._control.style.flex = child._starWidth;
                }
                else
                {
                    child._control.style.flex = "0 0 auto";
                }
            }
            else // col
            {
                // Perpendicular to layout direction

                if (child._starWidth)
                {
                    child._control.style.width = null;
                    child._control.style.alignSelf = "stretch"; 
                }

                // In layout direction

                if (child._starHeight)
                {
                    child._control.style.height = null;
                    child._control.style.flex = child._starHeight; 
                }
                else
                {
                    child._control.style.flex = "0 0 auto";
                }
            }
        }
    }

    if (controlSpec["contents"] != null)
    {
        this.createControls(controlSpec["contents"], function(childControlSpec, childControlWrapper)
        {
            setChildDimsBasedOnOrientation(childControlWrapper);
            self._control.appendChild(childControlWrapper._control);
        });
    }

    this.processElementProperty(controlSpec, "orientation", function(value) 
    {
        var orientation = self.toOrientation(value, Orientation.Vertical);
        self._control.style.flexDirection =  (orientation == Orientation.Horizontal) ? "row" : "column";
        for (var i = 0; i < self._childControls.length; i++)
        {
            setChildDimsBasedOnOrientation(self._childControls[i]);
        }
    });
}

WebStackPanelWrapper.prototype = Object.create(WebControlWrapper.prototype);

module.exports = WebStackPanelWrapper;
