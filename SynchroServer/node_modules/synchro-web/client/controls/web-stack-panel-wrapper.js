var logger = require('log4js').getLogger("web-stack-panel-wrapper");

var WebControlWrapper = require('./web-control-wrapper');
var Orientation = require('../core/control-wrapper').Orientation;

var WebStackPanelWrapper = function(parent, bindingContext, controlSpec)
{
    var self = this;

    this.base = WebControlWrapper;
    this.base(parent, bindingContext, controlSpec);
    logger.info("StackPanel control created");

    this._control = document.createElement("div");
    this._control.classList.add("synchro-stackpanel");

    this._control.style.display = "flex"; // !!! inline-flex?
    this._control.style.flexDirection = "column"; // default, if "orientation" specified, will be set below
    this._control.style.alignItems = "flex-start";
    this._control.style.flexWrap = "nowrap"; // "wrap" for WrapPanel

    this.processThicknessProperty(controlSpec, "padding", "padding", this._control);

    if (controlSpec["contents"] != null)
    {
        this.createControls(controlSpec["contents"], function(childControlSpec, childControlWrapper)
        {
            logger.info("Created child control");
            self._control.appendChild(childControlWrapper._control);
        });
    }

    // !!! This is going to be shared be several controls - just put it in WebControlWrapper.processCommonFrameworkElementProperies ???
    this.processElementProperty(controlSpec, "orientation", function(value) 
    {
        self._control.style.flexDirection = self.toOrientation(value, Orientation.Vertical) == Orientation.Horizontal ? "row" : "column";
        for (var i = 0; i < self._childControls.length; i++)
        {
            var child = self._childControls[i];
            child._control.style.alignSelf = ((self._control.style.flexDirection == "row") ? child._vAlign : child._hAlign);
        }
    });
}

WebStackPanelWrapper.prototype = Object.create(WebControlWrapper.prototype);

module.exports = WebStackPanelWrapper;
