// https://developer.mozilla.org/en-US/docs/Web/API/Geolocation/Using_geolocation
//
var logger = require('log4js').getLogger("web-location-wrapper");

var WebControlWrapper = require('./web-control-wrapper');

var binding = require('../core/binding');
var CommandInstance = require('../core/command-instance');
var JToken = require('../core/json');

var LocationStatus = require('../core/control-wrapper').LocationStatus;

var WebLocationWrapper = function(parent, bindingContext, controlSpec)
{
    var self = this;

    this.base = WebControlWrapper;
    this.base(parent, bindingContext, controlSpec);

    logger.info("Location control created");

    this._isVisualElement = false;

    this._updateOnChange = false;

    this._status = LocationStatus.Unknown;
    this._location = null;

    if ("geolocation" in navigator) 
    {
        // Geolocation services available
        //
        logger.info("Geolocation is available");
        this._status = LocationStatus.DeterminingAvailability;

        // https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions
        //
        var positionOptions =
        {
            enableHighAccuracy: false, 
            timeout: Infinity,
            maximumAge: 0
        }

        var self = this;

        function onLocationSuccess(position)
        {
            logger.info("Got location - latitude: %d, longitude: %d", position.coords.latitude,  position.coords.longitude);
            lastPosition = position;
            self._status = LocationStatus.Active;
            self._location = position.coords;

            self.updateValueBindingForAttribute("value");

            var command = self.getCommand(CommandInstance.commandNames.OnUpdate);
            if (command != null)
            {
               self._stateManager.sendCommandRequestAsync(command.getCommand(), command.getResolvedParameters(self._bindingContext));
            }
            else if (self._updateOnChange)
            {
                self._stateManager.sendUpdateRequestAsync();
            }
        }

        function onLocationError(positionError)
        {
            // Error getting position
            //
            // https://developer.mozilla.org/en-US/docs/Web/API/PositionError
            //
            // positionError.code
            //
            // 1  PERMISSION_DENIED     The acquisition of the geolocation information failed because the page didn't have the permission to do it.
            // 2  POSITION_UNAVAILABLE  The acquisition of the geolocation failed because at least one internal source of position returned an internal error.
            // 3  TIMEOUT               The time allowed to acquire the geolocation, defined by PositionOptions.timeout information was reached before the information was obtained.
            //
            // positionError.message    Human-readable DOMString describing the details of the error. Specifications note that this is primarily
            //                          intended for debugging use and not to be shown directly in a user interface.
            //
            logger.error("Get location failed:", positionError);
            if (positionError.code == 1)
            {
                self._status = LocationStatus.NotApproved;
            }
            else
            {
                self._status = LocationStatus.Failed;
            }
            self._location = null; // In case there was a previous location (when watching)

            var command = self.getCommand(CommandInstance.commandNames.OnUpdate);
            if (command != null)
            {
               self._stateManager.sendCommandRequestAsync(command.getCommand(), command.getResolvedParameters(self._bindingContext));
            }
            else if (self._updateOnChange)
            {
                self._stateManager.sendUpdateRequestAsync();
            }
        }

        this._watchId = navigator.geolocation.watchPosition(onLocationSuccess, onLocationError, positionOptions);
    } 
    else 
    {
        // Geolocation services NOT available
        //
        logger.info("Geolocation is not available");
        this._status = LocationStatus.NotAvailable;
    }

    var bindingSpec = binding.getCanonicalBindingSpec(controlSpec, "value", WebLocationWrapper.commands);

    this.processCommands(bindingSpec, WebLocationWrapper.commands);

    this.processElementBoundValue("value", bindingSpec["value"], function() 
    { 
        logger.info("Getting control value");
        var value = 
        {
            "available": ((self._status == LocationStatus.Available) || (self._status == LocationStatus.Active)),
            "status": self._status
        };

        if (self._location != null)
        {
            // https://developer.mozilla.org/en-US/docs/Web/API/Coordinates
            //
            // position.coords.latitude
            // position.coords.longitude
            // position.coords.accuracy
            // position.coords.heading
            // position.coords.speed
            //
            value["coordinate"] = 
            {
                "latitude": self._location.latitude,
                "longitude": self._location.longitude
            }

            value["accuracy"] = self._location.accuracy;

            // Note: If speed is 0 (or null, nor NaN), heading should be ignored (heading should be NaN, but sometimes reports as null or 0)
            //
            if (self._location.speed > 0)
            {
                value["speed"] = self._location.speed;
                value["heading"] = self._location.heading;
            }
        }

        return new JToken(value);
    });

    if (bindingSpec["sync"] == "change")
    {
        this._updateOnChange = true;
    }

    // This triggers the viewModel update
    //
    this.updateValueBindingForAttribute("value");
}

WebLocationWrapper.prototype = Object.create(WebControlWrapper.prototype);

WebLocationWrapper.commands = [ CommandInstance.commandNames.OnUpdate ];

WebLocationWrapper.prototype.base_unregister = WebLocationWrapper.prototype.unregister;

WebLocationWrapper.prototype.unregister = function()
{
    logger.info("Location control being unregistered");
    if (this._watchId)
    {
        navigator.geolocation.clearWatch(this._watchId);
    }
    this.base_unregister();
}

module.exports = WebLocationWrapper;
