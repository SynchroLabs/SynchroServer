var logger = require('log4js').getLogger("web-listview-wrapper");

var WebControlWrapper = require('./web-control-wrapper');

var binding = require('../core/binding');
var PropertyValue = binding.PropertyValue;
var CommandInstance = require('../core/command-instance');
var JToken = require('../core/json');

var SelectionMode = require('../core/control-wrapper').ListSelectionMode;

var WebListViewWrapper = function(parent, bindingContext, controlSpec)
{
    this.base = WebControlWrapper;
    this.base(parent, bindingContext, controlSpec);
    logger.info("ListView control created");

    this._selectionChangingProgramatically = false;
    this._localSelection =  null;

    var listview = document.createElement("ul");
    listview.classList.add("synchro-listview");

    this._selectionMode = this.toListSelectionMode(this.processElementProperty(controlSpec, "select", null));

    this._control = listview;

    var self = this;
    var bindingSpec = binding.getCanonicalBindingSpec(controlSpec, "items", WebListViewWrapper.commands);

    this.processCommands(bindingSpec, WebListViewWrapper.commands);

    if (bindingSpec["items"])
    {
        var itemContent = bindingSpec["itemContent"] || "{$data}";

        this.processElementBoundValue(
            "items",
            bindingSpec["items"],
            function() { return self.getListViewContents(listview) }, // !!! ??? Do we need this?  We never get the listview contents
            function(value) { self.setListViewContents(listview, self.getValueBinding("items").getBindingContext(), controlSpec["itemTemplate"]) }
            );
    }

    if (bindingSpec["selection"])
    {
        var selectionItem = bindingSpec["selectionItem"] || "$data";

        this.processElementBoundValue(
            "selection",
            bindingSpec["selection"],
            function() { return self.getListViewSelection(listview, selectionItem) },
            function(value) { self.setListViewSelection(listview, selectionItem, value) }
            );
    }

    // Also "change"? (weird semantics)
    listview.addEventListener("input", this.onSelectionChanged.bind(this), false);
}
WebListViewWrapper.prototype = Object.create(WebControlWrapper.prototype);

WebListViewWrapper.commands = [ CommandInstance.commandNames.OnItemClick, CommandInstance.commandNames.OnSelectionChange ];

// ListViewItem
//
var WebListViewItemWrapper = function(parent, bindingContext, itemTemplate)
{
    this.base = WebControlWrapper;
    this.base(parent, bindingContext, null); // controlSpec is only used for styles, which this item won't have
    logger.info("ListView item control created");

    this._control = document.createElement("li");
    this._control.classList.add("synchro-listviewitem");

    var controlWrapper = WebControlWrapper.createControl(this, this._bindingContext, itemTemplate);
    this._control.appendChild(controlWrapper._control);

    this._control.addEventListener("click", this.onClick.bind(this), false);
}
WebListViewItemWrapper.prototype = Object.create(WebControlWrapper.prototype);

WebListViewItemWrapper.prototype.onClick = function()
{
    logger.info("listview item clicked");
    this._control.classList.toggle("selected");
}
//
// End ListViewItem

WebListViewWrapper.prototype.getListViewContents = function(listview)
{
    logger.debug("Getting listview contents");

    // I don't think this ever gets called or is needed
    /*
    JArray array = new JArray();
    foreach (BindingContextListItem item in listview.Items)
    {
        array.Add(new JValue(item.GetValue().ToString()));
    }
    return array;
    */
}

WebListViewWrapper.prototype.setListViewContents = function(listview, bindingContext, itemTemplate)
{
    // listview - DOM elemement
    // bindingContext - BindingContext
    // itemContent - string
    //
    logger.info("Setting listview contents");

    this._selectionChangingProgramatically = true;

    var itemContexts = bindingContext.selectEach("$data");

    var listItems = listview.getElementsByTagName("li");

    if (listItems.length < itemContexts.length)
    {
        // New items are added (to the end of the list)
        //
        for (var index = listItems.length; index < itemContexts.length; index++)
        {
            var itemControl = new WebListViewItemWrapper(this, itemContexts[index], itemTemplate);
            this._childControls.push(itemControl);
            listview.appendChild(itemControl._control);
        }
    }
    else if (listItems.length > itemContexts.length)
    {
        // Items need to be removed (from the end of the list)
        //
        for (var index = listItems.length; index > itemContexts.length; index--)
        {
            var control = listItems[index - 1];
            var wrapper = this.getChildControlWrapper(control);

            // Unregister any bindings for this element or any descendants
            //
            wrapper.unregister();
        }
        listItems.length = itemsContexts.length; // truncate
    }

    var selectionBinding = this.getValueBinding("selection");
    if (selectionBinding)
    {
        // If there is a "selection" value binding, then we update the selection state from that after filling the list.
        //
        selectionBinding.updateViewFromViewModel();
    }
    else if (this._localSelection)
    {
        // If there is not a "selection" value binding, then we use local selection state to restore the selection when
        // re-filling the list.
        //
        this.setListViewSelection(listview, "$data", this._localSelection);
    }

    this._selectionChangingProgramatically = false;
}

/*
function getSelectedItemBindingPaths(listview)
{
    var result = [];
    var options = listview.options;
    for (var i = 0; i < options.length; i++) 
    {
        opt = options[i];
        if (opt.selected)
        {
            logger.info("Item selected: %s, %s", opt.value, opt.text);
            result.push(opt.value);
        }
    }
    return result;
}
*/

WebListViewWrapper.prototype.getListViewSelection = function(listview, selectionItem)
{
    // listview - DOM elemement
    // selectionItem - string
    //
    logger.info("Getting listview selection");

    /*
    var selectedItemBindingPaths = getSelectedItemBindingPaths(listview);

    if (this._selectionMode == SelectionMode.Multiple)
    {
        var selectedTokens = [];
        for (var i = 0; i < selectedItemBindingPaths.length; i++) 
        {
            var itemContext = this._viewModel.getRootBindingContext().select(selectedItemBindingPaths[i]);
            var selectionContext = itemContext.select(selectionItem);
            selectedTokens.push(selectionContext.getValue().deepClone());
        }
        return new JToken(selectedTokens);
    }
    else
    {
        if (selectedItemBindingPaths.length > 0)
        {
            var itemContext = this._viewModel.getRootBindingContext().select(selectedItemBindingPaths[0]);
            var selectionContext = itemContext.select(selectionItem);
            return selectionContext.getValue().deepClone();
        }
        return new JToken(false); // This is a "null" selection
    }
    */
}

WebListViewWrapper.prototype.setListViewSelection = function(listview, selectionItem, selection)
{
    // listview - DOM elemement
    // selectionItem - string
    // selection - JToken
    //
    logger.info("Setting listview selection");

    this._selectionChangingProgramatically = true;

    if ((this._selectionMode == SelectionMode.Multiple) && JToken.isArray(selection))
    {
        /*
        var options = listview.options;
        for (var i = 0; i < options.length; i++) 
        {
            var itemSelected = false;

            var itemContext = this._viewModel.getRootBindingContext().select(options[i].value);
            var selectionContext = itemContext.select(selectionItem);

            var selections = selection.getValue()
            for (var j = 0; j < selections.length; j++)
            {
                itemSelected = selectionContext.getValue().deepEquals(selections[j]);
                if (itemSelected)
                {
                    logger.info("Selected item:", selections[j].getValue());
                    break;
                }
            }
            options[i].selected = itemSelected;
        }
        */
    }
    else
    {
        /*
        var options = listview.options;
        for (var i = 0; i < options.length; i++) 
        {
            var itemContext = this._viewModel.getRootBindingContext().select(options[i].value);
            var selectionContext = itemContext.select(selectionItem);

            options[i].selected = selectionContext.getValue().deepEquals(selection);
            if (options[i].selected)
            {
                logger.info("Selected item:", selection.getValue());
            }
        }
        */
    }

    this._selectionChangingProgramatically = false;
}

WebListViewWrapper.prototype.onSelectionChanged = function()
{
    logger.info("listview selection changed");

    var listview = this._control;

    var selectionBinding = this.getValueBinding("selection");
    if (selectionBinding)
    {
        this.updateValueBindingForAttribute("selection");
    }
    else if (!this._selectionChangingProgramatically)
    {
        this._localSelection = this.getListViewSelection(listview, "$data");
    }

    if (!this._selectionChangingProgramatically)
    {
        var command = this.getCommand(CommandInstance.commandNames.OnItemClick);
        if (command != null)
        {
            if (this._selectionMode == SelectionMode.Multiple)
            {
                // For selection mode "Multiple", the command hander resovles its tokens relative to the listview, not any list item(s).
                //
                this._stateManager.sendCommandRequestAsync(command.getCommand(), command.getResolvedParameters(this._bindingContext));
            }
            else
            {
                // For selection mode "Single", the command handler resolves its tokens relative to the item selected.
                //
                /*
                var selectedItemBindingPaths = getSelectedItemBindingPaths(listview);
                var itemContext = this._viewModel.getRootBindingContext().select(selectedItemBindingPaths[0]);
                this._stateManager.sendCommandRequestAsync(command.getCommand(), command.getResolvedParameters(itemContext));
                */
            }
        }
    }
}

module.exports = WebListViewWrapper;
