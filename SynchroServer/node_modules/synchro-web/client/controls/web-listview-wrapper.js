var logger = require('log4js').getLogger("web-listview-wrapper");

var WebControlWrapper = require('./web-control-wrapper');

var binding = require('../core/binding');
var PropertyValue = binding.PropertyValue;
var CommandInstance = require('../core/command-instance');
var JToken = require('../core/json');

var SelectionMode = require('../core/control-wrapper').ListSelectionMode;

var WebListViewWrapper = function(parent, bindingContext, controlSpec)
{
    var self = this;

    this.base = WebControlWrapper;
    this.base(parent, bindingContext, controlSpec);
    logger.info("ListView control created");

    this._selectionChangingProgramatically = false;
    this._localSelection =  null;

    this._selectionMode = this.toListSelectionMode(this.processElementProperty(controlSpec, "select", null));

    var listview = document.createElement("div");
    listview.classList.add("synchro-listview");

    this._control = listview;

    this._header = null;
    this._footer = null;

    if (controlSpec["header"])
    {
        this._headerElement = document.createElement("div");
        this._headerElement.classList.add("synchro-listview-header");
        listview.appendChild(this._headerElement);

        this._header = WebControlWrapper.createControl(this, this._bindingContext, controlSpec["header"]);
        this._headerElement.appendChild(this._header._control);
    }

    if (controlSpec["footer"])
    {
        this._footerElement = document.createElement("div");
        this._footerElement.classList.add("synchro-listview-footer");
        listview.appendChild(this._footerElement);

        this._footer = WebControlWrapper.createControl(this, this._bindingContext, controlSpec["footer"]);
        this._footerElement.appendChild(this._footer._control);
    }

    var bindingSpec = binding.getCanonicalBindingSpec(controlSpec, "items", WebListViewWrapper.commands);

    this.processCommands(bindingSpec, WebListViewWrapper.commands);

    if (bindingSpec["items"])
    {
        var itemContent = bindingSpec["itemContent"] || "{$data}";

        this.processElementBoundValue(
            "items",
            bindingSpec["items"],
            function() { return self.getListViewContents(listview) }, // !!! ??? Do we need this?  We never get the listview contents
            function(value) { self.setListViewContents(listview, self.getValueBinding("items").getBindingContext(), controlSpec["itemTemplate"]) }
            );
    }

    if (bindingSpec["selection"])
    {
        var selectionItem = bindingSpec["selectionItem"] || "$data";

        this.processElementBoundValue(
            "selection",
            bindingSpec["selection"],
            function() { return self.getListViewSelection(listview, selectionItem) },
            function(value) { self.setListViewSelection(listview, selectionItem, value) }
            );
    }
}
WebListViewWrapper.prototype = Object.create(WebControlWrapper.prototype);

WebListViewWrapper.commands = [ CommandInstance.commandNames.OnItemClick, CommandInstance.commandNames.OnSelectionChange ];

// ListViewItem
//
var WebListViewItemWrapper = function(parent, bindingContext, itemTemplate)
{
    this.base = WebControlWrapper;
    this.base(parent, bindingContext, null); // controlSpec is only used for styles, which this item won't have
    logger.info("ListView item control created");

    this._listView = parent;
    this._selected = false;

    this._control = document.createElement("div");
    this._control.classList.add("synchro-listview-item");

    var controlWrapper = WebControlWrapper.createControl(this, this._bindingContext, itemTemplate);
    this._control.appendChild(controlWrapper._control);

    this._control.addEventListener("click", this.onClick.bind(this), false);
}
WebListViewItemWrapper.prototype = Object.create(WebControlWrapper.prototype);

WebListViewItemWrapper.prototype.getSelected = function(isSelected)
{
    return this._selected;
}

WebListViewItemWrapper.prototype.setSelected = function(isSelected)
{
    if (isSelected)
    {
        this._control.classList.add("selected");
    }
    else
    {
        this._control.classList.remove("selected");
    }
    this._selected = isSelected;
}

WebListViewItemWrapper.prototype.onClick = function()
{
    logger.info("listview item clicked");
    this._listView.itemClicked(this);
}
//
// End ListViewItem

WebListViewWrapper.prototype.getListViewContents = function(listview)
{
    // This should never get called (it's not implemented on iOS either)
    logger.error("Get listview contents not implemented");
}

WebListViewWrapper.prototype.setListViewContents = function(listview, bindingContext, itemTemplate)
{
    // listview - DOM elemement
    // bindingContext - BindingContext
    // itemContent - string
    //
    logger.info("Setting listview contents");

    this._selectionChangingProgramatically = true;

    var itemContexts = bindingContext.selectEach("$data");

    var listItems = Array.from(listview.childNodes);
    if (this._header)
    {
        listItems.shift();
    }
    if (this._footer)
    {
        listItems.pop();
    }

    if (listItems.length < itemContexts.length)
    {
        // New items are added (to the end of the list)
        //
        for (var index = listItems.length; index < itemContexts.length; index++)
        {
            logger.info("Adding new element at index:", index);
            var itemControl = new WebListViewItemWrapper(this, itemContexts[index], itemTemplate);
            this._childControls.push(itemControl);

            if (this._footer)
            {
                listview.insertBefore(itemControl._control, this._footerElement);
            }
            else
            {
                listview.appendChild(itemControl._control);
            }
        }
    }
    else if (listItems.length > itemContexts.length)
    {
        // Items need to be removed
        //
        for (var index = listItems.length; index > itemContexts.length; index--)
        {
            var listItem = listItems[index - 1]; // "control" (DOM element)
            var wrapper = this.getChildControlWrapper(listItem);

            // Unregister any bindings for this element or any descendants
            //
            wrapper.unregister();

            // Remove this from _childControls
            //
            var index = this._childControls.indexOf(wrapper);
            this._childControls.splice(index, 1);

            // Remove the DOM element
            //
            this._control.removeChild(listItem);
        }
    }

    var selectionBinding = this.getValueBinding("selection");
    if (selectionBinding)
    {
        // If there is a "selection" value binding, then we update the selection state from that after filling the list.
        //
        selectionBinding.updateViewFromViewModel();
    }
    else if (this._localSelection)
    {
        // If there is not a "selection" value binding, then we use local selection state to restore the selection when
        // re-filling the list.
        //
        this.setListViewSelection(listview, "$data", this._localSelection);
    }

    this._selectionChangingProgramatically = false;
}

// For SelectionMode.Single
//
WebListViewWrapper.prototype.getSelectedItem = function()
{
    for (var i = 0; i < this._childControls.length; i++)
    {
        var child = this._childControls[i];
        if (child._control.classList.contains("synchro-listview-item"))
        {
            if (child.getSelected())
            {
                return child;
            }
        }
    }
    return null;
}

WebListViewWrapper.prototype.getListViewSelection = function(listview, selectionItem)
{
    // listview - DOM elemement
    // selectionItem - string
    //
    logger.info("Getting listview selection");

    if (this._selectionMode == SelectionMode.Multiple)
    {
        var selectedTokens = [];
        for (var i = 0; i < this._childControls.length; i++)
        {
            var child = this._childControls[i];
            if (child._control.classList.contains("synchro-listview-item"))
            {
                if (child.getSelected())
                {
                    var itemContext = child.getBindingContext();
                    var selectionContext = itemContext.select(selectionItem);
                    selectedTokens.push(selectionContext.getValue().deepClone());
                }
            }
        }
        return new JToken(selectedTokens);
    }
    else
    {
        var selectedItem = this.getSelectedItem();
        if (selectedItem)
        {
            var itemContext = selectedItem.getBindingContext();
            var selectionContext = itemContext.select(selectionItem);
            return selectionContext.getValue().deepClone();
        }
        return new JToken(false); // This is a "null" selection
    }
}

WebListViewWrapper.prototype.setListViewSelection = function(listview, selectionItem, selection)
{
    // listview - DOM elemement
    // selectionItem - string
    // selection - JToken
    //
    logger.info("Setting listview selection");

    this._selectionChangingProgramatically = true;

    if ((this._selectionMode == SelectionMode.Multiple) && JToken.isArray(selection))
    {
        for (var i = 0; i < this._childControls.length; i++)
        {
            var child = this._childControls[i];

            if (child._control.classList.contains("synchro-listview-item"))
            {
                var itemSelected = false;

                var itemContext = child.getBindingContext();
                var selectionContext = itemContext.select(selectionItem);

                var selections = selection.getValue()
                for (var j = 0; j < selections.length; j++)
                {
                    itemSelected = selectionContext.getValue().deepEquals(selections[j]);
                    if (itemSelected)
                    {
                        logger.info("Selected item:", selectionContext.getValue().toJson());
                        break;
                    }
                }
                child.setSelected(itemSelected);
            }
        }
    }
    else
    {
        for (var i = 0; i < this._childControls.length; i++)
        {
            var child = this._childControls[i];

            if (child._control.classList.contains("synchro-listview-item"))
            {
                var itemContext = child.getBindingContext();
                var selectionContext = itemContext.select(selectionItem);

                if (selectionContext.getValue().deepEquals(selection))
                {
                    logger.info("Selected item:", selectionContext.getValue().toJson());
                    child.setSelected(true);
                }
                else
                {
                    child.setSelected(false);
                }
            }
        }
    }

    this._selectionChangingProgramatically = false;
}

WebListViewWrapper.prototype.itemClicked = function(item)
{
    if (this._selectionMode == SelectionMode.None)
    {
        this.onItemClick(item);
    }
    else if (this._selectionMode == SelectionMode.Single)
    {
        // If the clicked item is not already selected
        if (!item.getSelected())
        {
            // Deselect the current selection
            var currentSelection = this.getSelectedItem();
            if (currentSelection)
            {
                currentSelection.setSelected(false);
            }

            // Select the clicked item
            item.setSelected(true);

            this.onSelectionChanged();
        }
    }
    else if (this._selectionMode == SelectionMode.Multiple)
    {
        // !!! Note: No current support for range selection (via shift-click)

        // Toggle the selection state of the clicked item
        item.setSelected(!item.getSelected());

        this.onSelectionChanged();
    }
}

// SelectMode.None
//
WebListViewWrapper.prototype.onItemClick = function(item)
{
    logger.info("listview item clicked");

    // This will get called when the selection mode is "None" and an item is clicked (no selection change events will
    // fire in this case).
    //
    var command = this.getCommand(CommandInstance.commandNames.OnItemClick);
    if (command != null)
    {
        logger.Debug("ListView item click with command: {0}", command);

        // The item click command handler resolves its tokens relative to the item clicked (not the list view).
        //
        this._stateManager.sendCommandRequestAsync(command.getCommand(), command.getResolvedParameters(item.getBindingContext()));
    }
}

// SelectMode.Single or SelectMode.Multiple
//
WebListViewWrapper.prototype.onSelectionChanged = function()
{
    logger.info("listview selection changed");

    var listview = this._control;

    var selectionBinding = this.getValueBinding("selection");
    if (selectionBinding)
    {
        this.updateValueBindingForAttribute("selection");
    }
    else if (!this._selectionChangingProgramatically)
    {
        this._localSelection = this.getListViewSelection(listview, "$data");
    }

    if (!this._selectionChangingProgramatically)
    {
        var command = this.getCommand(CommandInstance.commandNames.OnSelectionChange);
        if (command != null)
        {
            if (this._selectionMode == SelectionMode.Multiple)
            {
                // For selection mode "Multiple", the command hander resovles its tokens relative to the listview, not any list item(s).
                //
                this._stateManager.sendCommandRequestAsync(command.getCommand(), command.getResolvedParameters(this._bindingContext));
            }
            else
            {
                // For selection mode "Single", the command handler resolves its tokens relative to the item selected.
                //
                var currentSelection = this.getSelectedItem();
                this._stateManager.sendCommandRequestAsync(command.getCommand(), command.getResolvedParameters(currentSelection.getBindingContext()));
            }
        }
    }
}

module.exports = WebListViewWrapper;
