var logger = require('log4js').getLogger("web-webview-wrapper");

var WebControlWrapper = require('./web-control-wrapper');

var binding = require('../core/binding');
var CommandInstance = require('../core/command-instance');

var WebWebViewWrapper = function(parent, bindingContext, controlSpec)
{
    var self = this;

    this.base = WebControlWrapper;
    this.base(parent, bindingContext, controlSpec);
    logger.info("WebView control created");

    this._control = document.createElement("iframe");
    this._control.classList.add("synchro-webview");
    this._control.style.display = "inline-block";
    
    // Note: Browsers will generally obey an X-Frame-Options header value of SAMEORIGIN (common of large-scale consumer 
    //       web sites - Facebook, Google, YouTube, etc), as opposed to the native mobile platform web content containers,
    //       which generally ignore that header.

    this.processElementProperty(controlSpec, "contents", function(value) 
    {
        if ("srcdoc" in self._control)
        {
            self._control.srcdoc = self.toString(value);
        } 
        else
        {
            // !!! The srcdoc attribute not supported by MSFT browsers (IE or Edge).  JavaScript method below works, but
            //     can run into URL length limits.  A potential workaround is a srcdoc polyfill: 
            //
            //     https://github.com/jugglinmike/srcdoc-polyfill
            //     
            self._control.src = "javascript: '" + self.toString(value) + "'";
        }
    });

    this.processElementProperty(controlSpec, "url", function(value) { self._control.src = self.toString(value) });
}

WebWebViewWrapper.prototype = Object.create(WebControlWrapper.prototype);

module.exports = WebWebViewWrapper;
