var logger = require('log4js').getLogger("web-toggle-wrapper");

var WebControlWrapper = require('./web-control-wrapper');

var binding = require('../core/binding');
var CommandInstance = require('../core/command-instance');
var JToken = require('../core/json');

var WebImageToggleWrapper = function(parent, bindingContext, controlSpec)
{
    var self = this;

    this.base = WebControlWrapper;
    this.base(parent, bindingContext, controlSpec);
    logger.info("Image toggle control created");

    var toggle = document.createElement("input");
    toggle.classList.add("synchro-image-toggle");
    toggle.type = "image";

    this._control = toggle;

    var bindingSpec = binding.getCanonicalBindingSpec(controlSpec, "value", WebImageToggleWrapper.commands);

    this.processCommands(bindingSpec, WebImageToggleWrapper.commands);

    function setChecked(checked)
    {
        if (checked)
        {
            toggle.classList.add("checked");
            toggle.src = self._checkedResource;
        }
        else
        {
            toggle.classList.remove("checked");
            toggle.src = self._uncheckedResource;
        }
    }

    function getChecked()
    {
        return toggle.classList.contains("checked");
    }

    if (!this.processElementBoundValue("value", bindingSpec["value"], function() { return new JToken(getChecked()) }, function(value) { setChecked(self.toBoolean(value)) }))
    {
        this.processElementProperty(controlSpec, "value", function(value) { setChecked(self.toBoolean(value)) });
    }

    this.processElementProperty(controlSpec, "checkedresource", function(value) 
    {
        self._checkedResource = self.toString(value);
        if (getChecked())
        {
            toggle.src = self._checkedResource;
        }
    });

    this.processElementProperty(controlSpec, "uncheckedresource", function(value) 
    {
        self._uncheckedResource = self.toString(value);
        if (!getChecked())
        {
            toggle.src = self._uncheckedResource;
        }
    });

    this.processElementProperty(controlSpec, "alt", function(value) 
    {
        toggle.alt = self.toString(value);
    });

    toggle.addEventListener("click", this.OnToggle.bind(this), false);
}
WebImageToggleWrapper.prototype = Object.create(WebControlWrapper.prototype);

WebImageToggleWrapper.commands = [ CommandInstance.commandNames.OnToggle ];

WebImageToggleWrapper.prototype.OnToggle = function()
{
    logger.info("Toggle state changed");

    var toggle = this._control;
    if (toggle.classList.contains("checked"))
    {
        toggle.classList.remove("checked");
        toggle.src = this._uncheckedResource;
    }
    else
    {
        toggle.classList.add("checked");
        toggle.src = this._checkedResource;
    }

    this.updateValueBindingForAttribute("value");

    var command = this.getCommand(CommandInstance.commandNames.OnToggle);
    if (command != null)
    {
        logger.info("Toggle state with command: %s", command.getCommand());
        this._stateManager.sendCommandRequestAsync(command.getCommand(), command.getResolvedParameters(this._bindingContext));
    }
}

module.exports = WebImageToggleWrapper;
