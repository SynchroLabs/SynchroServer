// This module contains the helper API that is exposed to our app modules
//
module.exports = function(apiProcessor, resourceResolver)
{
    var services = 
    {
        getResourceUrl: function(resource)
        {
            return resourceResolver.getResourceUrl(resource);
        },

        navigateTo: function(context, route, params)
        {
            if (!apiProcessor.isValidContext(context))
            {
                throw new Error("A valid context must be the first parameter to Synchro.navigateTo()");
            }
            apiProcessor.navigateTo(context, route, params);
        },

        pushAndNavigateTo: function(context, route, params, state)
        {
            if (!apiProcessor.isValidContext(context))
            {
                throw new Error("A valid context must be the first parameter to Synchro.pushAndNavigateTo()");
            }
            apiProcessor.pushAndNavigateTo(context, route, params, state);
        },

        pop: function(context)
        {
            if (!apiProcessor.isValidContext(context))
            {
                throw new Error("A valid context must be the first parameter to Synchro.pop()");
            }
            apiProcessor.pop(context);
        },

        popTo: function(context, route)
        {
            if (!apiProcessor.isValidContext(context))
            {
                throw new Error("A valid context must be the first parameter to Synchro.popTo()");
            }
            apiProcessor.popTo(context, route);
        },

        showMessage: function(context, messageBox)
        {
            if (!apiProcessor.isValidContext(context))
            {
                throw new Error("A valid context must be the first parameter to Synchro.showMessage()");
            }
            apiProcessor.showMessage(context, messageBox);
        },
        
        choosePhoto: function(context, choosePhoto)
        {
            if (!apiProcessor.isValidContext(context))
            {
                throw new Error("A valid context must be the first parameter to Synchro.showMessage()");
            }
            apiProcessor.choosePhoto(context, choosePhoto);
        },
        
        launchUrl: function(context, primaryUrl, secondaryUrl)
        {
            if (!apiProcessor.isValidContext(context))
            {
                throw new Error("A valid context must be the first parameter to Synchro.launchUrl()");
            }
            apiProcessor.launchUrl(context, primaryUrl, secondaryUrl);
        },

        waitForAwaitable: function * (context)
        {
            if (!apiProcessor.isValidContext(context))
            {
                throw new Error("A valid context must be the first parameter to Synchro.waitForAwaitable()");
            }
            var args = Array.prototype.slice.call(arguments, 1);
            return yield apiProcessor.waitForAwaitable(this, context, args);
        },

        interimUpdateAwaitable: function * (context)
        {
            if (!apiProcessor.isValidContext(context))
            {
                throw new Error("A valid context must be the first parameter to Synchro.interimUpdateAwaitable()");
            }
            yield apiProcessor.interimUpdateAwaitable(context);
        },

        isActiveInstance: function(context)
        {
            if (!apiProcessor.isValidContext(context))
            {
                throw new Error("A valid context must be the first parameter to Synchro.isActiveInstance()");
            }
            return apiProcessor.isActiveInstance(context);
        },

        getMetrics: function(context)
        {
            if (!apiProcessor.isValidContext(context))
            {
                throw new Error("A valid context must be the first parameter to Synchro.getMetrics()");
            }
            return { DeviceMetrics: context.session.DeviceMetrics, ViewMetrics: context.session.ViewMetrics };
        },

        getConfig: function(context, key)
        {
            if (!apiProcessor.isValidContext(context))
            {
                throw new Error("A valid context must be the first parameter to Synchro.isActiveInstance()");
            }
            return apiProcessor.getConfig(context, key);
        }
    }

    return services;
}