// This is the file-based module store. 
//
// Note: This requires write access to the local file system for putModuleSoure support (required if
//       using Studio with save/update).
//
var fs = require('fs-extra');
var path = require('path');
var util = require('./util');

var logger = require('log4js').getLogger("file-module-store");

// All paths passed to/from a module store use forward slash delimiters.  Convert to/from platform-local
// path delimiters as necessary...
//
function toLocalPath(pathName)
{
    if (path.sep != '/')
    {
        // Replace forward slash with local platform seperator
        return pathName.replace(/[\/]/g, path.sep);
    }
    else
    {
        return pathName;
    }
}

function toPortablePath(pathName)
{
    if (path.sep != '/')
    {
        // Replace backslash with forward slash
        return pathName.replace(/[\\]/g, '/');
    }
    else
    {
        return pathName;
    }
}

function ensurePathExistsAsync(filePath, callback)
{
    var dirPath = path.dirname(filePath);
    fs.mkdir(dirPath, function(error) 
    {
        if (error && error.code == "EEXIST")
        {
            error = null;
        }

        if (error && error.code == "ENOENT")
        {
            // Parent of filePath didn't exist, create it now (this will recurse up the dir path until it works)
            //
            ensurePathExistsAsync(dirPath, function(err)
            {
                if (!err)
                {
                    // Assuming we created the parent, let's try creating the child again...
                    //
                    fs.mkdir(dirPath, callback);                    
                }
                else
                {
                    callback(err);
                }
            });
        }
        else
        {
            callback(error);            
        }
    });
}

module.exports = function(params)
{
    var modulesDir = params.directory;

    function getAppDefinition(container)
    {
        if (container && (container.length > 0))
        {
            var appDefinitionPath = path.resolve(modulesDir, container, "package.json");
            
            if (fs.existsSync(appDefinitionPath))
            {
                var content = util.removeBOM(fs.readFileSync(appDefinitionPath, 'utf8'));
                return JSON.parse(content);
            }
            else
            {
                // Defined behavior is return null if no appDefinition...
                return null;
            }
        }
        else
        {
            logger.error("getAppDefinition failed - no container provided");
            return null;
        }
    }

    function isSynchroApp(appDefinition)
    {
        return !!(appDefinition && appDefinition.engines["synchro"]);
    }

    var moduleStore = 
    {
        getAppContainers: function * ()
        {
            // Get all subdirs that contain a package.json file which itself indicates it is for a Synchro app...
            //
            var containers = [];

            var files = yield function(done){fs.readdir(modulesDir, done)}
            for (var n = 0; n < files.length; n++)
            {
                var directory = files[n];
                var stats = yield function(done){fs.stat(path.resolve(modulesDir, directory), done)}
                if (stats.isDirectory())
                {
                    var appDefinition = getAppDefinition(directory);
                    if (appDefinition)
                    {
                        if (isSynchroApp(appDefinition))
                        {
                            containers.push(directory);
                        }
                    }
                }
            }

            return containers;
        },

        createAppContainer: function * (container)
        {
            // Verify that directory does not exist, then create directory and populate with empty synchro.json file...
            //
            var appContainerPath = path.resolve(modulesDir, container);

            if (fs.existsSync(appContainerPath))
            {
                var appDefinition = getAppDefinition(container);
                if (appDefinition)
                {
                    if (isSynchroApp(appDefinition))
                    {
                        // A Synchro app already exists in this directory...
                        //
                        throw new Error("A Synchro application already exists in the container: '" + container + "'");                        
                    }
                    else
                    {
                        // A package.json was found, but not one for a Synchro app...
                        //
                        throw new Error("The container: '" + container + "' is already in use by a Node package, but not by a Synchro application");                                            
                    }
                } 
                else
                {
                    // The directory name is in use, but not by an existing Synchro app...
                    //
                    throw new Error("The container: '" + container + "' is already in use, but not by a Synchro application");                                        
                }
            }
            else
            {
                // Create directory and empty-ish package file...
                //
                var packageJson = { engines: { "synchro": "* "} };
                yield function(done){fs.mkdir(appContainerPath, done)}
                yield function(done){fs.writeFile(path.resolve(appContainerPath, "package.json"), JSON.stringify(packageJson), done)}
            }
        },

        deleteAppContainer: function * (container)
        {
            // Verify that the directory exists and contains a synchro.json file, then delete directory and all contents...
            //
            var appContainerPath = path.resolve(modulesDir, container);

            if (fs.existsSync(appContainerPath))
            {
                var appDefinition = getAppDefinition(container);
                if (appDefinition)
                {
                    if (isSynchroApp(appDefinition))
                    {
                        // An app exists in this directory, so we can delete it...
                        //
                        yield function(done){fs.remove(appContainerPath, done)}
                    }
                    else
                    {
                        // A package.json was found, but not one for a Synchro app...
                        //
                        throw new Error("The container: '" + container + "' is in use by a Node package, not by a Synchro application, so it can't be deleted");
                    }
                }
                else
                {
                    // The directory exists, but does not contain a Synchro app, so we can't delete it...
                    //
                    throw new Error("The container: '" + container + "' is in use, but not by a Synchro application, so it can't be deleted");
                }
            }
            else
            {
                // The directory doesn't exist...
                //
                throw new Error("The container: '" + container + "' does not exist");
            }
        },

        getAppModuleStore: function * (container)
        {
            // Note: modulesDir is either relative to cwd or fully specified
            //
            var appContainerPath = path.resolve(modulesDir, container); 

            // Verify that the container exists and contains an app...
            //
            if (fs.existsSync(appContainerPath))
            {
                var appDefinition = getAppDefinition(container);
                if (!appDefinition || !isSynchroApp(appDefinition))
                {
                    // The directory exists, but does not contain a Synchro app...
                    //
                    throw new Error("The container: '" + container + "' is in use, but not by a Synchro application");
                }
            }
            else
            {
                // The directory doesn't exist...
                //
                throw new Error("The container: '" + container + "' does not exist");
            }

            var app =
            {
                getAppDefinition: function * ()
                {
                    return getAppDefinition(container);
                },

                listModules: function * ()
                {
                    var modules = [];

                    // Find all *.js file, including in subdirectories, not including anything in node_modules...
                    //
                    function * walk(dir)
                    {
                        var list = yield function(done){fs.readdir(dir, done)}
                        for (var i = 0; i < list.length; i++) 
                        {
                            var file = list[i];

                            if (path.basename(file) != "node_modules")
                            {
                                file = path.resolve(dir, file);
                                var stat = yield function(done){fs.stat(file, done)}
                                if (stat && stat.isDirectory())
                                {
                                    yield walk(file);
                                } 
                                else if (path.extname(file) == ".js")
                                {
                                    // Push found file path, relative to original base dir, with any backslashes corrected to forward slashes...
                                    //
                                    modules.push(toPortablePath(file.substring(appContainerPath.length + 1)));
                                }
                            }
                        }
                    }

                    yield walk(appContainerPath);

                    return modules;
                },

                getModuleSource: function * (moduleFilename)
                {
                    var moduleFilePath = path.resolve(appContainerPath, toLocalPath(moduleFilename));
                    var content = util.removeBOM(fs.readFileSync(moduleFilePath, 'utf8'));
                    return content;
                },

                putModuleSource: function * (moduleFilename, content)
                {
                    var moduleFilePath = path.resolve(appContainerPath, toLocalPath(moduleFilename));
                    yield function(done){ensurePathExistsAsync(moduleFilePath, done)}
                    fs.writeFileSync(moduleFilePath, content, 'utf8');
                },

                removeModuleSource: function * (moduleFilename)
                {
                    var moduleFilePath = path.resolve(appContainerPath, toLocalPath(moduleFilename));
                    fs.unlinkSync(moduleFilePath);
                }
            }

            return app;
        }
    }

    return moduleStore;
}
