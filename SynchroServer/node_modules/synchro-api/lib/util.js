
var crypto = require("crypto");
var lodash = require("lodash");

var logger = require('log4js').getLogger("util");


exports.formatJSON = function(obj)
{
    return JSON.stringify(obj, null, 4);
}

// This handy method allows you to completely repopulate an object with new contents (removing/replacing any
// previous contents).  This is particularly useful for doing a poor-mans pass-by-reference when using an
// object param.
//
exports.assignNewContents = function(obj, contents)
{
    lodash.each(obj, function(v, k) 
    {
        delete obj[k];
    });
    lodash.assign(obj, contents);
}

exports.jsonHash = function(obj)
{
   return crypto.createHash('sha1').update(JSON.stringify(obj)).digest("hex");
}

exports.removeBOM = function(content)
{
    // Remove byte order marker. This catches EF BB BF (the UTF-8 BOM) because the buffer-to-string
    // conversion in `fs.readFileSync()` translates it to FEFF, the UTF-16 BOM.
    //
    if (content.charCodeAt(0) === 0xFEFF)
    {
        content = content.slice(1);
    }

    return content;
}

exports.getObjectProperty = function(obj, propertyPath)
{
    propertyPath = propertyPath.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties
    var parts = propertyPath.split('.'),
        last = parts.pop(),
        len = parts.length,
        i = 1,
        current = parts[0];

    if (len > 0)
    {
        while ((obj = obj[current]) && i < len)
        {
            current = parts[i];
            i++;
        }
    }

    if (obj)
    {
        return obj[last];
    }
}

exports.setObjectProperty = function(obj, propertyPath, value)
{
    propertyPath = propertyPath.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties
    var parts = propertyPath.split('.'),
        last = parts.pop(),
        len = parts.length,
        i = 1,
        current = parts[0];

    if (len > 0)
    {
        while ((obj = obj[current]) && i < len)
        {
            current = parts[i];
            i++;
        }
    }
    
    if (obj)
    {
        obj[last] = value;
        return obj[last];
    }
}
