// Module: AsynchOperationsManager
//
// This object is used to manage asynchronous communications when the completion of the asynch operation cannot
// be passed as a callback, most typically when doing an interprocess-communication (IPC) call.  This object allows
// you to queue your completion state (including callback and/or data), returning an identifier that can be serialized
// for use in the IPC.  You can send this identifier to the remote process, and when that process sends a reply, it
// will send this identifier back to the calling process, which can use it to retrieve the completion state and then
// complete the operation.
//
// This object also manages timeouts, including calling any supplied callback with a timeout error on timeout.
//
var logger = require('log4js').getLogger("async-ops-mgr");

var AsynchOperationsManager = function(defaultTimeout)
{
    this.defaultTimeout = defaultTimeout;
    this.operationId = 0;
    this.operationList = {};
}

function operationTimeout(asyncOpsMgr, id)
{
    var operation = asyncOpsMgr.operationList[id];
    delete asyncOpsMgr.operationList[id];

    var err = new Error("The operation timed out");
    if (operation.callback)
    {
        operation.callback(err);
    }
    else
    {
        logger.error(err);
    }
}

// Returns id to be used when calling operationComplete
AsynchOperationsManager.prototype.startOperation = function(callback, data, timeout)
{
    var id = this.operationId++;
    logger.debug("Operation started, id:", id);

    var operation = { callback: callback, data: data };

    timeout = timeout || this.defaultTimeout;
    if (timeout)
    {
        var asyncOpsMgr = this;
        operation.timer = setTimeout(function(){operationTimeout(asyncOpsMgr, id)}, timeout);
    }
    this.operationList[id] = operation;

    logger.debug("Operations pending after started:", Object.keys(this.operationList));

    return id;
}

// Returns object with callback and data
AsynchOperationsManager.prototype.operationComplete = function(id)
{
    logger.debug("Operation complete, id:", id);

    var operation = this.operationList[id];
    if (operation)
    {
        if (operation.timer)
        {
            clearTimeout(operation.timer);
            delete operation.timer;
        }
        delete this.operationList[id];
    }

    logger.debug("Operations pending after complete:", Object.keys(this.operationList));

    // Note: If operation has timed out, or operationComplete has already been called for this id, 
    //       the value returned here will be undefined.
    //
    return operation;
}

module.exports = AsynchOperationsManager;
