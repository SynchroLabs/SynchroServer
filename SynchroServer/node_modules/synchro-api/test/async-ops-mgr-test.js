var test = require('./test');

var assert = require("assert")
require("./assert-helper");

var AsyncOperationsManager = require("../lib/async-ops-mgr");
var asyncOpsManager = new AsyncOperationsManager(30000);

var logger = require('log4js').getLogger("async-ops-mgr-test");

describe("AsyncOperationsManager", function()
{
    it("should return callback on complete", function(done)
    {
        var id = asyncOpsManager.startOperation(done);
        var asyncOp = asyncOpsManager.operationComplete(id);

        assert.equal(asyncOp.callback, done);
        asyncOp.callback();
    });

    it("should return data on complete", function()
    {
        var id = asyncOpsManager.startOperation(null, "foo");
        var asyncOp = asyncOpsManager.operationComplete(id);

        assert.equal(asyncOp.data, "foo");
    });

    it("should remove operation when complete", function()
    {
        var id = asyncOpsManager.startOperation();
        assert.equal(Object.keys(asyncOpsManager.operationList).length, 1);

        asyncOpsManager.operationComplete(id);
        assert.equal(Object.keys(asyncOpsManager.operationList).length, 0);
    });

    it("should not allow completion more than once", function()
    {
        var id = asyncOpsManager.startOperation();
        asyncOpsManager.operationComplete(id);
        var asyncOp = asyncOpsManager.operationComplete(id);

        assert.equal(asyncOp, null);
    });

    it("should call callback on timeout", function(done)
    {
        function onTimeout(err, data)
        {
            done();
        }

        asyncOpsManager.startOperation(onTimeout, null, 20);
    });

    it("should remove operation on timeout", function(done)
    {
        function onTimeout(err, data)
        {
            assert.equal(Object.keys(asyncOpsManager.operationList).length, 0);
            done();
        }

        asyncOpsManager.startOperation(onTimeout, null, 20);
        assert.equal(Object.keys(asyncOpsManager.operationList).length, 1);
    });

    it("should produce serializable id", function()
    {
        var id = asyncOpsManager.startOperation(null, "bar");
        var roundTripId = JSON.parse(JSON.stringify(id));
        assert.equal(roundTripId, id);

        var asyncOp = asyncOpsManager.operationComplete(roundTripId);
        assert.equal(asyncOp.data, "bar");
    });
});