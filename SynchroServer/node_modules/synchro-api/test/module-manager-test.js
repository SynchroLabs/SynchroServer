require('./test');

var assert = require("assert");
require("./assert-helper");

var fs = require('fs');
var path = require('path');
var nconf = require('nconf');

var util = require("../lib/util");

var logger = require('log4js').getLogger("module-manager-test");

describe("Module Manager", function()
{
    var appRootPath = path.resolve(__dirname);
    var moduleDirectory = path.resolve(__dirname, 'testapp');

    // Read-only module store, backed by test files
    //
    var moduleStore = 
    {
        getAppModuleStoreAwaitable: function * (container)
        {
            var app =
            {
                getAppDefinitionAwaitable: function * ()
                {
                    var appDefinitionPath = path.resolve(moduleDirectory, "package.json");
                    var content = util.removeBOM(fs.readFileSync(appDefinitionPath, 'utf8'));
                    return JSON.parse(content);
                },
                    
                listModulesAwaitable: function * ()
                {
                    return ["menu.js", "counter.js"];
                },
                    
                getModuleSourceAwaitable: function * (moduleFilename)
                {
                    var moduleFilePath = path.resolve(moduleDirectory, moduleFilename);
                    return util.removeBOM(fs.readFileSync(moduleFilePath, 'utf8'));
                },
                    
                putModuleSourceAwaitable: function * (moduleFilename, content)
                {
                },
                    
                removeModuleSourceAwaitable: function * (moduleFilename)
                {
                }
            }

            return app;
        }
    };

    var resourceResolver =
    {
        getResourceUrl: function(context, resource)
        {
            return "test:" + resource;
        }
    };

    var moduleManager;

    before(function *()
    {
        var apiProcessor = 
        {
            isValidContext: function()
            {
                return true;
            }
        }

        var config = new nconf.Provider();
        config.defaults({"APP_ROOT_PATH": appRootPath});

        moduleManager = yield require('../lib/module-manager')(moduleStore, config, "container", resourceResolver);
        yield moduleManager.loadRoutesAwaitable(apiProcessor);
    });

    it("should get proper app definition on loadRoutes", function * () 
    {
        var appDefinition = yield moduleManager.loadRoutesAwaitable(apiProcessor);
        var expectedAppDefinition = 
        {
            "name": "synchro-test",
            "version": "0.0.0",
            "description": "Synchro API Test",
            "main": "launch",
            "author": "Bob Dickinson <bob@synchro.io> (http://synchro.io/)",
            "private": true,
            "engines": { "synchro": "*" }
        }
        assert.objectsEqual(appDefinition, expectedAppDefinition);
    });

    it("should get loaded modules via getModule", function()
    {
        var menu = moduleManager.getModule("menu");
        var menuViewModel = menu.InitializeViewModel({}, {});
        assert.objectsEqual(menuViewModel, { test: "testValue" });

        var counter = moduleManager.getModule("counter");
        var counterViewModel = counter.InitializeViewModel({}, {});
        assert.objectsEqual(counterViewModel, { count: 0 });
    });

    it("should get correct view from loaded module", function()
    {
        var menu = moduleManager.getModule("menu");
        var view = 
        {
            title: "Menu",
            elements: 
            [
		        { control: "button", caption: "Counter", binding: "goToCounter" },
	        ]
        };
        assert.objectsEqual(menu.View, view);
    });

    it("should be able to load a module with dynamic view only, and get correct view from same", function()
    {
        // This used to fail (fail to load the module at all, because it lacked the View member)
        //
        var counter = moduleManager.getModule("counter");
        var view = 
        {
            title: "Counter Page",
            onBack: "exit",
            elements: 
            [
                { control: "text", value: "Count: {count}", font: 24 },
            ]
        };
        assert.objectsEqual(counter.View, undefined);
        assert.objectsEqual(counter.InitializeView(), view);
    });

    it("should be able to access app services from loaded module", function() 
    {
        var counter = moduleManager.getModule("counter");
        var counterViewModel = counter.InitializeViewModel({}, {});
        assert.objectsEqual(counterViewModel, { count: 0 });

        // This will do a Synchro.getResourceUrl() in the module
        counter.Commands.test({}, {}, counterViewModel);
        assert.objectsEqual(counterViewModel, { count: 0, url: "test:user.png" });
    });

    it("should update already loaded module instance with new module content on reloadModule", function * ()
    {
        var oldModuleFilePath = path.resolve(moduleDirectory, "counter.js");
        var newModuleFilePath = path.resolve(moduleDirectory, "counter_update.js");

        var counter = moduleManager.getModule("counter");
        var counterViewModel = counter.InitializeViewModel({}, {});
        assert.objectsEqual(counterViewModel, { count: 0 });

        // Test with counter.js
        //
        counter.Commands.inc({}, {}, counterViewModel);
        assert.objectsEqual(counterViewModel, { count: 1 });

        // Make counter_uodate.js -> counter.js
        //
        fs.renameSync(oldModuleFilePath, oldModuleFilePath + ".tmp");
        fs.renameSync(newModuleFilePath, oldModuleFilePath);
        yield moduleManager.reloadModuleAwaitable("counter.js");

        // Test with updated counter.js
        //
        counter = moduleManager.getModule("counter");
        counter.Commands.inc({}, {}, counterViewModel);
        assert.objectsEqual(counterViewModel, { count: 6 });

        // Put counter.js back
        //
        fs.renameSync(oldModuleFilePath, newModuleFilePath);
        fs.renameSync(oldModuleFilePath + ".tmp", oldModuleFilePath);
        yield moduleManager.reloadModuleAwaitable("counter.js");

        // Retest with original counter.js
        //
        counter = moduleManager.getModule("counter");
        counter.Commands.inc({}, {}, counterViewModel);
        assert.objectsEqual(counterViewModel, { count: 7 });
    });
});
