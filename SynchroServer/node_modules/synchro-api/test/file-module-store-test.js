require('./test');

var assert = require("assert");
require("./assert-helper");

var co = require('co');

var path = require('path');

var FileModuleStore = require("../lib/file-module-store");

var logger = require('log4js').getLogger("file-module-store-test");

describe("File module store", function()
{
    it("should list containers", function * () 
    {
    	var moduleStore = new FileModuleStore({ directory: __dirname });

    	var containers = yield moduleStore.getAppContainersAwaitable();
    	var expectedContainers = ["testapp"];

    	assert.deepEqual(containers, expectedContainers);
    });

    it("should create container", function * () 
    {
    	var moduleStore = new FileModuleStore({ directory: __dirname });

    	yield moduleStore.createAppContainerAwaitable("foo");

    	var containers = yield moduleStore.getAppContainersAwaitable();
    	var expectedContainers = ["testapp", "foo"];

    	assert.deepEqual(containers.sort(), expectedContainers.sort());
    });

    it("should delete container", function(done) 
    {
        var moduleStore = new FileModuleStore({ directory: __dirname });
        
        co(function * ()
        {
            yield moduleStore.deleteAppContainerAwaitable("foo");
        });
         
        // I get the following error fairly frequently when I run this test...
        //
        // Uncaught Error: EPERM: operation not permitted, stat 'C:\Dev\SynchroServer\SynchroServer\node_modules\synchro-api\test\foo'
        //   at Error(native)            
        //
        // What is happening is that in getAppContainers() it does an fs.readdir() which sometimes returns the very recently 
        // deleted "foo" directory, then when it iterates the found directories and does an isDirectory() on "foo", you get the
        // error (because foo actually isn't there).
        //
        // All of the file operations (the delete, the readdir, and the isDirectory/stat) are all async and awaited properly, so
        // I don't think this is our fault. 
        //
        // I added the wait below.  Even with values of up to 500ms, I still saw relatively frequent failures.  I had to crank it all
        // to the way to 1000ms to get 10 in a row without a failure. 
        //            
        setTimeout(function ()
        {
            co(function * ()
            {
                var containers = yield moduleStore.getAppContainersAwaitable();
                var expectedContainers = ["testapp"];
                
                assert.deepEqual(containers, expectedContainers);
                done();
            });
	    }, 1000);
    });

    it("should fail to create container that already exists", function(done) 
    {
    	co(function * ()
    	{
	    	var moduleStore = new FileModuleStore({ directory: __dirname });

	    	try
	    	{
		    	yield moduleStore.createAppContainerAwaitable("testapp");
	    	}
	    	catch (err)
	    	{
		    	done();
	    	}
	    });
    });

    it("should fail to delete container that doesn't exist", function(done) 
    {
    	co(function * ()
    	{
	    	var moduleStore = new FileModuleStore({ directory: __dirname });

	    	try
	    	{
		    	yield moduleStore.deleteAppContainerAwaitable("foo");
	    	}
	    	catch (err)
	    	{
		    	done();
	    	}
	    });
    });

    it("should fail to delete container that doesn't contain app", function(done) 
    {
    	co(function * ()
    	{
	    	var moduleStore = new FileModuleStore({ directory: __dirname });

	    	try
	    	{
		    	yield moduleStore.deleteAppContainerAwaitable("testconfig");
	    	}
	    	catch (err)
	    	{
		    	done();
	    	}
	    });
    });

    it("should get app module store from valid container", function(done) 
    {
    	co(function * ()
    	{
	    	var moduleStore = new FileModuleStore({ directory: __dirname });

	    	var appModuleStore = yield moduleStore.getAppModuleStoreAwaitable("testapp");

	    	var app = yield appModuleStore.getAppDefinitionAwaitable();

	    	assert.equal(app.name, "synchro-test");
	    	assert.equal(app.version, "0.0.0");
	    	done();
	    });
    });

    it("should fail to get app module store from invalid valid container", function(done) 
    {
    	co(function * ()
    	{
	    	var moduleStore = new FileModuleStore({ directory: __dirname });

	    	try
	    	{
		    	yield moduleStore.getAppModuleStoreAwaitable("foo");
	    	}
	    	catch (err)
	    	{
		    	done();
	    	}
	    });
    });
});
