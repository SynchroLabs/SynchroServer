require('./test');

var assert = require("assert");
require("./assert-helper");

var path = require('path');
var wait = require('wait.for');

var FileModuleStore = require("../lib/file-module-store");

var logger = require('log4js').getLogger("file-module-store-test");

describe("File module store", function()
{
    it("should list containers", function(done) 
    {
    	wait.launchFiber(function()
    	{
	    	var moduleStore = new FileModuleStore({ directory: __dirname });

	    	var containers = moduleStore.getAppContainers();
	    	var expectedContainers = ["testapp"];

	    	assert.deepEqual(containers, expectedContainers);
	    	done();
	    });
    });

    it("should create container", function(done) 
    {
    	wait.launchFiber(function()
    	{
	    	var moduleStore = new FileModuleStore({ directory: __dirname });

	    	moduleStore.createAppContainer("foo");

	    	var containers = moduleStore.getAppContainers();
	    	var expectedContainers = ["testapp", "foo"];

	    	assert.deepEqual(containers.sort(), expectedContainers.sort());
	    	done();
	    });
    });

    it("should delete container", function(done) 
    {
        // I get the following error about once every 5 or so times I run this test...
        //
    	// Uncaught Error: EPERM: operation not permitted, stat 'C:\Dev\SynchroServer\SynchroServer\node_modules\synchro-api\test\foo'
        //   at Error(native)

        wait.launchFiber(function()
    	{
	    	var moduleStore = new FileModuleStore({ directory: __dirname });

	    	moduleStore.deleteAppContainer("foo");

	    	var containers = moduleStore.getAppContainers();
	    	var expectedContainers = ["testapp"];

	    	assert.deepEqual(containers, expectedContainers);
	    	done();
	    });
    });

    it("should fail to create container that already exists", function(done) 
    {
    	wait.launchFiber(function()
    	{
	    	var moduleStore = new FileModuleStore({ directory: __dirname });

	    	try
	    	{
		    	moduleStore.createAppContainer("testapp");
	    	}
	    	catch (err)
	    	{
		    	done();
	    	}
	    });
    });

    it("should fail to delete container that doesn't exist", function(done) 
    {
    	wait.launchFiber(function()
    	{
	    	var moduleStore = new FileModuleStore({ directory: __dirname });

	    	try
	    	{
		    	moduleStore.deleteAppContainer("foo");
	    	}
	    	catch (err)
	    	{
		    	done();
	    	}
	    });
    });

    it("should fail to delete container that doesn't contain app", function(done) 
    {
    	wait.launchFiber(function()
    	{
	    	var moduleStore = new FileModuleStore({ directory: __dirname });

	    	try
	    	{
		    	moduleStore.deleteAppContainer("testconfig");
	    	}
	    	catch (err)
	    	{
		    	done();
	    	}
	    });
    });

    it("should get app module store from valid container", function(done) 
    {
    	wait.launchFiber(function()
    	{
	    	var moduleStore = new FileModuleStore({ directory: __dirname });

	    	var appModuleStore = moduleStore.getAppModuleStore("testapp");

	    	var app = appModuleStore.getAppDefinition();

	    	assert.equal(app.name, "synchro-test");
	    	assert.equal(app.version, "0.0.0");
	    	done();
	    });
    });

    it("should fail to get app module store from invalid valid container", function(done) 
    {
    	wait.launchFiber(function()
    	{
	    	var moduleStore = new FileModuleStore({ directory: __dirname });

	    	try
	    	{
		    	moduleStore.getAppModuleStore("foo");
	    	}
	    	catch (err)
	    	{
		    	done();	    		
	    	}
	    });
    });
});
