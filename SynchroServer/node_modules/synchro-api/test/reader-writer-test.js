var test = require('./test');

var assert = require("assert")
require("./assert-helper");

var ReaderWriter = require("../lib/reader-writer");
var readerWriter = new ReaderWriter();

var logger = require('log4js').getLogger("reader-writer-test");

describe("Reader-Writer", function()
{
	var channelId = "69";

	beforeEach(function()
	{
		readerWriter.drain();
	});

	it("should report no read pending when no read pending", function()
	{
		assert.equal(readerWriter.isReadPending(channelId), false);
	});

	it("should report no write pending when no write pending", function()
	{
		assert.equal(readerWriter.isWritePending(channelId), false);
	});

	it("should report read pending when read pending", function * ()
	{
		yield readerWriter.readAsyncAwaitable(channelId, function * (err, data){});
		assert.equal(readerWriter.isReadPending(channelId), true);
	});

	it("should report write pending when write pending", function * ()
	{
		yield readerWriter.writeAsyncAwaitable(channelId, function * (err, data){});
		assert.equal(readerWriter.isWritePending(channelId), true);
	});

	it("should report proper write pending status before and after satisfied write", function * ()
	{
		assert.equal(readerWriter.isReadPending(channelId), false);
		assert.equal(readerWriter.isWritePending(channelId), false);
		yield readerWriter.writeAsyncAwaitable(channelId, function * (err, writeDataAwaitable)
		{
			assert.equal(readerWriter.isReadPending(channelId), false);
			assert.equal(readerWriter.isWritePending(channelId), false);
			yield writeDataAwaitable("the data");
		});

		assert.equal(readerWriter.isReadPending(channelId), false);
		assert.equal(readerWriter.isWritePending(channelId), true);

		yield readerWriter.readAsyncAwaitable(channelId, function * (err, data)
		{
			assert.equal(readerWriter.isReadPending(channelId), false);
			assert.equal(readerWriter.isWritePending(channelId), false);
			test.recordCall();
		});

		test.assertDone();
	});

	it("should report proper read pending status before and after satisfied read", function * ()
	{
		assert.equal(readerWriter.isReadPending(channelId), false);
		assert.equal(readerWriter.isWritePending(channelId), false);

		yield readerWriter.readAsyncAwaitable(channelId, function *(err, data)
		{
			assert.equal(readerWriter.isReadPending(channelId), false);
			assert.equal(readerWriter.isWritePending(channelId), false);
			test.recordCall();
		});

		assert.equal(readerWriter.isReadPending(channelId), true);
		assert.equal(readerWriter.isWritePending(channelId), false);

		yield readerWriter.writeAsyncAwaitable(channelId, function * (err, writeDataAwaitable)
		{
			assert.equal(readerWriter.isReadPending(channelId), false);
			assert.equal(readerWriter.isWritePending(channelId), false);
			yield writeDataAwaitable("the data");
		});

		test.assertDone();
	});

	it("should cancel pending read", function * ()
	{
		assert.equal(readerWriter.isReadPending(channelId), false);
		assert.equal(readerWriter.isWritePending(channelId), false);

		yield readerWriter.readAsyncAwaitable(channelId, function * (err, data){});

		assert.equal(readerWriter.isReadPending(channelId), true);
		assert.equal(readerWriter.isWritePending(channelId), false);

		readerWriter.cancelRead(channelId);

		assert.equal(readerWriter.isReadPending(channelId), false);
		assert.equal(readerWriter.isWritePending(channelId), false);
	});

	it("should cancel pending write", function * ()
	{
		assert.equal(readerWriter.isReadPending(channelId), false);
		assert.equal(readerWriter.isWritePending(channelId), false);

		yield readerWriter.writeAsyncAwaitable(channelId, function * (err, writeDataAwaitable){});

		assert.equal(readerWriter.isReadPending(channelId), false);
		assert.equal(readerWriter.isWritePending(channelId), true);

		readerWriter.cancelWrite(channelId);

		assert.equal(readerWriter.isReadPending(channelId), false);
		assert.equal(readerWriter.isWritePending(channelId), false);
	});

	it("should cancel all by prefix", function * ()
	{
		var channel1 = "foo:1";
		var channel2 = "foo:2";
		var channel3 = "bar:1";

		readerWriter.cancelAll("foo"); // Just make sure we don't crash with no pending reads/writes

		assert.equal(readerWriter.isReadPending(channel1), false);
		assert.equal(readerWriter.isReadPending(channel2), false);
		assert.equal(readerWriter.isReadPending(channel3), false);
		assert.equal(readerWriter.isWritePending(channel1), false);
		assert.equal(readerWriter.isWritePending(channel2), false);
		assert.equal(readerWriter.isWritePending(channel3), false);

		yield readerWriter.writeAsyncAwaitable(channel1, function * (err, writeDataAwaitable){});
		yield readerWriter.writeAsyncAwaitable(channel2, function * (err, writeDataAwaitable){});
		yield readerWriter.writeAsyncAwaitable(channel3, function * (err, writeDataAwaitable){});

		assert.equal(readerWriter.isWritePending(channel1), true);
		assert.equal(readerWriter.isWritePending(channel2), true);
		assert.equal(readerWriter.isWritePending(channel3), true);

		readerWriter.cancelAll("foo:");

		assert.equal(readerWriter.isWritePending(channel1), false);
		assert.equal(readerWriter.isWritePending(channel2), false);
		assert.equal(readerWriter.isWritePending(channel3), true);

		readerWriter.cancelAll("bar:");

		assert.equal(readerWriter.isWritePending(channel1), false);
		assert.equal(readerWriter.isWritePending(channel2), false);
		assert.equal(readerWriter.isWritePending(channel3), false);

		yield readerWriter.readAsyncAwaitable(channel1, function * (err, data){});
		yield readerWriter.readAsyncAwaitable(channel2, function * (err, data){});
		yield readerWriter.readAsyncAwaitable(channel3, function * (err, data){});

		assert.equal(readerWriter.isReadPending(channel1), true);
		assert.equal(readerWriter.isReadPending(channel2), true);
		assert.equal(readerWriter.isReadPending(channel3), true);

		readerWriter.cancelAll("bar:");

		assert.equal(readerWriter.isReadPending(channel1), true);
		assert.equal(readerWriter.isReadPending(channel2), true);
		assert.equal(readerWriter.isReadPending(channel3), false);

		readerWriter.cancelAll("foo:");

		assert.equal(readerWriter.isReadPending(channel1), false);
		assert.equal(readerWriter.isReadPending(channel2), false);
		assert.equal(readerWriter.isReadPending(channel3), false);
	});

	it("should return correct read age", function * ()
	{
		yield readerWriter.readAsyncAwaitable("foo", function * (err, writeDataAwaitable){}, 69);

		assert.equal(readerWriter.getPendingReadAge("foo", 420), 351);
		assert.equal(readerWriter.getPendingReadAge("bar"), -1);
	});	

	it("should return correct write age", function * ()
	{
		yield readerWriter.writeAsyncAwaitable("foo", function * (err, writeDataAwaitable){}, 69);

		assert.equal(readerWriter.getPendingWriteAge("foo", 420), 351);
		assert.equal(readerWriter.getPendingWriteAge("bar"), -1);
	});	

	it("should purge old writes", function * ()
	{
		var channel1 = "foo:1";
		var channel2 = "foo:2";
		var channel3 = "bar:1";

		yield readerWriter.writeAsyncAwaitable(channel1, function * (err, writeDataAwaitable){}, 100);
		yield readerWriter.writeAsyncAwaitable(channel2, function * (err, writeDataAwaitable){}, 200);
		yield readerWriter.writeAsyncAwaitable(channel3, function * (err, writeDataAwaitable){}, 300);

		readerWriter.purgeWrites(69, true);

		assert.equal(readerWriter.isWritePending(channel1), true);
		assert.equal(readerWriter.isWritePending(channel2), true);
		assert.equal(readerWriter.isWritePending(channel3), true);

		readerWriter.purgeWrites(250, true);

		assert.equal(readerWriter.isWritePending(channel1), false);
		assert.equal(readerWriter.isWritePending(channel2), false);
		assert.equal(readerWriter.isWritePending(channel3), true);
	});

	it("should purge old reads", function * ()
	{
		var channel1 = "foo:1";
		var channel2 = "foo:2";
		var channel3 = "bar:1";

		yield readerWriter.readAsyncAwaitable(channel1, function * (err, writeDataAwaitable){}, 100);
		yield readerWriter.readAsyncAwaitable(channel2, function * (err, writeDataAwaitable){}, 200);
		yield readerWriter.readAsyncAwaitable(channel3, function * (err, writeDataAwaitable){}, 300);

		readerWriter.purgeReads(69, true);

		assert.equal(readerWriter.isReadPending(channel1), true);
		assert.equal(readerWriter.isReadPending(channel2), true);
		assert.equal(readerWriter.isReadPending(channel3), true);

		readerWriter.purgeReads(250, true);

		assert.equal(readerWriter.isReadPending(channel1), false);
		assert.equal(readerWriter.isReadPending(channel2), false);
		assert.equal(readerWriter.isReadPending(channel3), true);
	});

	it("should complete correctly when write posted before read", function * ()
	{
		yield readerWriter.writeAsyncAwaitable(channelId, function * (err, writeDataAwaitable)
		{
			assert.equal(err, null);
			yield writeDataAwaitable("the data");
		});

		yield readerWriter.readAsyncAwaitable(channelId, function * (err, data)
		{
			assert.equal(err, null);
			assert.equal("the data", data);
			test.recordCall();
		});

		test.assertDone();
	});

	it("should complete correctly when read postred before write", function * ()
	{
		yield readerWriter.readAsyncAwaitable(channelId, function * (err, data)
		{
			assert.equal(err, null);
			assert.equal(data, "the data");
			test.recordCall();
		});

		yield readerWriter.writeAsyncAwaitable(channelId, function * (err, writeDataAwaitable)
		{
			assert.equal(err, null);
			yield writeDataAwaitable("the data");
		});

		test.assertDone();
	});

	it("should get read data from cooresponding write", function * ()
	{
		yield readerWriter.writeAsyncAwaitable("different channel", function * (err, writeDataAwaitable)
		{
			assert(false, "Write for this channel should not get called");
		});

		yield readerWriter.writeAsyncAwaitable(channelId, function * (err, writeDataAwaitable)
		{
			assert.equal(err, null);
			yield writeDataAwaitable("the data");
		});

		yield readerWriter.writeAsyncAwaitable("yet a different channel", function * (err, writeDataAwaitable)
		{
			assert(false, "Write for this channel should not get called");
		});

		yield readerWriter.readAsyncAwaitable(channelId, function * (err, data)
		{
			assert.equal(err, null);
			assert.equal(data, "the data");
			test.recordCall();
		});

		test.assertDone();
	});

	it("should fail to post read with pending read on same channel", function * ()
	{
		yield readerWriter.readAsyncAwaitable(channelId, function * (err, data)
		{
			assert(false, "Should not get here");
		});

		yield readerWriter.readAsyncAwaitable(channelId, function * (err, data)
		{
			assert.notEqual(err, null);
			assert.equal(data, null);
			test.recordCall();
		});

		test.assertDone();
	});

	it("should fail to post write with pending write on same channel", function * ()
	{
		yield readerWriter.writeAsyncAwaitable(channelId, function * (err, writeDataAwaitable)
		{
			assert(false, "Should not get here");
		});

		yield readerWriter.writeAsyncAwaitable(channelId, function * (err, writeDataAwaitable)
		{
			assert.notEqual(err, null);
			assert.equal(writeDataAwaitable, null);
			test.recordCall();
		});

		test.assertDone();
	});
});