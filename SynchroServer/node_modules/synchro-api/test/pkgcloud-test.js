require('./test');

var assert = require("assert");
require("./assert-helper");

var co = require('co');

var path = require('path');

var PkgcloudModuleStore = require("../lib/pkgcloud-module-store");

var logger = require('log4js').getLogger("pkgcloud-module-store-test");

// Note: If the activeConfig is not defined, all tests will be skipped.  Set the activeConfig for the various services
//       and run them periodically.
//
//       Azure, Amazon S3, and OpenStack (IBM BlueMix account) all verified working as of 3/4/2016.
//

/*
// Azure
//
var activeConfig = {
    "provider": "azure",
    "storageAccount": "XXXXXXXX",
    "storageAccessKey": "XXXXXXXX"
};
var testContainer = "testapp";
var newContainer = "foo";
var nonAppContainer = "testconfig";

// Amazon S3
//
var activeConfig = {
    provider: 'amazon',
    keyId: 'XXXXXXXX', // access key id
    key: 'XXXXXXXX', // secret key
    region: 'us-west-2' // region
}
var testContainer = "synchrotest";
var newContainer = "synchrofoo";
var nonAppContainer = "synchrotestconfig";

// IBM BlueMix (OpenStack)
//
var activeConfig = {
    provider: 'openstack',
    keystoneAuthVersion: 'v3',

    authUrl: 'https://identity.open.softlayer.com/',
    region: "dallas",

    // projectId as provided in your Service Credentials
    tenantId: 'XXXXXXXX',

    username: 'XXXXXXXX',
    password: 'XXXXXXXX',

    domainId: "XXXXXXXX",
    domainName: "XXXXXXXX"
}
var testContainer = "testapp";
var newContainer = "foo";
var nonAppContainer = "testconfig";
*/


// Test preconditions:
//
//    testContainer must exist and contain sample app (composed of: counter.js, counter_update.js, menu.js, package.json)
//    nonAppContainer must exist and must not contain a package.json file
//    No other containers may exist
//    The container name in newAppContainer must be creatable
//
describe("Pkgcloud module store", function()
{
    before(function () {
        if (typeof activeConfig === 'undefined') 
        {
            // If no activeConfig defined, we skip these tests...
            this.skip();
        }
    });

	// When testing remote stores with multiple transactions, some of the tests exceed the default timeout
	//
	this.timeout(20000); 

    it("should list containers", function * () 
    {
    	var moduleStore = new PkgcloudModuleStore(activeConfig);

    	var containers = yield moduleStore.getAppContainersAwaitable();
    	var expectedContainers = [testContainer];

    	assert.deepEqual(containers, expectedContainers);
    });

    it("should create container", function * () 
    {
    	var moduleStore = new PkgcloudModuleStore(activeConfig);

    	yield moduleStore.createAppContainerAwaitable(newContainer);

    	var containers = yield moduleStore.getAppContainersAwaitable();
    	var expectedContainers = [testContainer, newContainer];

    	assert.deepEqual(containers.sort(), expectedContainers.sort());
    });

    it("should delete container", function * () 
    {
    	// Note: I have seen this fail on Amazon/S3, presumably due to timing of it having just been created.
    	//       When the test is run subsequently in isolation, it succeeds.
    	//
    	var moduleStore = new PkgcloudModuleStore(activeConfig);
        
        yield moduleStore.deleteAppContainerAwaitable(newContainer);

        var containers = yield moduleStore.getAppContainersAwaitable();
        var expectedContainers = [testContainer];
        
        assert.deepEqual(containers, expectedContainers);
    });

    it("should fail to create container that already exists", function * () 
    {
    	var moduleStore = new PkgcloudModuleStore(activeConfig);

    	try
    	{
	    	yield moduleStore.createAppContainerAwaitable(testContainer);
	    	assert.false(); // shouldn't get here
    	}
    	catch (err)
    	{
	    	logger.info("Got err as expected:", err);
    	}
    });

    it("should fail to delete container that doesn't exist", function * () 
    {
    	var moduleStore = new PkgcloudModuleStore(activeConfig);

    	try
    	{
	    	yield moduleStore.deleteAppContainerAwaitable("synchro_non_existant_container");
	    	assert.false(); // shouldn't get here
    	}
    	catch (err)
    	{
	    	logger.info("Got err as expected:", err);
    	}
    });

    it("should fail to delete container that doesn't contain app", function * () 
    {
    	var moduleStore = new PkgcloudModuleStore(activeConfig);

    	try
    	{
	    	yield moduleStore.deleteAppContainerAwaitable(nonAppContainer);
	    	assert.false(); // shouldn't get here
    	}
    	catch (err)
    	{
	    	logger.info("Got err as expected:", err);
    	}
    });

    it("should get app module store from valid container", function * () 
    {
    	var moduleStore = new PkgcloudModuleStore(activeConfig);

    	var appModuleStore = yield moduleStore.getAppModuleStoreAwaitable(testContainer);

    	var app = yield appModuleStore.getAppDefinitionAwaitable();

    	assert.equal(app.name, "synchro-test");
    	assert.equal(app.version, "0.0.0");
    });

    it("should fail to get app module store from invalid valid container", function * () 
    {
    	var moduleStore = new PkgcloudModuleStore(activeConfig);

    	try
    	{
	    	yield moduleStore.getAppModuleStoreAwaitable("foo");
	    	assert.false(); // shouldn't get here
    	}
    	catch (err)
    	{
    		logger.info("Got err as expected:", err);
    	}
    });

    it("should get module list", function * () 
    {
    	var moduleStore = new PkgcloudModuleStore(activeConfig);
    	var appModuleStore = yield moduleStore.getAppModuleStoreAwaitable(testContainer);

    	var modules = yield appModuleStore.listModulesAwaitable();

    	var expectedModules = ["counter.js", "counter_update.js", "menu.js"];

    	assert.deepEqual(modules.sort(), expectedModules.sort());
    });

    it("should get module source", function * () 
    {
    	var moduleStore = new PkgcloudModuleStore(activeConfig);

    	var appModuleStore = yield moduleStore.getAppModuleStoreAwaitable(testContainer);
    	var moduleSource = yield appModuleStore.getModuleSourceAwaitable("counter.js"); 
    	assert.equal(moduleSource.length, 1257);
    });

    it("should put module source", function * () 
    {
    	var moduleStore = new PkgcloudModuleStore(activeConfig);

    	var appModuleStore = yield moduleStore.getAppModuleStoreAwaitable(testContainer);
    	var contents = "// this is the contents of test file";
    	yield appModuleStore.putModuleSourceAwaitable("testfile.js", contents); 

    	var moduleSource = yield appModuleStore.getModuleSourceAwaitable("testfile.js"); 
    	assert.equal(moduleSource, contents);
    });

    it("should delete module source", function * () 
    {
    	var moduleStore = new PkgcloudModuleStore(activeConfig);

    	var appModuleStore = yield moduleStore.getAppModuleStoreAwaitable(testContainer);

    	var modules = yield appModuleStore.listModulesAwaitable();
    	var expectedModules = ["counter.js", "counter_update.js", "menu.js", "testfile.js"];
    	assert.deepEqual(modules.sort(), expectedModules.sort());

    	yield appModuleStore.removeModuleSourceAwaitable("testfile.js"); 

    	modules = yield appModuleStore.listModulesAwaitable();
    	expectedModules = ["counter.js", "counter_update.js", "menu.js"];
    	assert.deepEqual(modules.sort(), expectedModules.sort());
    });

});
